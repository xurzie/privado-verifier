{"version":3,"file":"index.js","sources":["../../../src/constants.ts","../../../src/utils.ts","../../../src/elemBytes.ts","../../../src/schemaHash.ts","../../../src/id.ts","../../../src/claim.ts","../../../src/did/did-helper.ts","../../../src/did/types.ts","../../../src/did/did-parser.ts","../../../src/did/did.ts","../../../src/registration.ts"],"sourcesContent":["export const Constants = Object.freeze({\n  ERRORS: {\n    // ErrDataOverflow means that given *big.Int value does not fit in Field Q\n    // e.g. greater than Q constant:\n    // Q constant: 21888242871839275222246405745257275088548364400416034343698204186575808495617\n    DATA_OVERFLOW: new Error('data does not fits SNARK size'),\n    // ErrIncorrectIDPosition means that passed position is not one of predefined:\n    // IDPositionIndex or IDPositionValue\n    INCORRECT_ID_POSITION: new Error('incorrect ID position'),\n    // throws when ID not found in the Claim.\n    NO_ID: new Error('ID is not set'),\n    // throws when subject position flags sets in invalid value.\n    INVALID_SUBJECT_POSITION: new Error('invalid subject position'),\n    // ErrIncorrectMerklizePosition means that passed position is not one of predefined:\n    // MerklizePositionIndex or MerklizePositionValue\n    INCORRECT_MERKLIZED_POSITION: new Error('incorrect Merklize position'),\n    // ErrNoMerklizedRoot returns when Merklized Root is not found in the Claim.\n    NO_MERKLIZED_ROOT: new Error('Merklized root is not set'),\n    NETWORK_NOT_SUPPORTED_FOR_DID: new Error('network in not supported for did'),\n    UNSUPPORTED_BLOCKCHAIN_FOR_DID: new Error('not supported blockchain for did'),\n    UNSUPPORTED_DID_METHOD: new Error('not supported DID method'),\n    UNKNOWN_DID_METHOD: new Error('unknown DID method'),\n    INCORRECT_DID: new Error('incorrect DID'),\n    UNSUPPORTED_ID: new Error('unsupported Id')\n  },\n  SCHEMA: {\n    HASH_LENGTH: 16\n  },\n  ETH_ADDRESS_LENGTH: 20,\n  BYTES_LENGTH: 32,\n  ELEM_BYTES_LENGTH: 4,\n  NONCE_BYTES_LENGTH: 8,\n  Q: BigInt('21888242871839275222246405745257275088548364400416034343698204186575808495617'),\n  ID: {\n    TYPE_DEFAULT: Uint8Array.from([0x00, 0x00]),\n    TYPE_READONLY: Uint8Array.from([0b00000000, 0b00000001]),\n    ID_LENGTH: 31\n  },\n  DID: {\n    DID_SCHEMA: 'did'\n  },\n  GENESIS_LENGTH: 27\n});\n\nexport const Blockchain: { [k: string]: string } = {\n  Ethereum: 'eth',\n  Polygon: 'polygon',\n  Privado: 'privado',\n  Billions: 'billions',\n  Linea: 'linea',\n  Unknown: 'unknown',\n  NoChain: '',\n  ReadOnly: 'readonly'\n};\n\nexport const NetworkId: { [k: string]: string } = {\n  Main: 'main',\n  Mumbai: 'mumbai',\n  Amoy: 'amoy',\n  Goerli: 'goerli',\n  Sepolia: 'sepolia',\n  Zkevm: 'zkevm',\n  Cardona: 'cardona',\n  Test: 'test',\n  Unknown: 'unknown',\n  NoNetwork: ''\n};\n\nexport const DidMethod: { [k: string]: string } = {\n  Iden3: 'iden3',\n  PolygonId: 'polygonid',\n  Other: ''\n};\n\n/**\n * Object containing chain IDs for various blockchains and networks.\n * @type { [key: string]: number }\n */\nexport const ChainIds: { [key: string]: number } = {\n  [`${Blockchain.Ethereum}:${NetworkId.Main}`]: 1,\n  [`${Blockchain.Ethereum}:${NetworkId.Goerli}`]: 5,\n  [`${Blockchain.Ethereum}:${NetworkId.Sepolia}`]: 11155111,\n  [`${Blockchain.Polygon}:${NetworkId.Main}`]: 137,\n  [`${Blockchain.Polygon}:${NetworkId.Mumbai}`]: 80001,\n  [`${Blockchain.Polygon}:${NetworkId.Amoy}`]: 80002,\n  [`${Blockchain.Polygon}:${NetworkId.Zkevm}`]: 1101,\n  [`${Blockchain.Polygon}:${NetworkId.Cardona}`]: 2442,\n  [`${Blockchain.Privado}:${NetworkId.Main}`]: 21000,\n  [`${Blockchain.Privado}:${NetworkId.Test}`]: 21001,\n  [`${Blockchain.Linea}:${NetworkId.Main}`]: 59144,\n  [`${Blockchain.Linea}:${NetworkId.Sepolia}`]: 59141,\n  [`${Blockchain.Billions}:${NetworkId.Main}`]: 45056,\n  [`${Blockchain.Billions}:${NetworkId.Test}`]: 6913\n};\n\nexport const DidMethodByte: { [key: string]: number } = {\n  [DidMethod.Iden3]: 0b00000001,\n  [DidMethod.PolygonId]: 0b00000010,\n  [DidMethod.Other]: 0b11111111\n};\n\nconst blockchainNetworkMap = {\n  [`${Blockchain.ReadOnly}:${NetworkId.NoNetwork}`]: 0b00000000,\n  [`${Blockchain.Polygon}:${NetworkId.Main}`]: 0b0001_0000 | 0b0000_0001,\n  [`${Blockchain.Polygon}:${NetworkId.Mumbai}`]: 0b0001_0000 | 0b0000_0010,\n  [`${Blockchain.Polygon}:${NetworkId.Amoy}`]: 0b0001_0000 | 0b0000_0011,\n  [`${Blockchain.Polygon}:${NetworkId.Zkevm}`]: 0b0001_0000 | 0b0000_0100,\n  [`${Blockchain.Polygon}:${NetworkId.Cardona}`]: 0b0001_0000 | 0b0000_0101,\n  [`${Blockchain.Ethereum}:${NetworkId.Main}`]: 0b0010_0000 | 0b0000_0001,\n  [`${Blockchain.Ethereum}:${NetworkId.Goerli}`]: 0b0010_0000 | 0b0000_0010,\n  [`${Blockchain.Ethereum}:${NetworkId.Sepolia}`]: 0b0010_0000 | 0b0000_0011,\n  [`${Blockchain.Privado}:${NetworkId.Main}`]: 0b1010_0000 | 0b0000_0001,\n  [`${Blockchain.Privado}:${NetworkId.Test}`]: 0b1010_0000 | 0b0000_0010,\n  [`${Blockchain.Linea}:${NetworkId.Main}`]: 0b0100_0000 | 0b0000_1001,\n  [`${Blockchain.Linea}:${NetworkId.Sepolia}`]: 0b0100_0000 | 0b0000_1000,\n  [`${Blockchain.Billions}:${NetworkId.Main}`]: 0b1011_0000 | 0b0000_0001,\n  [`${Blockchain.Billions}:${NetworkId.Test}`]: 0b1011_0000 | 0b0000_0010\n};\n\n// DIDMethodNetwork is map for did methods and their blockchain networks\nexport const DidMethodNetwork: {\n  [k: string]: { [k: string]: number };\n} = {\n  [DidMethod.Iden3]: {\n    ...blockchainNetworkMap\n  },\n  [DidMethod.PolygonId]: {\n    ...blockchainNetworkMap\n  },\n  [DidMethod.Other]: {\n    [`${Blockchain.Unknown}:${NetworkId.Unknown}`]: 0b1111_1111\n  }\n};\n","import { poseidon } from '@iden3/js-crypto';\nimport { Constants } from './constants';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nexport const encoder = new TextEncoder();\n\nexport function fromLittleEndian(bytes: Uint8Array): bigint {\n  const n256 = BigInt(256);\n  let result = BigInt(0);\n  let base = BigInt(1);\n  bytes.forEach((byte) => {\n    result += base * BigInt(byte);\n    base = base * n256;\n  });\n  return result;\n}\n\nexport function fromBigEndian(bytes: Uint8Array): bigint {\n  return fromLittleEndian(bytes.reverse());\n}\n\nexport function toLittleEndian(bigNumber: bigint, len = 31): Uint8Array {\n  const n256 = BigInt(256);\n  const result = new Uint8Array(len);\n  let i = 0;\n  while (bigNumber > BigInt(0)) {\n    result[i] = Number(bigNumber % n256);\n    bigNumber = bigNumber / n256;\n    i += 1;\n  }\n  return result;\n}\n\nexport function toBigEndian(bigNumber: bigint, len = 31): Uint8Array {\n  return toLittleEndian(bigNumber, len).reverse();\n}\n\nexport function putUint32(n: number): Uint8Array {\n  const buf = new ArrayBuffer(4);\n  const view = new DataView(buf);\n  view.setUint32(0, n, true);\n  return new Uint8Array(buf);\n}\n\nexport function getUint32(arr: Uint8Array): number {\n  const buf = arr.buffer.slice(arr.byteOffset, arr.byteOffset + arr.byteLength);\n  return new DataView(buf).getUint32(0, true);\n}\n\nexport function putUint64(n: bigint): Uint8Array {\n  const buf = new ArrayBuffer(8);\n  const view = new DataView(buf);\n  view.setBigUint64(0, n, true);\n  return new Uint8Array(buf);\n}\n\nexport function getUint64(arr: Uint8Array): bigint {\n  const buf = arr.buffer.slice(arr.byteOffset, arr.byteOffset + arr.byteLength);\n  return new DataView(buf).getBigUint64(0, true);\n}\n\nexport function getUnixTimestamp(d: Date): number {\n  return Math.floor(d.getTime() / 1000);\n}\nexport function getDateFromUnixTimestamp(n: number): Date {\n  return new Date(n * 1000);\n}\n\n// checkBigIntInField checks if given *big.Int fits in a Field Q element\nexport function checkBigIntInField(a: bigint): boolean {\n  return a < Constants.Q;\n}\n\nexport function checkBigIntArrayInField(arr: bigint[]): boolean {\n  return arr.every((n) => checkBigIntInField(n));\n}\n\n// IdenState calculates the Identity State from the Claims Tree Root,\n// Revocation Tree Root and Roots Tree Root.\nexport function idenState(clr: bigint, rer: bigint, ror: bigint): bigint {\n  return poseidon.hash([clr, rer, ror]);\n}\n\nexport class StringUtils {\n  static isNotValidIDChar(char: string): boolean {\n    return (\n      StringUtils.isNotAlpha(char) && StringUtils.isNotDigit(char) && char !== '.' && char !== '-'\n    );\n  }\n\n  static isNotValidParamChar(char: string): boolean {\n    return (\n      StringUtils.isNotAlpha(char) &&\n      StringUtils.isNotDigit(char) &&\n      char !== '.' &&\n      char !== '-' &&\n      char !== '_' &&\n      char !== ':'\n    );\n  }\n\n  static isNotValidQueryOrFragmentChar(char: string): boolean {\n    return StringUtils.isNotValidPathChar(char) && char !== '/' && char !== '?';\n  }\n\n  static isNotValidPathChar(char: string): boolean {\n    return StringUtils.isNotUnreservedOrSubdelim(char) && char !== ':' && char !== '@';\n  }\n\n  static isNotUnreservedOrSubdelim(char: string): boolean {\n    switch (char) {\n      case '-':\n      case '.':\n      case '_':\n      case '~':\n      case '!':\n      case '$':\n      case '&':\n      case \"'\":\n      case '(':\n      case ')':\n      case '*':\n      case '+':\n      case ',':\n      case ';':\n      case '=':\n        return false;\n      default:\n        if (StringUtils.isNotAlpha(char) && StringUtils.isNotDigit(char)) {\n          return true;\n        }\n        return false;\n    }\n  }\n\n  static isNotHexDigit(char: string): boolean {\n    return (\n      StringUtils.isNotDigit(char) &&\n      (char < '\\x41' || char > '\\x46') &&\n      (char < '\\x61' || char > '\\x66')\n    );\n  }\n\n  static isNotDigit(char: string): boolean {\n    // '\\x30' is digit 0, '\\x39' is digit 9\n    return char < '\\x30' || char > '\\x39';\n  }\n\n  // StringUtils.isNotAlpha returns true if a byte is not a big letter between A-Z or small letter between a-z\n  // https://tools.ietf.org/html/rfc5234#appendix-B.1\n  static isNotAlpha(char: string): boolean {\n    return StringUtils.isNotSmallLetter(char) && StringUtils.isNotBigLetter(char);\n  }\n\n  // isNotBigLetter returns true if a byte is not a big letter between A-Z\n  // in US-ASCII http://www.columbia.edu/kermit/ascii.html\n  // https://tools.ietf.org/html/rfc5234#appendix-B.1\n  static isNotBigLetter(char: string): boolean {\n    // '\\x41' is big letter A, '\\x5A' small letter Z\n    return char < '\\x41' || char > '\\x5A';\n  }\n\n  // isNotSmallLetter returns true if a byte is not a small letter between a-z\n  // in US-ASCII http://www.columbia.edu/kermit/ascii.html\n  // https://tools.ietf.org/html/rfc5234#appendix-B.1\n  static isNotSmallLetter(char: string): boolean {\n    // '\\x61' is small letter a, '\\x7A' small letter z\n    return char < '\\x61' || char > '\\x7A';\n  }\n}\n\nexport const genesisFromEthAddress = (addr: Uint8Array) => {\n  return Uint8Array.from([...new Uint8Array(7), ...addr]);\n};\n","import { Constants } from './constants';\nimport { checkBigIntInField, fromLittleEndian, toLittleEndian, encoder } from './utils';\nimport { Hex, sha256 } from '@iden3/js-crypto';\nexport class BytesHelper {\n  static intToBytes(int: bigint): Uint8Array {\n    return BytesHelper.intToNBytes(int, Constants.BYTES_LENGTH);\n  }\n\n  static intToNBytes(int: bigint, n: number): Uint8Array {\n    return Uint8Array.from(toLittleEndian(int, n));\n  }\n\n  static checkChecksum(bytes: Uint8Array): boolean {\n    const { typ, genesis, checksum } = BytesHelper.decomposeBytes(bytes);\n    if (!checksum.length || JSON.stringify(Uint8Array.from([0, 0])) === JSON.stringify(checksum)) {\n      return false;\n    }\n\n    const c = BytesHelper.calculateChecksum(typ, genesis);\n    return JSON.stringify(c) === JSON.stringify(checksum);\n  }\n\n  static decomposeBytes(b: Uint8Array): {\n    typ: Uint8Array;\n    genesis: Uint8Array;\n    checksum: Uint8Array;\n  } {\n    const offset = 2;\n    const len = b.length - offset;\n    return {\n      typ: b.slice(0, offset),\n      genesis: b.slice(offset, len),\n      checksum: b.slice(-offset)\n    };\n  }\n\n  static calculateChecksum(typ: Uint8Array, genesis: Uint8Array): Uint8Array {\n    const toChecksum = [...typ, ...genesis];\n    const s: number = toChecksum.reduce((acc, cur) => acc + cur, 0);\n    const checksum = [s >> 8, s & 0xff];\n    return Uint8Array.from(checksum.reverse());\n  }\n\n  static hashBytes(str: string): Uint8Array {\n    const hash = sha256(encoder.encode(str));\n    return new Uint8Array(hash);\n  }\n\n  static hexToBytes(str: string): Uint8Array {\n    return Hex.decodeString(str);\n  }\n\n  static bytesToHex(bytes: Uint8Array) {\n    const hex: string[] = [];\n    for (let i = 0; i < bytes.length; i++) {\n      const current = bytes[i] < 0 ? bytes[i] + 256 : bytes[i];\n      hex.push((current >>> 4).toString(16));\n      hex.push((current & 0xf).toString(16));\n    }\n    return hex.join('');\n  }\n\n  static bytesToInt(bytes: Uint8Array): bigint {\n    return fromLittleEndian(bytes);\n  }\n}\n\nexport class ElemBytes {\n  private _bytes = new Uint8Array(Constants.BYTES_LENGTH);\n\n  constructor(bytes?: Uint8Array | null) {\n    if (bytes) {\n      this._bytes = bytes;\n    }\n    if (this._bytes.length !== Constants.BYTES_LENGTH) {\n      throw new Error('Invalid bytes length');\n    }\n  }\n\n  get bytes(): Uint8Array {\n    return this._bytes;\n  }\n\n  set bytes(value: Uint8Array) {\n    this._bytes = value;\n  }\n\n  toBigInt(): bigint {\n    return BytesHelper.bytesToInt(this._bytes);\n  }\n\n  setBigInt(n: bigint): ElemBytes {\n    if (!checkBigIntInField(n)) {\n      throw Constants.ERRORS.DATA_OVERFLOW;\n    }\n    this._bytes = BytesHelper.intToBytes(n);\n    return this;\n  }\n\n  slotFromHex(hex: string): ElemBytes {\n    const bytes = Hex.decodeString(hex);\n    if (bytes.length !== Constants.BYTES_LENGTH) {\n      throw new Error('Invalid bytes length');\n    }\n    this._bytes.set(bytes, 0);\n    return this;\n  }\n\n  hex(): string {\n    return Hex.encodeString(this._bytes);\n  }\n\n  // ElemBytesToInts converts slice of ElemBytes to slice of *big.Int\n  static elemBytesToInts(elements: ElemBytes[]): bigint[] {\n    const result: bigint[] = [];\n\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      result.push(element.toBigInt());\n    }\n\n    return result;\n  }\n\n  static fromInt(i: bigint): ElemBytes {\n    if (!checkBigIntInField(i)) {\n      throw Constants.ERRORS.DATA_OVERFLOW;\n    }\n    const bytes = BytesHelper.intToBytes(i);\n    return new ElemBytes(bytes);\n  }\n}\n","import { Hex } from '@iden3/js-crypto';\nimport { Constants } from './constants';\nimport { BytesHelper } from './elemBytes';\n\nexport class SchemaHash {\n  // authSchemaHash predefined value of auth schema, used for auth claim during identity creation.\n  // This schema is hardcoded in the identity circuits and used to verify user's auth claim.\n  // Keccak256(https://schema.iden3.io/core/jsonld/auth.jsonld#AuthBJJCredential) last 16 bytes\n  // Hex: cca3371a6cb1b715004407e325bd993c\n  // BigInt: 80551937543569765027552589160822318028\n  static readonly authSchemaHash = new SchemaHash(\n    Uint8Array.from([204, 163, 55, 26, 108, 177, 183, 21, 0, 68, 7, 227, 37, 189, 153, 60])\n  );\n\n  private _bytes: Uint8Array = new Uint8Array(Constants.SCHEMA.HASH_LENGTH);\n  /**\n   * Constructor\n   * @param bytes\n   */\n  constructor(bytes?: Uint8Array) {\n    if (bytes) {\n      this._bytes = bytes;\n    }\n    if (this.bytes.length !== Constants.SCHEMA.HASH_LENGTH) {\n      throw new Error(`Schema hash must be ${Constants.SCHEMA.HASH_LENGTH} bytes long`);\n    }\n  }\n\n  get bytes(): Uint8Array {\n    return this._bytes;\n  }\n\n  /**\n   * MarshalText returns HEX representation of SchemaHash.\n   * @returns {Uint8Array} 32 bytes//\n   */\n  marshalTextBytes(): Uint8Array {\n    return Hex.encode(this.bytes);\n  }\n\n  marshalText(): string {\n    return Hex.encodeString(this.bytes);\n  }\n\n  /**\n   * NewSchemaHashFromHex creates new SchemaHash from hex string\n   * @param s\n   * @returns {SchemaHash}\n   */\n  static newSchemaHashFromHex(s: string): SchemaHash {\n    const schemaEncodedBytes = Hex.decodeString(s);\n\n    if (schemaEncodedBytes.length !== Constants.SCHEMA.HASH_LENGTH) {\n      throw new Error(`invalid schema hash length: ${schemaEncodedBytes.length}`);\n    }\n\n    return new SchemaHash(schemaEncodedBytes);\n  }\n\n  /**\n   * NewSchemaHashFromInt creates new SchemaHash from big.Int\n   * @param i\n   * @returns\n   */\n  static newSchemaHashFromInt(i: bigint): SchemaHash {\n    const bytes = BytesHelper.intToNBytes(i, Constants.SCHEMA.HASH_LENGTH);\n    const start = Constants.SCHEMA.HASH_LENGTH - bytes.length;\n    return new SchemaHash(BytesHelper.intToBytes(i).slice(start, Constants.SCHEMA.HASH_LENGTH));\n  }\n\n  /**\n   * Convert SchemaHash to big.Int\n   * @returns {bigint}\n   */\n  bigInt(): bigint {\n    return BytesHelper.bytesToInt(this.bytes);\n  }\n}\n","import { Constants } from './constants';\nimport { fromLittleEndian } from './utils';\nimport { BytesHelper, ElemBytes } from './elemBytes';\nimport { poseidon, base58ToBytes, base58FromBytes } from '@iden3/js-crypto';\n\n// ID is a byte array with\n// [  type  | root_genesis | checksum ]\n// [2 bytes |   27 bytes   | 2 bytes  ]\n// where the root_genesis are the first 28 bytes from the hash root_genesis\n\nexport class Id {\n  private _bytes: Uint8Array;\n  private readonly _checksum: Uint8Array;\n\n  constructor(typ: Uint8Array, genesis: Uint8Array) {\n    this._checksum = BytesHelper.calculateChecksum(typ, genesis);\n    this._bytes = Uint8Array.from([...typ, ...genesis, ...this._checksum]);\n  }\n\n  private static getFromBytes(bytes: Uint8Array): Id {\n    const { typ, genesis }: { typ: Uint8Array; genesis: Uint8Array } =\n      BytesHelper.decomposeBytes(bytes);\n    return new Id(typ, genesis);\n  }\n\n  checksum(): Uint8Array {\n    return this._checksum;\n  }\n\n  string(): string {\n    return base58FromBytes(this._bytes);\n  }\n\n  get bytes(): Uint8Array {\n    return this._bytes;\n  }\n\n  set bytes(b: Uint8Array) {\n    this._bytes = b;\n  }\n\n  type(): Uint8Array {\n    return this._bytes.slice(0, 2);\n  }\n\n  bigInt(): bigint {\n    return fromLittleEndian(this._bytes);\n  }\n\n  equal(id: Id): boolean {\n    return JSON.stringify(this._bytes) === JSON.stringify(id.bytes);\n  }\n\n  marshal(): Uint8Array {\n    return new TextEncoder().encode(this.string());\n  }\n\n  static unMarshal(b: Uint8Array): Id {\n    return Id.fromString(new TextDecoder().decode(b));\n  }\n\n  static fromBytes(b: Uint8Array): Id {\n    const bytes = b ?? Uint8Array.from([]);\n    if (bytes.length !== Constants.ID.ID_LENGTH) {\n      throw new Error('fromBytes error: byte array incorrect length');\n    }\n\n    if (bytes.every((i: number) => i === 0)) {\n      throw new Error('fromBytes error: byte array empty');\n    }\n\n    const id = Id.getFromBytes(bytes);\n\n    if (!BytesHelper.checkChecksum(bytes)) {\n      throw new Error('fromBytes error: checksum error');\n    }\n\n    return id;\n  }\n\n  static fromString(s: string): Id {\n    const bytes = base58ToBytes(s);\n    return Id.fromBytes(bytes);\n  }\n\n  static fromBigInt(bigInt: bigint): Id {\n    const b = BytesHelper.intToNBytes(bigInt, Constants.ID.ID_LENGTH);\n    return Id.fromBytes(b);\n  }\n\n  static profileId(id: Id, nonce: bigint): Id {\n    const bigIntHash = poseidon.hash([id.bigInt(), nonce]);\n    const { typ } = BytesHelper.decomposeBytes(id.bytes);\n    const genesis = BytesHelper.intToNBytes(bigIntHash, 27);\n    return new Id(typ, genesis);\n  }\n\n  // IdGenesisFromIdenState calculates the genesis ID from an Identity State.\n  static idGenesisFromIdenState(\n    typ: Uint8Array, //nolint:revive\n    state: bigint\n  ): Id {\n    const idenStateData = ElemBytes.fromInt(state);\n\n    // we take last 27 bytes, because of swapped endianness\n    const idGenesisBytes = idenStateData.bytes.slice(idenStateData.bytes.length - 27);\n    return new Id(typ, idGenesisBytes);\n  }\n\n  static ethAddressFromId(id: Id): Uint8Array {\n    const isZeros = id.bytes.slice(2, 2 + 7).every((i: number) => i === 0);\n    if (!isZeros) {\n      throw new Error(\"can't get Ethereum address: high bytes of genesis are not zero\");\n    }\n    return id.bytes.slice(2 + 7).slice(0, Constants.ETH_ADDRESS_LENGTH);\n  }\n}\n","import { SchemaHash } from './schemaHash';\nimport { ElemBytes } from './elemBytes';\nimport { Constants } from './constants';\nimport { Id } from './id';\nimport {\n  checkBigIntArrayInField,\n  checkBigIntInField,\n  getDateFromUnixTimestamp,\n  getUint32,\n  getUint64,\n  getUnixTimestamp,\n  putUint32,\n  putUint64 as getBytesFromUint64\n} from './utils';\nimport { Hex, poseidon } from '@iden3/js-crypto';\n\n/*\nClaim structure\n\nIndex:\n i_0: [ 128  bits ] claim schema\n      [ 32 bits ] option flags\n          [3] Subject:\n            000: A.1 Self\n            001: invalid\n            010: A.2.i OtherIden Index\n            011: A.2.v OtherIden Value\n            100: B.i Object Index\n            101: B.v Object Value\n          [1] Expiration: bool\n          [1] Updatable: bool\n          [3] Merklized: data is merklized root is stored in the:\n            000: none\n            001: C.i Root Index (root located in i_2)\n            010: C.v Root Value (root located in v_2)\n          [24] 0\n      [ 32 bits ] version (optional?)\n      [ 61 bits ] 0 - reserved for future use\n i_1: [ 248 bits] identity (case b) (optional)\n      [  5 bits ] 0\n i_2: [ 253 bits] 0\n i_3: [ 253 bits] 0\nValue:\n v_0: [ 64 bits ]  revocation nonce\n      [ 64 bits ]  expiration date (optional)\n      [ 125 bits] 0 - reserved\n v_1: [ 248 bits] identity (case c) (optional)\n      [  5 bits ] 0\n v_2: [ 253 bits] 0\n v_3: [ 253 bits] 0\n*/\n\nexport enum SlotName {\n  IndexA = 'IndexA',\n  IndexB = 'IndexB',\n  ValueA = 'ValueA',\n  ValueB = 'ValueB'\n}\n\n// ErrSlotOverflow means some ElemBytes overflows Q Field. And wraps the name\n// of overflowed slot.\nexport class ErrSlotOverflow extends Error {\n  constructor(msg: string) {\n    super(`Slot ${msg} not in field (too large)`);\n    Object.setPrototypeOf(this, ErrSlotOverflow.prototype);\n  }\n}\n\n// subjectFlag for the time being describes the location of Id (in index or value\n// slots or nowhere at all).\n//\n// Values subjectFlagInvalid presents for backward compatibility and for now means nothing.\n\nexport enum SubjectFlag {\n  Self = 0b0,\n  Invalid = 0b1,\n  OtherIdenIndex = 0b10,\n  OtherIdenValue = 0b11\n}\n\nexport enum IdPosition {\n  None = 0,\n  Index = 1,\n  Value = 2\n}\n\n// merklizedFlag for the time being describes the location of root (in index or value\n// slots or nowhere at all).\n//\n// Values merklizedFlagIndex indicates that root is located in index[2] slots.\n// Values merklizedFlagValue indicates that root is located in value[2] slots.\nexport enum MerklizedFlag {\n  None = 0b00000000,\n  Index = 0b00100000,\n  Value = 0b01000000,\n  Invalid = 0b10000000\n}\n\nexport enum MerklizedRootPosition {\n  None = 0,\n  Index = 1,\n  Value = 2\n}\n\nexport enum Flags {\n  ByteIdx = 16,\n  ExpirationBitIdx = 3,\n  UpdatableBitIdx = 4\n}\n\nexport class Claim {\n  private _index: ElemBytes[] = [];\n  private _value: ElemBytes[] = [];\n\n  constructor() {\n    for (let i = 0; i < Constants.ELEM_BYTES_LENGTH; i++) {\n      this._index[i] = new ElemBytes();\n      this._value[i] = new ElemBytes();\n    }\n  }\n\n  // NewClaim creates new Claim with specified SchemaHash and any number of\n  // options. Using options you can specify any field in claim.\n  static newClaim(sh: SchemaHash, ...args: ClaimOption[]): Claim {\n    const c = new Claim();\n    c.setSchemaHash(sh);\n    for (let i = 0; i < args.length; i++) {\n      const fn = args[i];\n      fn(c);\n    }\n    return c;\n  }\n\n  // GetSchemaHash return copy of claim's schema hash.\n  getSchemaHash(): SchemaHash {\n    return new SchemaHash(this._index[0].bytes.slice(0, Constants.SCHEMA.HASH_LENGTH));\n  }\n\n  get value(): ElemBytes[] {\n    return this._value;\n  }\n\n  set value(value: ElemBytes[]) {\n    this._value = value;\n  }\n\n  get index(): ElemBytes[] {\n    return this._index;\n  }\n\n  set index(value: ElemBytes[]) {\n    this._index = value;\n  }\n\n  // SetSchemaHash updates claim's schema hash.\n  setSchemaHash(sh: SchemaHash) {\n    this._index[0] = new ElemBytes(\n      Uint8Array.from([...sh.bytes, ...new Array(Constants.SCHEMA.HASH_LENGTH).fill(0)])\n    );\n  }\n\n  setSubject(s: SubjectFlag) {\n    // clean first 3 bits\n    this._index[0].bytes[Flags.ByteIdx] &= 0b11111000;\n    this._index[0].bytes[Flags.ByteIdx] |= s;\n  }\n\n  private getSubject(): SubjectFlag {\n    let sbj = this._index[0].bytes[Flags.ByteIdx];\n    // clean all except first 3 bits\n    sbj &= 0b00000111;\n    return sbj as SubjectFlag;\n  }\n\n  private setFlagExpiration(val: boolean) {\n    if (val) {\n      this._index[0].bytes[Flags.ByteIdx] |= 0b1 << Flags.ExpirationBitIdx;\n    } else {\n      this._index[0].bytes[Flags.ByteIdx] &= ~(0b1 << Flags.ExpirationBitIdx);\n    }\n  }\n\n  private getFlagExpiration(): boolean {\n    const mask = 0b1 << Flags.ExpirationBitIdx;\n    return (this._index[0].bytes[Flags.ByteIdx] & mask) > 0;\n  }\n\n  // GetIDPosition returns the position at which the Id is stored.\n  getIdPosition(): IdPosition {\n    switch (this.getSubject()) {\n      case SubjectFlag.Self:\n        return IdPosition.None;\n      case SubjectFlag.OtherIdenIndex:\n        return IdPosition.Index;\n      case SubjectFlag.OtherIdenValue:\n        return IdPosition.Value;\n      default:\n        throw Constants.ERRORS.INVALID_SUBJECT_POSITION;\n    }\n  }\n\n  // SetValueDataInts sets data to value slots A & B.\n  // Returns ErrSlotOverflow if slotA or slotB value are too big.\n  setValueDataInts(slotA: bigint | null, slotB: bigint | null): void {\n    this._value[2] = this.setSlotInt(slotA, SlotName.ValueA);\n    this._value[3] = this.setSlotInt(slotB, SlotName.ValueB);\n  }\n  // SetValueDataBytes sets data to value slots A & B.\n  // Returns ErrSlotOverflow if slotA or slotB value are too big.\n  setValueDataBytes(slotA: Uint8Array, slotB: Uint8Array): void {\n    this._value[2] = this.setSlotBytes(slotA, SlotName.ValueA);\n    this._value[3] = this.setSlotBytes(slotB, SlotName.ValueB);\n  }\n  // SetValueData sets data to value slots A & B.\n  // Returns ErrSlotOverflow if slotA or slotB value are too big.\n  setValueData(slotA: ElemBytes, slotB: ElemBytes): void {\n    const slotsAsInts: bigint[] = [slotA.toBigInt(), slotB.toBigInt()];\n    if (!checkBigIntArrayInField(slotsAsInts)) {\n      throw Constants.ERRORS.DATA_OVERFLOW;\n    }\n    this._value[2] = slotA;\n    this._value[3] = slotB;\n  }\n  // SetIndexDataInts sets data to index slots A & B.\n  // Returns ErrSlotOverflow if slotA or slotB value are too big.\n  setIndexDataInts(slotA: bigint | null, slotB: bigint | null): void {\n    this._index[2] = this.setSlotInt(slotA, SlotName.IndexA);\n    this._index[3] = this.setSlotInt(slotB, SlotName.IndexB);\n  }\n  // SetIndexDataBytes sets data to index slots A & B.\n  // Returns ErrSlotOverflow if slotA or slotB value are too big.\n  setIndexDataBytes(slotA: Uint8Array | null, slotB: Uint8Array | null): void {\n    this._index[2] = this.setSlotBytes(slotA, SlotName.IndexA);\n    this._index[3] = this.setSlotBytes(slotB, SlotName.IndexB);\n  }\n\n  private setSlotBytes(value: Uint8Array | null, slotName: SlotName): ElemBytes {\n    const slot = new ElemBytes(value);\n    if (!checkBigIntInField(slot.toBigInt())) {\n      throw new ErrSlotOverflow(slotName);\n    }\n    return slot;\n  }\n\n  setFlagMerklized(s: MerklizedRootPosition): void {\n    let f: number;\n    switch (s) {\n      case MerklizedRootPosition.Index:\n        f = MerklizedFlag.Index;\n        break;\n      case MerklizedRootPosition.Value:\n        f = MerklizedFlag.Value;\n        break;\n      default:\n        f = MerklizedFlag.None;\n    }\n    // clean last 3 bits\n    this.index[0].bytes[Flags.ByteIdx] &= 0b00011111;\n    this.index[0].bytes[Flags.ByteIdx] |= f;\n  }\n\n  private getMerklized(): MerklizedFlag {\n    let mt = this.index[0].bytes[Flags.ByteIdx];\n    // clean all except last 3 bits\n    mt &= 0b11100000;\n    return mt as MerklizedFlag;\n  }\n\n  // GetMerklizedPosition returns the position at which the Merklized flag is stored.\n  getMerklizedPosition(): MerklizedRootPosition {\n    switch (this.getMerklized()) {\n      case MerklizedFlag.None:\n        return MerklizedRootPosition.None;\n      case MerklizedFlag.Index:\n        return MerklizedRootPosition.Index;\n      case MerklizedFlag.Value:\n        return MerklizedRootPosition.Value;\n      default:\n        throw Constants.ERRORS.INCORRECT_MERKLIZED_POSITION;\n    }\n  }\n\n  public setSlotInt(value: bigint | null, slotName: SlotName): ElemBytes {\n    if (!value) {\n      value = BigInt(0);\n    }\n    if (!checkBigIntInField(value)) {\n      throw new ErrSlotOverflow(slotName);\n    }\n    return new ElemBytes().setBigInt(value);\n  }\n  // SetIndexData sets data to index slots A & B.\n  // Returns ErrSlotOverflow if slotA or slotB value are too big.\n  setIndexData(slotA: ElemBytes, slotB: ElemBytes) {\n    const slotsAsInts: bigint[] = [slotA.toBigInt(), slotB.toBigInt()];\n    if (!checkBigIntArrayInField(slotsAsInts)) {\n      throw Constants.ERRORS.DATA_OVERFLOW;\n    }\n    this._index[2] = slotA;\n    this._index[3] = slotB;\n  }\n\n  resetExpirationDate(): void {\n    this.setFlagExpiration(false);\n    const bytes = Array.from({ length: Constants.NONCE_BYTES_LENGTH }, () => 0);\n    const arr = Array.from(this._value[0].bytes);\n    arr.splice(Constants.NONCE_BYTES_LENGTH, Constants.NONCE_BYTES_LENGTH, ...bytes);\n    this._value[0] = new ElemBytes(Uint8Array.from(arr));\n  }\n\n  // GetExpirationDate returns expiration date and flag. Flag is true if\n  // expiration date is present, false if null.\n  getExpirationDate(): Date | null {\n    if (this.getFlagExpiration()) {\n      const unixTimestamp = getUint64(this._value[0].bytes.slice(8, 16));\n      return getDateFromUnixTimestamp(Number(unixTimestamp));\n    }\n    return null;\n  }\n\n  // SetExpirationDate sets expiration date to dt\n  setExpirationDate(dt: Date) {\n    this.setFlagExpiration(true);\n    const bytes = getBytesFromUint64(BigInt(getUnixTimestamp(dt)));\n    const arr = Array.from(this._value[0].bytes);\n    arr.splice(Constants.NONCE_BYTES_LENGTH, Constants.NONCE_BYTES_LENGTH, ...bytes);\n    this._value[0] = new ElemBytes(Uint8Array.from(arr));\n  }\n\n  // GetRevocationNonce returns revocation nonce\n  getRevocationNonce(): bigint {\n    return getUint64(this._value[0].bytes.slice(0, 8));\n  }\n  // SetRevocationNonce sets claim's revocation nonce\n  setRevocationNonce(nonce: bigint): void {\n    const bytes = getBytesFromUint64(nonce);\n    if (bytes.length > Constants.NONCE_BYTES_LENGTH) {\n      throw new Error('Nonce length is not valid');\n    }\n    const arr = Array.from(this._value[0].bytes);\n    arr.splice(0, Constants.NONCE_BYTES_LENGTH, ...bytes);\n    this._value[0] = new ElemBytes(Uint8Array.from(arr));\n  }\n\n  getValueId(): Id {\n    return Id.fromBytes(this._value[1].bytes.slice(0, -1));\n  }\n\n  // SetValueId sets id to value. Removes id from index if any.\n  setValueId(id: Id): void {\n    this.resetIndexId();\n    this.setSubject(SubjectFlag.OtherIdenValue);\n    const arr = Array.from(this._index[1].bytes);\n    arr.splice(0, id.bytes.length, ...id.bytes);\n    this._value[1] = new ElemBytes(Uint8Array.from(arr));\n  }\n\n  private resetIndexId() {\n    this._index[1] = new ElemBytes(new Uint8Array(Constants.BYTES_LENGTH).fill(0));\n  }\n\n  private resetValueId(): void {\n    this._value[1] = new ElemBytes(new Uint8Array(Constants.BYTES_LENGTH).fill(0));\n  }\n\n  getIndexId(): Id {\n    return Id.fromBytes(this._index[1].bytes.slice(0, -1));\n  }\n\n  // SetIndexId sets id to index. Removes id from value if any.\n  setIndexId(id: Id): void {\n    this.resetValueId();\n    this.setSubject(SubjectFlag.OtherIdenIndex);\n    const arr = Array.from(this._index[1].bytes);\n    arr.splice(0, id.bytes.length, ...id.bytes);\n    this._index[1] = new ElemBytes(Uint8Array.from(arr));\n  }\n  // SetVersion sets claim's version\n  setVersion(ver: number) {\n    const bytes = putUint32(ver);\n    this._index[0].bytes[20] = bytes[0];\n    this._index[0].bytes[21] = bytes[1];\n    this._index[0].bytes[22] = bytes[2];\n    this._index[0].bytes[23] = bytes[3];\n  }\n  // GetVersion returns claim's version\n  getVersion(): number {\n    return getUint32(this._index[0].bytes.slice(20, 24));\n  }\n  // SetFlagUpdatable sets claim's flag `updatable`\n  setFlagUpdatable(val: boolean) {\n    if (val) {\n      this._index[0].bytes[Flags.ByteIdx] |= 0b1 << Flags.UpdatableBitIdx;\n    } else {\n      this._index[0].bytes[Flags.ByteIdx] &= ~(0b1 << Flags.UpdatableBitIdx);\n    }\n  }\n\n  // HIndex calculates the hash of the Index of the Claim\n  hIndex(): bigint {\n    return poseidon.hash(ElemBytes.elemBytesToInts(this._index));\n  }\n\n  // GetFlagUpdatable returns claim's flag `updatable`\n  getFlagUpdatable(): boolean {\n    const mask = 0b1 << Flags.UpdatableBitIdx;\n    return (this._index[0].bytes[Flags.ByteIdx] & mask) > 0;\n  }\n\n  // HValue calculates the hash of the Value of the Claim\n  hValue(): bigint {\n    return poseidon.hash(ElemBytes.elemBytesToInts(this._value));\n  }\n\n  // HiHv returns the HIndex and HValue of the Claim\n  hiHv(): { hi: bigint; hv: bigint } {\n    return { hi: this.hIndex(), hv: this.hValue() };\n  }\n\n  // SetIndexMerklizedRoot sets merklized root to index. Removes root from value[2] if any.\n  setIndexMerklizedRoot(r: bigint): void {\n    this.resetValueMerklizedRoot();\n    this.setFlagMerklized(MerklizedRootPosition.Index);\n    this.index[2] = this.setSlotInt(r, SlotName.IndexA);\n  }\n\n  resetIndexMerklizedRoot() {\n    this._index[2] = new ElemBytes(new Uint8Array(Constants.BYTES_LENGTH).fill(0));\n  }\n\n  // SetValueMerklizedRoot sets merklized root to value. Removes root from index[2] if any.\n  setValueMerklizedRoot(r: bigint): void {\n    this.resetIndexMerklizedRoot();\n    this.setFlagMerklized(MerklizedRootPosition.Value);\n    this.value[2] = this.setSlotInt(r, SlotName.ValueA);\n  }\n  resetValueMerklizedRoot() {\n    this._value[2] = new ElemBytes(new Uint8Array(Constants.BYTES_LENGTH).fill(0));\n  }\n\n  // GetMerklizedRoot returns merklized root from claim's index of value.\n  // Returns error ErrNoMerklizedRoot if MerklizedRoot is not set.\n  getMerklizedRoot(): bigint {\n    switch (this.getMerklized()) {\n      case MerklizedFlag.Index:\n        return this.index[2].toBigInt();\n      case MerklizedFlag.Value:\n        return this.value[2].toBigInt();\n      default:\n        throw Constants.ERRORS.NO_MERKLIZED_ROOT;\n    }\n  }\n\n  // resetId deletes Id from index and from value.\n  resetId(): void {\n    this.resetIndexId();\n    this.resetValueId();\n    this.setSubject(SubjectFlag.Self);\n  }\n  // GetId returns Id from claim's index of value.\n  // Returns error ErrNoId if Id is not set.\n  getId(): Id {\n    switch (this.getSubject()) {\n      case SubjectFlag.OtherIdenIndex:\n        return this.getIndexId();\n      case SubjectFlag.OtherIdenValue:\n        return this.getValueId();\n      default:\n        throw Constants.ERRORS.NO_ID;\n    }\n  }\n  // RawSlots returns raw bytes of claim's index and value\n  rawSlots(): { index: ElemBytes[]; value: ElemBytes[] } {\n    return {\n      index: this._index,\n      value: this._value\n    };\n  }\n  // RawSlotsAsInts returns slots as []bigint\n  rawSlotsAsInts(): bigint[] {\n    return [...ElemBytes.elemBytesToInts(this._index), ...ElemBytes.elemBytesToInts(this._value)];\n  }\n\n  clone(): Claim {\n    return JSON.parse(JSON.stringify(this));\n  }\n\n  marshalJson(): string[] {\n    return this.rawSlotsAsInts().map((b) => b.toString());\n  }\n\n  unMarshalJson(b: string): Claim {\n    const ints: bigint[] = JSON.parse(b).map((s: string) => BigInt(s));\n\n    if (ints.length !== this._index.length + this._value.length) {\n      throw new Error(\"invalid number of claim's slots\");\n    }\n    this._index = [];\n    this._value = [];\n    for (let i = 0, j = Constants.ELEM_BYTES_LENGTH; i < ints.length / 2; i++, j++) {\n      this._index[i] = new ElemBytes();\n      this._index[i].setBigInt(ints[i]);\n      this._value[i] = new ElemBytes();\n      this._value[i].setBigInt(ints[j]);\n    }\n    return this;\n  }\n\n  marshalBinary(): Uint8Array {\n    const getBytes = (src: ElemBytes[]) =>\n      src.reduce((acc: number[], cur: ElemBytes) => {\n        return [...acc, ...cur.bytes];\n      }, []);\n    return Uint8Array.from(getBytes(this._index).concat(getBytes(this._value)));\n  }\n\n  // Hex returns hex representation of binary claim\n  hex(): string {\n    const b = this.marshalBinary();\n    return Hex.encodeString(b);\n  }\n\n  fromHex(hex: string): Claim {\n    const b = Hex.decodeString(hex);\n    this.unMarshalBinary(b);\n    return this;\n  }\n\n  unMarshalBinary(data: Uint8Array): void {\n    const wantLen = 2 * Constants.ELEM_BYTES_LENGTH * Constants.BYTES_LENGTH;\n    if (data.length !== wantLen) {\n      throw new Error('unexpected length of input data');\n    }\n    this._index = [];\n    this._value = [];\n    for (let i = 0, j = Constants.ELEM_BYTES_LENGTH; i < Constants.ELEM_BYTES_LENGTH; i++, j++) {\n      this._index[i] = new ElemBytes(\n        data.slice(i * Constants.BYTES_LENGTH, (i + 1) * Constants.BYTES_LENGTH)\n      );\n      this._value[i] = new ElemBytes(\n        data.slice(j * Constants.BYTES_LENGTH, (j + 1) * Constants.BYTES_LENGTH)\n      );\n    }\n  }\n}\n\n// Option provides the ability to set different Claim's fields on construction\nexport type ClaimOption = (c: Claim) => void;\nexport class ClaimOptions {\n  // WithFlagUpdatable sets claim's flag `updatable`\n  static withFlagUpdatable(val: boolean): ClaimOption {\n    return (c: Claim) => c.setFlagUpdatable(val);\n  }\n\n  // WithVersion sets claim's version\n  static withVersion(ver: number): ClaimOption {\n    return (c: Claim) => c.setVersion(ver);\n  }\n\n  // WithIndexId sets Id to claim's index\n  static withIndexId(id: Id): ClaimOption {\n    return (c: Claim) => c.setIndexId(id);\n  }\n\n  // WithValueId sets Id to claim's value\n  static withValueId(id: Id): ClaimOption {\n    return (c: Claim) => c.setValueId(id);\n  }\n\n  // WithFlagMerklized sets claim's flag `merklized`\n  static withFlagMerklized(p: MerklizedRootPosition): ClaimOption {\n    return (c: Claim) => c.setFlagMerklized(p);\n  }\n\n  // WithId sets Id to claim's index or value depending on `pos`.\n  static withId(id: Id, pos: IdPosition): ClaimOption {\n    return (c: Claim) => {\n      switch (pos) {\n        case IdPosition.Index:\n          c.setIndexId(id);\n          break;\n        case IdPosition.Value:\n          c.setValueId(id);\n          break;\n        default:\n          throw Constants.ERRORS.INCORRECT_ID_POSITION;\n      }\n    };\n  }\n\n  // WithRevocationNonce sets claim's revocation nonce.\n  static withRevocationNonce(nonce: bigint): ClaimOption {\n    return (c: Claim) => c.setRevocationNonce(nonce);\n  }\n\n  // WithExpirationDate sets claim's expiration date to `dt`.\n  static withExpirationDate(dt: Date): ClaimOption {\n    return (c: Claim) => c.setExpirationDate(dt);\n  }\n\n  // WithIndexData sets data to index slots A & B.\n  // Returns ErrSlotOverflow if slotA or slotB value are too big.\n  static withIndexData(slotA: ElemBytes, slotB: ElemBytes): ClaimOption {\n    return (c: Claim) => c.setIndexData(slotA, slotB);\n  }\n\n  // WithIndexDataBytes sets data to index slots A & B.\n  // Returns ErrSlotOverflow if slotA or slotB value are too big.\n  static withIndexDataBytes(slotA: Uint8Array | null, slotB: Uint8Array | null): ClaimOption {\n    return (c: Claim) => c.setIndexDataBytes(slotA, slotB);\n  }\n\n  // WithIndexDataInts sets data to index slots A & B.\n  // Returns ErrSlotOverflow if slotA or slotB value are too big.\n  static withIndexDataInts(slotA: bigint | null, slotB: bigint | null): ClaimOption {\n    return (c: Claim) => c.setIndexDataInts(slotA, slotB);\n  }\n\n  // WithValueData sets data to value slots A & B.\n  // Returns ErrSlotOverflow if slotA or slotB value are too big.\n  static withValueData(slotA: ElemBytes, slotB: ElemBytes): ClaimOption {\n    return (c: Claim) => c.setValueData(slotA, slotB);\n  }\n\n  // WithValueDataBytes sets data to value slots A & B.\n  // Returns ErrSlotOverflow if slotA or slotB value are too big.\n  static withValueDataBytes(slotA: Uint8Array, slotB: Uint8Array): ClaimOption {\n    return (c: Claim) => c.setValueDataBytes(slotA, slotB);\n  }\n\n  // WithValueDataInts sets data to value slots A & B.\n  // Returns ErrSlotOverflow if slotA or slotB value are too big.\n  static withValueDataInts(slotA: bigint | null, slotB: bigint | null): ClaimOption {\n    return (c: Claim) => c.setValueDataInts(slotA, slotB);\n  }\n\n  // WithIndexMerklizedRoot sets root to index i_2\n  // Returns ErrSlotOverflow if root value are too big.\n  static withIndexMerklizedRoot(r: bigint): ClaimOption {\n    return (c: Claim) => {\n      c.setFlagMerklized(MerklizedRootPosition.Index);\n      c.index[2] = c.setSlotInt(r, SlotName.IndexA);\n    };\n  }\n\n  // WithValueMerklizedRoot sets root to value v_2\n  // Returns ErrSlotOverflow if root value are too big.\n  static withValueMerklizedRoot(r: bigint): ClaimOption {\n    return (c: Claim) => {\n      c.setFlagMerklized(MerklizedRootPosition.Value);\n      c.value[2] = c.setSlotInt(r, SlotName.ValueA);\n    };\n  }\n\n  // WithMerklizedRoot sets root to value v_2 or index i_2\n  // Returns ErrSlotOverflow if root value are too big.\n  static withMerklizedRoot(r: bigint, pos: MerklizedRootPosition): ClaimOption {\n    return (c: Claim) => {\n      switch (pos) {\n        case MerklizedRootPosition.Index:\n          c.setFlagMerklized(MerklizedRootPosition.Index);\n          c.index[2] = c.setSlotInt(r, SlotName.IndexA);\n          break;\n        case MerklizedRootPosition.Value:\n          c.setFlagMerklized(MerklizedRootPosition.Value);\n          c.value[2] = c.setSlotInt(r, SlotName.ValueA);\n          break;\n        default:\n          throw Constants.ERRORS.INCORRECT_MERKLIZED_POSITION;\n      }\n    };\n  }\n}\n","import { Constants, DidMethodByte, DidMethodNetwork } from '../constants';\n\n// DIDNetworkFlag is a structure to represent DID blockchain and network id\nexport class DIDNetworkFlag {\n  constructor(public readonly blockchain: string, public readonly networkId: string) {}\n\n  toString(): string {\n    return `${this.blockchain}:${this.networkId}`;\n  }\n\n  static fromString(s: string): DIDNetworkFlag {\n    const [blockchain, networkId] = s.split(':');\n    return new DIDNetworkFlag(blockchain.replace('_', ''), networkId.replace('_', ''));\n  }\n}\n\n// BuildDIDType builds bytes type from chain and network\nexport function buildDIDType(method: string, blockchain: string, network: string): Uint8Array {\n  const fb = DidMethodByte[method];\n  if (!fb) {\n    throw Constants.ERRORS.UNSUPPORTED_DID_METHOD;\n  }\n  const methodFn = DidMethodNetwork[method];\n  if (!methodFn) {\n    throw Constants.ERRORS.NETWORK_NOT_SUPPORTED_FOR_DID;\n  }\n\n  const sb: number | undefined = methodFn[new DIDNetworkFlag(blockchain, network).toString()];\n\n  if (typeof sb !== 'number') {\n    throw new Error(\n      `blockchain ${blockchain.toString() ?? '-'} and network ${\n        network.toString() ?? '-'\n      } is not defined in core lib`\n    );\n  }\n\n  return Uint8Array.from([fb, sb]);\n}\n\n// FindNetworkIDForDIDMethodByValue finds network by byte value\nexport function findNetworkIDForDIDMethodByValue(method: string, byteNumber: number): string {\n  const methodMap = DidMethodNetwork[method];\n  if (!methodMap) {\n    throw Constants.ERRORS.UNSUPPORTED_DID_METHOD;\n  }\n  for (const [key, value] of Object.entries(methodMap)) {\n    if (value === byteNumber) {\n      return DIDNetworkFlag.fromString(key).networkId;\n    }\n  }\n  throw Constants.ERRORS.NETWORK_NOT_SUPPORTED_FOR_DID;\n}\n\n// findBlockchainForDIDMethodByValue finds blockchain type by byte value\nexport function findBlockchainForDIDMethodByValue(method: string, byteNumber: number): string {\n  const methodMap = DidMethodNetwork[method];\n  if (!methodMap) {\n    throw new Error(\n      `${Constants.ERRORS.NETWORK_NOT_SUPPORTED_FOR_DID}: did method ${method} is not defined in core lib`\n    );\n  }\n  for (const [key, value] of Object.entries(methodMap)) {\n    if (value === byteNumber) {\n      return DIDNetworkFlag.fromString(key).blockchain;\n    }\n  }\n  throw Constants.ERRORS.UNSUPPORTED_BLOCKCHAIN_FOR_DID;\n}\n\n// findDIDMethodByValue finds did method by its byte value\nexport function findDIDMethodByValue(byteNumber: number): string {\n  for (const [key, value] of Object.entries(DidMethodByte)) {\n    if (value === byteNumber) {\n      return key;\n    }\n  }\n  throw Constants.ERRORS.UNSUPPORTED_DID_METHOD;\n}\n","export class Param {\n  constructor(public name: string, public value: string) {}\n\n  toString(): string {\n    if (!this.name) {\n      return '';\n    }\n    if (!this.value) {\n      return this.name;\n    }\n    return `${this.name}=${this.value}`;\n  }\n}\n\nexport interface IDID {\n  method: string;\n  id: string;\n  idStrings: string[];\n  params: Param[];\n  path: string;\n  pathSegments: string[];\n  query: string;\n  fragment: string;\n}\n\nexport const initDIDParams: IDID = Object.freeze({\n  method: '',\n  id: '',\n  idStrings: [],\n  params: [],\n  path: '',\n  pathSegments: [],\n  query: '',\n  fragment: ''\n});\n","import { IDID, Param, initDIDParams } from './types';\nimport { StringUtils } from '../utils';\n\n// a step in the parser state machine that returns the next step\ntype ParserStep = () => ParserStep | null;\n\nexport class Parser {\n  currentIndex = 0; // index in the input which the parser is currently processing:\n  out: IDID = { ...initDIDParams }; // the output DID that the parser will assemble as it steps through its state machine  // an error in the parser state machine\n\n  constructor(private readonly input: string) {}\n\n  checkLength(): ParserStep | null {\n    const inputLength = this.input.length;\n\n    if (inputLength < 7) {\n      throw new Error('input length is less than 7');\n    }\n\n    return this.parseScheme.bind(this);\n  }\n\n  // parseScheme is a parserStep that validates that the input begins with 'did:'\n  parseScheme(): ParserStep | null {\n    const currentIndex = 3; // 4 bytes in 'did:', i.e index 3\n    // the grammar requires `did:` prefix\n    if (this.input.slice(0, currentIndex + 1) !== 'did:') {\n      throw new Error(\"input does not begin with 'did:' prefix\");\n    }\n\n    this.currentIndex = currentIndex;\n    return this.parseMethod.bind(this);\n  }\n\n  parseMethod(): ParserStep | null {\n    const input = this.input;\n    const inputLength = input.length;\n    let currentIndex = this.currentIndex + 1;\n    const startIndex = currentIndex;\n\n    for (;;) {\n      if (currentIndex === inputLength) {\n        // we got to the end of the input and didn't find a second ':'\n        throw new Error('input does not have a second `:` marking end of method name');\n      }\n\n      // read the input character at currentIndex\n      const char = input[currentIndex];\n\n      if (char === ':') {\n        // we've found the second : in the input that marks the end of the method\n        if (currentIndex === startIndex) {\n          // return error is method is empty, ex- did::1234\n          throw new Error(`method is empty, ${currentIndex}`);\n        }\n        break;\n      }\n\n      // as per the grammar method can only be made of digits 0-9 or small letters a-z\n      if (StringUtils.isNotDigit(char) && StringUtils.isNotSmallLetter(char)) {\n        throw new Error(`\"character is not a-z OR 0-9, ${currentIndex}`);\n      }\n\n      // move to the next char\n      currentIndex = currentIndex + 1;\n    }\n\n    // set parser state\n    this.currentIndex = currentIndex;\n    this.out.method = input.slice(startIndex, currentIndex);\n\n    // method is followed by specific-idstring, parse that next\n    return this.parseId.bind(this);\n  }\n\n  parseId(): ParserStep | null {\n    const input = this.input;\n    const inputLength = input.length;\n    let currentIndex = this.currentIndex + 1;\n    const startIndex = currentIndex;\n\n    let next: ParserStep | null = null;\n\n    for (;;) {\n      if (currentIndex === inputLength) {\n        // we've reached end of input, no next state\n        next = null;\n        break;\n      }\n\n      const char = input[currentIndex];\n\n      if (char === ':') {\n        // encountered : input may have another idstring, parse ID again\n        next = this.parseId;\n        break;\n      }\n\n      if (char === ';') {\n        // encountered ; input may have a parameter, parse that next\n        next = this.parseParamName;\n        break;\n      }\n\n      if (char === '/') {\n        // encountered / input may have a path following specific-idstring, parse that next\n        next = this.parsePath;\n        break;\n      }\n\n      if (char === '?') {\n        // encountered ? input may have a query following specific-idstring, parse that next\n        next = this.parseQuery;\n        break;\n      }\n\n      if (char === '#') {\n        // encountered # input may have a fragment following specific-idstring, parse that next\n        next = this.parseFragment;\n        break;\n      }\n\n      // make sure current char is a valid idchar\n      // idchar = ALPHA / DIGIT / \".\" / \"-\"\n      if (StringUtils.isNotValidIDChar(char)) {\n        throw new Error(`byte is not ALPHA OR DIGIT OR '.' OR '-', ${currentIndex}`);\n      }\n\n      // move to the next char\n      currentIndex = currentIndex + 1;\n    }\n\n    if (currentIndex === startIndex) {\n      // idstring length is zero\n      // from the grammar:\n      //   idstring = 1*idchar\n      // return error because idstring is empty, ex- did:a::123:456\n      throw new Error(`idstring must be at least one char long, ${currentIndex}`);\n    }\n\n    // set parser state\n    this.currentIndex = currentIndex;\n    this.out.idStrings = [...this.out.idStrings, input.slice(startIndex, currentIndex)];\n\n    // return the next parser step\n    return next ? next.bind(this) : null;\n  }\n\n  parseParamName(): ParserStep | null {\n    const input = this.input;\n    const startIndex = this.currentIndex + 1;\n    const next = this.paramTransition();\n    const currentIndex = this.currentIndex;\n\n    if (currentIndex === startIndex) {\n      throw new Error(`Param name must be at least one char long, ${currentIndex}`);\n    }\n\n    // Create a new param with the name\n    this.out.params = [...this.out.params, new Param(input.slice(startIndex, currentIndex), '')];\n\n    // return the next parser step\n    return next ? next.bind(this) : null;\n  }\n\n  parseParamValue(): ParserStep | null {\n    const input = this.input;\n    const startIndex = this.currentIndex + 1;\n    const next = this.paramTransition();\n    const currentIndex = this.currentIndex;\n    this.out.params[this.out.params.length - 1].value = input.slice(startIndex, currentIndex);\n    return next ? next.bind(this) : null;\n  }\n\n  paramTransition(): ParserStep | null {\n    const input = this.input;\n    const inputLength = input.length;\n    let currentIndex = this.currentIndex + 1;\n\n    let indexIncrement: number;\n    let next: ParserStep | null;\n    let percentEncoded: boolean;\n\n    for (;;) {\n      if (currentIndex === inputLength) {\n        // we've reached end of input, no next state\n        next = null;\n        break;\n      }\n\n      const char = input[currentIndex];\n\n      if (char === ';') {\n        // encountered : input may have another param, parse paramName again\n        next = this.parseParamName;\n        break;\n      }\n\n      // Separate steps for name and value?\n      if (char === '=') {\n        // parse param value\n        next = this.parseParamValue;\n        break;\n      }\n\n      if (char === '/') {\n        // encountered / input may have a path following current param, parse that next\n        next = this.parsePath;\n        break;\n      }\n\n      if (char === '?') {\n        // encountered ? input may have a query following current param, parse that next\n        next = this.parseQuery;\n        break;\n      }\n\n      if (char == '#') {\n        // encountered # input may have a fragment following current param, parse that next\n        next = this.parseFragment;\n        break;\n      }\n\n      if (char == '%') {\n        // a % must be followed by 2 hex digits\n        if (\n          currentIndex + 2 >= inputLength ||\n          StringUtils.isNotHexDigit(input[currentIndex + 1]) ||\n          StringUtils.isNotHexDigit(input[currentIndex + 2])\n        ) {\n          throw new Error(`% is not followed by 2 hex digits', ${currentIndex}`);\n        }\n        // if we got here, we're dealing with percent encoded char, jump three chars\n        percentEncoded = true;\n        indexIncrement = 3;\n      } else {\n        // not percent encoded\n        percentEncoded = false;\n        indexIncrement = 1;\n      }\n\n      // make sure current char is a valid param-char\n      // idchar = ALPHA / DIGIT / \".\" / \"-\"\n      if (!percentEncoded && StringUtils.isNotValidParamChar(char)) {\n        throw new Error(`character is not allowed in param - ${char}',  ${currentIndex}`);\n      }\n\n      // move to the next char\n      currentIndex = currentIndex + indexIncrement;\n    }\n\n    // set parser state\n    this.currentIndex = currentIndex;\n\n    return next ? next.bind(this) : null;\n  }\n\n  parsePath(): ParserStep | null {\n    const input = this.input;\n    const inputLength = input.length;\n    let currentIndex = this.currentIndex + 1;\n    const startIndex = currentIndex;\n\n    let indexIncrement: number;\n    let next: ParserStep | null;\n    let percentEncoded: boolean;\n\n    for (;;) {\n      if (currentIndex === inputLength) {\n        next = null;\n        break;\n      }\n\n      const char = input[currentIndex];\n\n      if (char === '/') {\n        // encountered / input may have another path segment, try to parse that next\n        next = this.parsePath;\n        break;\n      }\n\n      if (char === '?') {\n        // encountered ? input may have a query following path, parse that next\n        next = this.parseQuery;\n        break;\n      }\n\n      if (char === '%') {\n        // a % must be followed by 2 hex digits\n        if (\n          currentIndex + 2 >= inputLength ||\n          StringUtils.isNotHexDigit(input[currentIndex + 1]) ||\n          StringUtils.isNotHexDigit(input[currentIndex + 2])\n        ) {\n          throw new Error(`% is not followed by 2 hex digits, ${currentIndex}`);\n        }\n        // if we got here, we're dealing with percent encoded char, jump three chars\n        percentEncoded = true;\n        indexIncrement = 3;\n      } else {\n        // not percent encoded\n        percentEncoded = false;\n        indexIncrement = 1;\n      }\n\n      // pchar = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n      if (!percentEncoded && StringUtils.isNotValidPathChar(char)) {\n        throw new Error(`character is not allowed in path, ${currentIndex}`);\n      }\n\n      // move to the next char\n      currentIndex = currentIndex + indexIncrement;\n    }\n\n    if (currentIndex == startIndex && this.out.pathSegments.length === 0) {\n      throw new Error(`first path segment must have at least one character, ${currentIndex}`);\n    }\n\n    // update parser state\n    this.currentIndex = currentIndex;\n    this.out.pathSegments = [...this.out.pathSegments, input.slice(startIndex, currentIndex)];\n\n    return next ? next.bind(this) : null;\n  }\n\n  parseQuery(): ParserStep | null {\n    const input = this.input;\n    const inputLength = input.length;\n    let currentIndex = this.currentIndex + 1;\n    const startIndex = currentIndex;\n\n    let indexIncrement: number;\n    let next: ParserStep | null = null;\n    let percentEncoded: boolean;\n\n    for (;;) {\n      if (currentIndex === inputLength) {\n        break;\n      }\n\n      const char = input[currentIndex];\n\n      if (char === '#') {\n        // encountered # input may have a fragment following the query, parse that next\n        next = this.parseFragment;\n        break;\n      }\n\n      if (char === '%') {\n        // a % must be followed by 2 hex digits\n        if (\n          currentIndex + 2 >= inputLength ||\n          StringUtils.isNotHexDigit(input[currentIndex + 1]) ||\n          StringUtils.isNotHexDigit(input[currentIndex + 2])\n        ) {\n          throw new Error(`% is not followed by 2 hex digits, ${currentIndex}`);\n        }\n        // if we got here, we're dealing with percent encoded char, jump three chars\n        percentEncoded = true;\n        indexIncrement = 3;\n      } else {\n        // not percent encoded\n        percentEncoded = false;\n        indexIncrement = 1;\n      }\n      if (!percentEncoded && StringUtils.isNotValidQueryOrFragmentChar(char)) {\n        throw new Error(`character is not allowed in query - ${char}`);\n      }\n\n      // move to the next char\n      currentIndex = currentIndex + indexIncrement;\n    }\n\n    // update parser state\n    this.currentIndex = currentIndex;\n    this.out.query = input.slice(startIndex, currentIndex);\n\n    return next ? next.bind(this) : null;\n  }\n\n  parseFragment(): ParserStep | null {\n    const input = this.input;\n    const inputLength = this.input.length;\n    let currentIndex = this.currentIndex + 1;\n    const startIndex = currentIndex;\n\n    let indexIncrement: number;\n    let percentEncoded: boolean;\n\n    for (;;) {\n      if (currentIndex === inputLength) {\n        break;\n      }\n\n      const char = input[currentIndex];\n\n      if (char === '%') {\n        // a % must be followed by 2 hex digits\n        if (\n          currentIndex + 2 >= inputLength ||\n          StringUtils.isNotHexDigit(input[currentIndex + 1]) ||\n          StringUtils.isNotHexDigit(input[currentIndex + 2])\n        ) {\n          throw new Error(`% is not followed by 2 hex digits, ${currentIndex}`);\n        }\n        // if we got here, we're dealing with percent encoded char, jump three chars\n        percentEncoded = true;\n        indexIncrement = 3;\n      } else {\n        // not percent encoded\n        percentEncoded = false;\n        indexIncrement = 1;\n      }\n\n      if (!percentEncoded && StringUtils.isNotValidQueryOrFragmentChar(char)) {\n        throw new Error(`character is not allowed in fragment - ${char}`);\n      }\n\n      // move to the next char\n      currentIndex = currentIndex + indexIncrement;\n    }\n\n    // update parser state\n    this.currentIndex = currentIndex;\n    this.out.fragment = input.slice(startIndex, currentIndex);\n\n    // no more parsing needed after a fragment,\n    // cause the state machine to exit by returning nil\n    return null;\n  }\n}\n","import { Id } from '../id';\nimport {\n  Blockchain,\n  Constants,\n  DidMethodByte,\n  DidMethodNetwork,\n  DidMethod,\n  NetworkId\n} from '../constants';\nimport { BytesHelper } from '../elemBytes';\nimport {\n  DIDNetworkFlag,\n  findBlockchainForDIDMethodByValue,\n  findDIDMethodByValue,\n  findNetworkIDForDIDMethodByValue\n} from './did-helper';\nimport { Parser } from './did-parser';\nimport { IDID, Param } from './types';\nimport { sha256 } from '@iden3/js-crypto';\nimport { encoder } from '../utils';\n// DID Decentralized Identifiers (DIDs)\n// https://w3c.github.io/did-core/#did-syntax\n\nexport class DID {\n  method = '';\n  id = '';\n  idStrings: string[] = [];\n  params: Param[] = [];\n  path = '';\n  pathSegments: string[] = [];\n  query = '';\n  fragment = '';\n\n  constructor(d?: Partial<IDID>) {\n    if (d) {\n      Object.assign(this, d);\n    }\n  }\n\n  isUrl(): boolean {\n    return (\n      this.params.length > 0 ||\n      !!this.path ||\n      this.pathSegments.length > 0 ||\n      !!this.query ||\n      !!this.fragment\n    );\n  }\n\n  string(): string {\n    const buff = ['did:'];\n    if (this.method) {\n      buff.push(`${this.method}:`);\n    } else {\n      return '';\n    }\n\n    if (this.id) {\n      buff.push(this.id);\n    } else if (this.idStrings.length) {\n      buff.push(this.idStrings.join(':'));\n    } else {\n      return '';\n    }\n\n    if (this.params.length) {\n      for (const param of this.params) {\n        const p = param.toString();\n        if (p) {\n          buff.push(`;${p}`);\n        } else {\n          return '';\n        }\n      }\n    }\n\n    if (this.path) {\n      buff.push(`/${this.path}`);\n    } else if (this.pathSegments.length) {\n      buff.push(`/${this.pathSegments.join('/')}`);\n    }\n\n    if (this.query) {\n      buff.push(`?${this.query}`);\n    }\n\n    if (this.fragment) {\n      buff.push(`#${this.fragment}`);\n    }\n\n    return buff.join('');\n  }\n\n  toJSON() {\n    return this.string();\n  }\n\n  static parse(s: string): DID {\n    const parser = new Parser(s);\n\n    let parserState = parser.checkLength();\n\n    while (parserState) {\n      parserState = parserState();\n    }\n\n    parser.out.id = parser.out.idStrings.join(':');\n    parser.out.path = parser.out.pathSegments.join('/');\n\n    return new DID(parser.out);\n  }\n\n  static decodePartsFromId(id: Id): {\n    method: string;\n    blockchain: string;\n    networkId: string;\n  } {\n    const method = findDIDMethodByValue(id.bytes[0]);\n    const blockchain = findBlockchainForDIDMethodByValue(method, id.bytes[1]);\n\n    const networkId = findNetworkIDForDIDMethodByValue(method, id.bytes[1]);\n\n    return { method, blockchain, networkId };\n  }\n\n  static networkIdFromId(id: Id): string {\n    return DID.throwIfDIDUnsupported(id).networkId;\n  }\n\n  static methodFromId(id: Id): string {\n    return DID.throwIfDIDUnsupported(id).method;\n  }\n\n  static blockchainFromId(id: Id): string {\n    return DID.throwIfDIDUnsupported(id).blockchain;\n  }\n\n  private static throwIfDIDUnsupported(id: Id): {\n    method: string;\n    blockchain: string;\n    networkId: string;\n  } {\n    const { method, blockchain, networkId } = DID.decodePartsFromId(id);\n\n    if (DID.isUnsupported(method, blockchain, networkId)) {\n      throw new Error(`${Constants.ERRORS.UNKNOWN_DID_METHOD.message}: unsupported DID`);\n    }\n\n    return { method, blockchain, networkId };\n  }\n\n  // DIDGenesisFromIdenState calculates the genesis ID from an Identity State and returns it as DID\n  static newFromIdenState(typ: Uint8Array, state: bigint): DID {\n    const id = Id.idGenesisFromIdenState(typ, state);\n\n    return DID.parseFromId(id);\n  }\n\n  // NewDID creates a new *w3c.DID from the type and the genesis\n  static new(typ: Uint8Array, genesis: Uint8Array): DID {\n    return DID.parseFromId(new Id(typ, genesis));\n  }\n\n  // ParseDIDFromID returns DID from ID\n  static parseFromId(id: Id): DID {\n    if (!BytesHelper.checkChecksum(id.bytes)) {\n      throw new Error(`${Constants.ERRORS.UNSUPPORTED_ID.message}: invalid checksum`);\n    }\n    const { method, blockchain, networkId } = DID.throwIfDIDUnsupported(id);\n\n    const didParts = [Constants.DID.DID_SCHEMA, method.toString(), blockchain.toString()];\n    if (networkId) {\n      didParts.push(networkId.toString());\n    }\n    didParts.push(id.string());\n\n    const didString = didParts.join(':');\n\n    const did = DID.parse(didString);\n\n    return did;\n  }\n\n  static idFromDID(did: DID): Id {\n    let id: Id;\n    try {\n      id = DID.getIdFromDID(did);\n    } catch (error) {\n      if ((error as Error).message === Constants.ERRORS.UNKNOWN_DID_METHOD.message) {\n        return DID.idFromUnsupportedDID(did);\n      }\n      throw error;\n    }\n\n    return id;\n  }\n\n  static isUnsupported(method: string, blockchain: string, networkId: string): boolean {\n    return (\n      method == DidMethod.Other &&\n      blockchain == Blockchain.Unknown &&\n      networkId == NetworkId.Unknown\n    );\n  }\n\n  static idFromUnsupportedDID(did: DID): Id {\n    const hash = sha256(encoder.encode(did.string()));\n\n    const genesis = new Uint8Array(27);\n    const idSlice = hash.slice(hash.length - Constants.GENESIS_LENGTH);\n    for (let i = 0; i < genesis.length; i++) {\n      genesis[i] = idSlice[i] ?? 0;\n    }\n    const flg = new DIDNetworkFlag(Blockchain.Unknown, NetworkId.Unknown);\n    const tp = Uint8Array.from([\n      DidMethodByte[DidMethod.Other],\n      DidMethodNetwork[DidMethod.Other][flg.toString()]\n    ]);\n    return new Id(tp, genesis);\n  }\n\n  private static getIdFromDID(did: DID): Id {\n    const method = did.method;\n    const methodByte = DidMethodByte[method];\n    if (!methodByte || method === DidMethod.Other) {\n      throw Constants.ERRORS.UNKNOWN_DID_METHOD;\n    }\n\n    if (did.idStrings.length > 3 || did.idStrings.length < 2) {\n      throw new Error(`${Constants.ERRORS.INCORRECT_DID}: unexpected number of ID strings`);\n    }\n\n    const id = Id.fromString(did.idStrings[did.idStrings.length - 1]);\n\n    if (!BytesHelper.checkChecksum(id.bytes)) {\n      throw new Error(`${Constants.ERRORS.INCORRECT_DID}: incorrect ID checksum`);\n    }\n\n    const { method: method2, blockchain, networkId } = DID.decodePartsFromId(id);\n\n    if (method2.toString() !== method.toString()) {\n      throw new Error(`${Constants.ERRORS.INCORRECT_DID}: methods in Id and DID are different`);\n    }\n\n    if (blockchain.toString() !== did.idStrings[0]) {\n      throw new Error(`${Constants.ERRORS.INCORRECT_DID}: blockchains in ID and DID are different`);\n    }\n\n    if (did.idStrings.length > 2 && networkId.toString() != did.idStrings[1]) {\n      throw new Error(`${Constants.ERRORS.INCORRECT_DID}: networkIDs in Id and DID are different`);\n    }\n\n    return id;\n  }\n}\n","import {\n  Blockchain,\n  ChainIds,\n  DidMethod,\n  DidMethodByte,\n  DidMethodNetwork,\n  NetworkId\n} from './constants';\nimport { DID } from './did';\n\nexport const registerBlockchain = (blockchain: string): void => {\n  Blockchain[blockchain] = blockchain;\n};\n\nexport const registerNetwork = (network: string): void => {\n  NetworkId[network] = network;\n};\n\nexport const registerDidMethod = (method: string, byte: number): void => {\n  const max = DidMethodByte[DidMethod.Other];\n\n  if (byte >= max) {\n    throw new Error(\n      `Can't register DID method byte: current '${byte.toString(2)}', maximum byte allowed: '${(\n        max - 1\n      ).toString(2)}'`\n    );\n  }\n\n  if (typeof DidMethodByte[method] === 'number' && DidMethodByte[method] === byte) {\n    return;\n  }\n\n  if (Object.values(DidMethodByte).includes(byte)) {\n    throw new Error(\n      `can't register method '${method}' because DID method byte '${byte.toString(\n        2\n      )}' already registered for another method`\n    );\n  }\n\n  DidMethod[method] = method;\n  DidMethodByte[method] = byte;\n};\n\n/**\n * Register chain ID for a blockchain and network.\n *\n * @param {string} blockchain\n * @param {string} network\n * @param {number} [chainId]\n * @returns {void}\n */\nexport const registerChainId = (blockchain: string, network: string, chainId: number): void => {\n  const key = `${blockchain}:${network}`;\n\n  if (typeof ChainIds[key] === 'number' && ChainIds[key] === chainId) {\n    return;\n  }\n\n  if (Object.values(ChainIds).includes(chainId)) {\n    throw new Error(\n      `can't register chainId ${chainId} for '${blockchain}:${network}' because it's already registered for another chain id`\n    );\n  }\n\n  ChainIds[key] = chainId;\n};\n\n/**\n * Get chain ID by a blockchain and network.\n *\n * @param {string} blockchain\n * @param {string} [network]\n * @returns {number}\n */\nexport const getChainId = (blockchain: string, network?: string): number => {\n  if (network) {\n    blockchain += `:${network}`;\n  }\n  const chainId = ChainIds[blockchain];\n  if (!chainId) {\n    throw new Error(`chainId not found for ${blockchain}`);\n  }\n  return chainId;\n};\n\n/**\n * ChainIDfromDID returns chain name from w3c.DID\n *\n * @param {DID} did\n * @returns {number}\n */\nexport const chainIDfromDID = (did: DID): number => {\n  const id = DID.idFromDID(did);\n\n  const blockchain = DID.blockchainFromId(id);\n\n  const networkId = DID.networkIdFromId(id);\n\n  const chainId = ChainIds[`${blockchain}:${networkId}`];\n  if (typeof chainId !== 'number') {\n    throw new Error(`chainId not found for ${blockchain}:${networkId}`);\n  }\n\n  return chainId;\n};\n\n/**\n * Register a DID method with a byte value.\n * https://docs.iden3.io/getting-started/identity/identity-types/#regular-identity\n * @param {{\n *   method: DidMethodName;  DID method name\n *   methodByte?: number; put DID method byte value in case you want to register new DID method\n *   blockchain: BlockchainName;  blockchain name\n *   network: NetworkName;  network name\n *   networkFlag: number;  network flag\n *   chainId?: number;  put  chain ID in case you need to use it\n * }} {\n *   method,\n *   methodByte,\n *   blockchain,\n *   network,\n *   chainId,\n *   networkFlag\n * }\n */\nexport const registerDidMethodNetwork = ({\n  method,\n  methodByte,\n  blockchain,\n  network,\n  chainId,\n  networkFlag\n}: {\n  method: string;\n  methodByte?: number;\n  blockchain: string;\n  network: string;\n  networkFlag: number;\n  chainId?: number;\n}): void => {\n  registerBlockchain(blockchain);\n  registerNetwork(network);\n  if (typeof methodByte === 'number') {\n    registerDidMethod(method, methodByte);\n  }\n\n  if (!DidMethodNetwork[method]) {\n    DidMethodNetwork[method] = {};\n  }\n\n  if (typeof chainId === 'number') {\n    registerChainId(blockchain, network, chainId);\n  }\n\n  const key = `${blockchain}:${network}`;\n\n  const existedFlag = DidMethodNetwork[method][key];\n  if (typeof existedFlag === 'number' && existedFlag === networkFlag) {\n    return;\n  }\n\n  if (Object.values(DidMethodNetwork[method]).includes(networkFlag)) {\n    throw new Error(\n      `DID network flag ${networkFlag.toString(\n        2\n      )} is already registered for the another network id for '${method}' method`\n    );\n  }\n\n  DidMethodNetwork[method][key] = networkFlag;\n};\n"],"names":["getBytesFromUint64"],"mappings":"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"}
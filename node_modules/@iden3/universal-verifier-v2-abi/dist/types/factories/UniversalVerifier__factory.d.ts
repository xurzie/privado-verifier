import { type ContractRunner } from "ethers";
import type { UniversalVerifier, UniversalVerifierInterface } from "../UniversalVerifier";
export declare class UniversalVerifier__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "authMethod";
            readonly type: "string";
        }];
        readonly name: "AuthMethodAlreadyExists";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "authMethod";
            readonly type: "string";
        }];
        readonly name: "AuthMethodIsNotActive";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "authMethod";
            readonly type: "string";
        }];
        readonly name: "AuthMethodNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ChallengeIsInvalid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "length";
            readonly type: "uint256";
        }];
        readonly name: "ChecksumLengthRequired";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "groupId";
            readonly type: "uint256";
        }];
        readonly name: "GroupIdAlreadyExists";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "groupId";
            readonly type: "uint256";
        }];
        readonly name: "GroupIdNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GroupIdNotValid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "groupId";
            readonly type: "uint256";
        }];
        readonly name: "GroupMustHaveAtLeastTwoRequests";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "length";
            readonly type: "uint256";
        }];
        readonly name: "IdBytesLengthRequired";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "requestOwner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "InvalidRequestOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LinkIDNotTheSameForGroupedRequests";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "MetadataNotSupportedYet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "groupId";
            readonly type: "uint256";
        }];
        readonly name: "MissingUserIDInGroupOfRequests";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }];
        readonly name: "MissingUserIDInRequest";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "multiRequestId";
            readonly type: "uint256";
        }];
        readonly name: "MultiRequestIdAlreadyExists";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "multiRequestId";
            readonly type: "uint256";
        }];
        readonly name: "MultiRequestIdNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "expectedMultiRequestId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "multiRequestId";
            readonly type: "uint256";
        }];
        readonly name: "MultiRequestIdNotValid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "NotAnOwnerOrRequestOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nullifierSessionID";
            readonly type: "uint256";
        }];
        readonly name: "NullifierSessionIDAlreadyExists";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }];
        readonly name: "RequestIdAlreadyExists";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }];
        readonly name: "RequestIdNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "expectedRequestId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }];
        readonly name: "RequestIdNotValid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RequestIdTypeNotValid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RequestIdUsesReservedBytes";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }];
        readonly name: "RequestIsDisabled";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }];
        readonly name: "RequestShouldNotHaveAGroup";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "responseFieldName";
            readonly type: "string";
        }];
        readonly name: "ResponseFieldAlreadyExists";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "userIDFromAuth";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "userIDFromResponse";
            readonly type: "uint256";
        }];
        readonly name: "UserIDMismatch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UserNotAuthenticated";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "validator";
            readonly type: "address";
        }];
        readonly name: "ValidatorIsNotWhitelisted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "validator";
            readonly type: "address";
        }];
        readonly name: "ValidatorNotSupportInterface";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requestVerifierID";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "expectedVerifierID";
            readonly type: "uint256";
        }];
        readonly name: "VerifierIDIsNotValid";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "string";
            readonly name: "authMethod";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "validator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "params";
            readonly type: "bytes";
        }];
        readonly name: "AuthMethodSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "string";
            readonly name: "authMethod";
            readonly type: "string";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "AuthResponseSubmitted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "version";
            readonly type: "uint64";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "multiRequestId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "requestIds";
            readonly type: "uint256[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "groupIds";
            readonly type: "uint256[]";
        }];
        readonly name: "MultiRequestSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferStarted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "creator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "metadata";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "validator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "params";
            readonly type: "bytes";
        }];
        readonly name: "RequestSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "creator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "metadata";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "validator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "params";
            readonly type: "bytes";
        }];
        readonly name: "RequestUpdate";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "ResponseSubmitted";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "VERSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "acceptOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IRequestValidator";
            readonly name: "validator";
            readonly type: "address";
        }];
        readonly name: "addValidatorToWhitelist";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "multiRequestId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "userAddress";
            readonly type: "address";
        }];
        readonly name: "areMultiRequestProofsVerified";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "authMethod";
            readonly type: "string";
        }];
        readonly name: "authMethodExists";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "authMethod";
            readonly type: "string";
        }];
        readonly name: "disableAuthMethod";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }];
        readonly name: "disableRequest";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "authMethod";
            readonly type: "string";
        }];
        readonly name: "enableAuthMethod";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }];
        readonly name: "enableRequest";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "authMethod";
            readonly type: "string";
        }];
        readonly name: "getAuthMethod";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "contract IAuthValidator";
                readonly name: "validator";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "params";
                readonly type: "bytes";
            }, {
                readonly internalType: "bool";
                readonly name: "isActive";
                readonly type: "bool";
            }];
            readonly internalType: "struct Verifier.AuthMethodData";
            readonly name: "authMethodData";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "groupID";
            readonly type: "uint256";
        }];
        readonly name: "getGroupedRequests";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "requestId";
                readonly type: "uint256";
            }, {
                readonly internalType: "string";
                readonly name: "metadata";
                readonly type: "string";
            }, {
                readonly internalType: "contract IRequestValidator";
                readonly name: "validator";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "params";
                readonly type: "bytes";
            }, {
                readonly internalType: "address";
                readonly name: "creator";
                readonly type: "address";
            }];
            readonly internalType: "struct IVerifier.RequestInfo[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getGroupsCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "multiRequestId";
            readonly type: "uint256";
        }];
        readonly name: "getMultiRequest";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "multiRequestId";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "requestIds";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "groupIds";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "metadata";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IVerifier.MultiRequest";
            readonly name: "multiRequest";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "multiRequestId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "userAddress";
            readonly type: "address";
        }];
        readonly name: "getMultiRequestProofsStatus";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "requestId";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "isVerified";
                readonly type: "bool";
            }, {
                readonly internalType: "string";
                readonly name: "validatorVersion";
                readonly type: "string";
            }, {
                readonly internalType: "uint256";
                readonly name: "timestamp";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IVerifier.RequestProofStatus[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }];
        readonly name: "getRequest";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "requestId";
                readonly type: "uint256";
            }, {
                readonly internalType: "string";
                readonly name: "metadata";
                readonly type: "string";
            }, {
                readonly internalType: "contract IRequestValidator";
                readonly name: "validator";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "params";
                readonly type: "bytes";
            }, {
                readonly internalType: "address";
                readonly name: "creator";
                readonly type: "address";
            }];
            readonly internalType: "struct IVerifier.RequestInfo";
            readonly name: "request";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }];
        readonly name: "getRequestOwner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }];
        readonly name: "getRequestProofStatus";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "requestId";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "isVerified";
                readonly type: "bool";
            }, {
                readonly internalType: "string";
                readonly name: "validatorVersion";
                readonly type: "string";
            }, {
                readonly internalType: "uint256";
                readonly name: "timestamp";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IVerifier.RequestProofStatus";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRequestsCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "responseFieldName";
            readonly type: "string";
        }];
        readonly name: "getResponseFieldValue";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "getResponseFields";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "rawValue";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IRequestValidator.ResponseField[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getStateAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getVerifierID";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "groupId";
            readonly type: "uint256";
        }];
        readonly name: "groupIdExists";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IState";
            readonly name: "state";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }];
        readonly name: "isRequestEnabled";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }];
        readonly name: "isRequestProofVerified";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IRequestValidator";
            readonly name: "validator";
            readonly type: "address";
        }];
        readonly name: "isWhitelistedValidator";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "multiRequestId";
            readonly type: "uint256";
        }];
        readonly name: "multiRequestIdExists";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pendingOwner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IRequestValidator";
            readonly name: "validator";
            readonly type: "address";
        }];
        readonly name: "removeValidatorFromWhitelist";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }];
        readonly name: "requestIdExists";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "authMethod";
                readonly type: "string";
            }, {
                readonly internalType: "contract IAuthValidator";
                readonly name: "validator";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "params";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IVerifier.AuthMethod";
            readonly name: "authMethod";
            readonly type: "tuple";
        }];
        readonly name: "setAuthMethod";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "multiRequestId";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "requestIds";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "groupIds";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "metadata";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IVerifier.MultiRequest";
            readonly name: "multiRequest";
            readonly type: "tuple";
        }];
        readonly name: "setMultiRequest";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requestId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "requestOwner";
            readonly type: "address";
        }];
        readonly name: "setRequestOwner";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "requestId";
                readonly type: "uint256";
            }, {
                readonly internalType: "string";
                readonly name: "metadata";
                readonly type: "string";
            }, {
                readonly internalType: "contract IRequestValidator";
                readonly name: "validator";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "params";
                readonly type: "bytes";
            }, {
                readonly internalType: "address";
                readonly name: "creator";
                readonly type: "address";
            }];
            readonly internalType: "struct IVerifier.Request[]";
            readonly name: "requests";
            readonly type: "tuple[]";
        }];
        readonly name: "setRequests";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IState";
            readonly name: "state";
            readonly type: "address";
        }];
        readonly name: "setState";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "verifierID";
            readonly type: "uint256";
        }];
        readonly name: "setVerifierID";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "authMethod";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "proof";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IVerifier.AuthResponse";
            readonly name: "authResponse";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "requestId";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "proof";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "metadata";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IVerifier.Response[]";
            readonly name: "responses";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "bytes";
            readonly name: "crossChainProofs";
            readonly type: "bytes";
        }];
        readonly name: "submitResponse";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "requestId";
                readonly type: "uint256";
            }, {
                readonly internalType: "string";
                readonly name: "metadata";
                readonly type: "string";
            }, {
                readonly internalType: "contract IRequestValidator";
                readonly name: "validator";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "params";
                readonly type: "bytes";
            }, {
                readonly internalType: "address";
                readonly name: "creator";
                readonly type: "address";
            }];
            readonly internalType: "struct IVerifier.Request";
            readonly name: "request";
            readonly type: "tuple";
        }];
        readonly name: "updateRequest";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): UniversalVerifierInterface;
    static connect(address: string, runner?: ContractRunner | null): UniversalVerifier;
}
//# sourceMappingURL=UniversalVerifier__factory.d.ts.map
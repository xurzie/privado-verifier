import { getDateFromUnixTimestamp } from '@iden3/js-iden3-core';
import { checkQueryV2Circuits } from '../circuits/query.js';
import { IDOwnershipPubSignals } from '../circuits/ownershipVerifier.js';
import { checkIssuerNonRevState, checkUserState, getResolverByID } from '../circuits/common.js';
import { AtomicQueryMTPV2PubSignals, byteEncoder, CircuitId } from '@0xpolygonid/js-sdk';
import { CONSTANTS } from '../constants.js';
export class AtomicQueryMTPV2PubSignalsVerifier extends IDOwnershipPubSignals {
    constructor(pubSignals) {
        super();
        this.pubSignals = new AtomicQueryMTPV2PubSignals();
        this.pubSignals = this.pubSignals.pubSignalsUnmarshal(byteEncoder.encode(JSON.stringify(pubSignals)));
        if (!this.pubSignals.userID) {
            throw new Error('user id is not presented in proof public signals');
        }
        if (!this.pubSignals.requestID) {
            throw new Error('requestId is not presented in proof public signals');
        }
        this.userId = this.pubSignals.userID;
        this.challenge = this.pubSignals.requestID;
    }
    async verifyQuery(query, schemaLoader, verifiablePresentation, opts) {
        const outs = {
            issuerId: this.pubSignals.issuerID,
            schemaHash: this.pubSignals.claimSchema,
            slotIndex: this.pubSignals.slotIndex,
            operator: this.pubSignals.operator,
            value: this.pubSignals.value,
            timestamp: this.pubSignals.timestamp,
            merklized: this.pubSignals.merklized,
            claimPathKey: this.pubSignals.claimPathKey,
            claimPathNotExists: this.pubSignals.claimPathNotExists,
            valueArraySize: CONSTANTS.CIRCUITS_ARRAY_VALUE_SIZE,
            isRevocationChecked: this.pubSignals.isRevocationChecked
        };
        await checkQueryV2Circuits(CircuitId.AtomicQueryMTPV2, query, outs, schemaLoader, opts, verifiablePresentation);
        return this.pubSignals;
    }
    async verifyStates(resolvers, opts) {
        const resolver = getResolverByID(resolvers, this.pubSignals.issuerID);
        if (!resolver) {
            throw new Error(`resolver not found for issuerID ${this.pubSignals.issuerID.string()}`);
        }
        await checkUserState(resolver, this.pubSignals.issuerID, this.pubSignals.issuerClaimIdenState);
        if (this.pubSignals.isRevocationChecked === 0) {
            return;
        }
        const issuerNonRevStateResolved = await checkIssuerNonRevState(resolver, this.pubSignals.issuerID, this.pubSignals.issuerClaimNonRevState);
        const acceptedStateTransitionDelay = opts?.acceptedStateTransitionDelay ?? CONSTANTS.ACCEPTED_STATE_TRANSITION_DELAY;
        if (!issuerNonRevStateResolved.latest) {
            const timeDiff = Date.now() -
                getDateFromUnixTimestamp(Number(issuerNonRevStateResolved.transitionTimestamp)).getTime();
            if (timeDiff > acceptedStateTransitionDelay) {
                throw new Error('issuer state is outdated');
            }
        }
    }
}

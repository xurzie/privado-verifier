{"version":3,"file":"index.js","sources":["../../../src/hash.ts","../../../src/proving.ts","../../../node_modules/rfc4648/lib/rfc4648.js","../../../src/jwz.ts","../../../src/witness_calculator.ts","../../../node_modules/@noble/hashes/esm/crypto.js","../../../node_modules/@noble/hashes/esm/utils.js","../../../node_modules/@noble/hashes/esm/_md.js","../../../node_modules/@noble/hashes/esm/sha2.js","../../../node_modules/@noble/hashes/esm/hmac.js","../../../node_modules/@noble/curves/esm/abstract/utils.js","../../../node_modules/@noble/curves/esm/abstract/modular.js","../../../node_modules/@noble/curves/esm/abstract/curve.js","../../../node_modules/@noble/curves/esm/abstract/weierstrass.js","../../../node_modules/@noble/curves/esm/abstract/hash-to-curve.js","../../../node_modules/@noble/curves/esm/abstract/bls.js","../../../node_modules/@noble/curves/esm/abstract/tower.js","../../../node_modules/@noble/curves/esm/bn254.js","../../../node_modules/@noble/curves/esm/_shortw_utils.js","../../../src/common.ts","../../../src/authGroth16.ts","../../../src/authV2Groth16.ts","../../../src/index.ts"],"sourcesContent":["import { fromBigEndian } from '@iden3/js-iden3-core';\nimport { poseidon, sha256 } from '@iden3/js-crypto';\n// Q is the order of the integer field (Zq) that fits inside the SNARK.\nexport const qString =\n  '21888242871839275222246405745257275088548364400416034343698204186575808495617';\n\nexport function hash(message: Uint8Array): bigint {\n  // 1. sha256 hash\n  const hashBytes = sha256(message);\n\n  // 2. swap hash before hashing\n  const bi = fromBigEndian(hashBytes.reverse());\n\n  let m = BigInt(0);\n  if (checkBigIntInField(bi)) {\n    m = bi;\n  } else {\n    m = bi % BigInt(qString);\n  }\n\n  return poseidon.hash([m]);\n}\n\n// checkBigIntInField checks if given *big.Int fits in a Field Q element\nexport function checkBigIntInField(a: bigint): boolean {\n  return a < BigInt(qString);\n}\n","export interface ZKProof {\n  proof: ProofData;\n  pub_signals: string[];\n}\nexport interface ProofData {\n  pi_a: string[];\n  pi_b: string[][];\n  pi_c: string[];\n  protocol: string;\n}\n\nexport class ProvingMethodAlg {\n  constructor(public readonly alg: string, public readonly circuitId: string) {}\n\n  toString(): string {\n    return `${this.alg}:${this.circuitId}`;\n  }\n}\n\nconst provingMethods = new Map<string, () => ProvingMethod>(); // map[string]func() ProvingMethod{}\n\n// ProvingMethod can be used add new methods for signing or verifying tokens.\nexport interface ProvingMethod {\n  // Returns true if proof is valid\n  verify(messageHash: Uint8Array, proof: ZKProof, verificationKey: Uint8Array): Promise<boolean>;\n  // Returns proof or error\n  prove(inputs: Uint8Array, provingKey: Uint8Array, wasm: Uint8Array): Promise<ZKProof>;\n\n  readonly methodAlg: ProvingMethodAlg;\n\n  readonly alg: string;\n  // Returns the alg identifier for this method (example: 'AUTH-GROTH-16')\n  readonly circuitId: string;\n}\n\n// RegisterProvingMethod registers the \"alg\" name and a factory function for proving method.\n// This is typically done during init() in the method's implementation\nexport function registerProvingMethod(\n  alg: ProvingMethodAlg,\n  f: () => ProvingMethod\n): Promise<void> {\n  return new Promise((res) => {\n    provingMethods.set(alg.toString(), f);\n    res();\n  });\n}\n\n// GetProvingMethod retrieves a proving method from an \"alg\" string\nexport function getProvingMethod(alg: ProvingMethodAlg): Promise<ProvingMethod> {\n  return new Promise((res, rej) => {\n    const func = provingMethods.get(alg.toString());\n    if (func) {\n      const method: ProvingMethod = func();\n      res(method);\n    } else {\n      rej('unknown alg');\n    }\n  });\n}\n\nexport function getAlgorithms(): Promise<string[]> {\n  return Promise.resolve(Array.from(provingMethods.keys()).map((k) => k.split(':')[0]));\n}\n\n// ProofInputsPreparerHandlerFunc prepares inputs using hash message and circuit id\nexport type ProofInputsPreparerHandlerFunc = (\n  hash: Uint8Array,\n  circuitId: string\n) => Promise<Uint8Array>;\n\n// Prepare function is responsible to call provided handler for inputs preparation\nexport function prepare(\n  f: ProofInputsPreparerHandlerFunc,\n  hash: Uint8Array,\n  circuitId: string\n): Promise<Uint8Array> {\n  return f(hash, circuitId);\n}\n","/* eslint-disable @typescript-eslint/strict-boolean-expressions */\n\n// ---------------------------------------------------------------------------\n// Specific encodings\n// ---------------------------------------------------------------------------\nvar base16Encoding = {\n  chars: '0123456789ABCDEF',\n  bits: 4\n};\nvar base32Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bits: 5\n};\nvar base32HexEncoding = {\n  chars: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bits: 5\n};\nvar base64Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bits: 6\n};\nvar base64UrlEncoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bits: 6\n};\nvar base16 = {\n  parse: function parse(string, opts) {\n    return _parse(string.toUpperCase(), base16Encoding, opts);\n  },\n  stringify: function stringify(data, opts) {\n    return _stringify(data, base16Encoding, opts);\n  }\n};\nvar base32 = {\n  parse: function parse(string, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return _parse(opts.loose ? string.toUpperCase().replace(/0/g, 'O').replace(/1/g, 'L').replace(/8/g, 'B') : string, base32Encoding, opts);\n  },\n  stringify: function stringify(data, opts) {\n    return _stringify(data, base32Encoding, opts);\n  }\n};\nvar base32hex = {\n  parse: function parse(string, opts) {\n    return _parse(string, base32HexEncoding, opts);\n  },\n  stringify: function stringify(data, opts) {\n    return _stringify(data, base32HexEncoding, opts);\n  }\n};\nvar base64 = {\n  parse: function parse(string, opts) {\n    return _parse(string, base64Encoding, opts);\n  },\n  stringify: function stringify(data, opts) {\n    return _stringify(data, base64Encoding, opts);\n  }\n};\nvar base64url = {\n  parse: function parse(string, opts) {\n    return _parse(string, base64UrlEncoding, opts);\n  },\n  stringify: function stringify(data, opts) {\n    return _stringify(data, base64UrlEncoding, opts);\n  }\n};\n\n// ---------------------------------------------------------------------------\n// Codec implementation\n// ---------------------------------------------------------------------------\n\nvar codec = {\n  parse: _parse,\n  stringify: _stringify\n};\nfunction _parse(string, encoding, opts) {\n  var _opts$out;\n  if (opts === void 0) {\n    opts = {};\n  }\n  // Build the character lookup table:\n  if (!encoding.codes) {\n    encoding.codes = {};\n    for (var i = 0; i < encoding.chars.length; ++i) {\n      encoding.codes[encoding.chars[i]] = i;\n    }\n  }\n\n  // The string must have a whole number of bytes:\n  if (!opts.loose && string.length * encoding.bits & 7) {\n    throw new SyntaxError('Invalid padding');\n  }\n\n  // Count the padding bytes:\n  var end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n\n    // If we get a whole number of bytes, there is too much padding:\n    if (!opts.loose && !((string.length - end) * encoding.bits & 7)) {\n      throw new SyntaxError('Invalid padding');\n    }\n  }\n\n  // Allocate the output:\n  var out = new ((_opts$out = opts.out) != null ? _opts$out : Uint8Array)(end * encoding.bits / 8 | 0);\n\n  // Parse the data:\n  var bits = 0; // Number of bits currently in the buffer\n  var buffer = 0; // Bits waiting to be written out, MSB first\n  var written = 0; // Next byte to write\n  for (var _i = 0; _i < end; ++_i) {\n    // Read one character from the string:\n    var value = encoding.codes[string[_i]];\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[_i]);\n    }\n\n    // Append the bits to the buffer:\n    buffer = buffer << encoding.bits | value;\n    bits += encoding.bits;\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 0xff & buffer >> bits;\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= encoding.bits || 0xff & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n}\nfunction _stringify(data, encoding, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  var _opts = opts,\n    _opts$pad = _opts.pad,\n    pad = _opts$pad === void 0 ? true : _opts$pad;\n  var mask = (1 << encoding.bits) - 1;\n  var out = '';\n  var bits = 0; // Number of bits currently in the buffer\n  var buffer = 0; // Bits waiting to be written out, MSB first\n  for (var i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = buffer << 8 | 0xff & data[i];\n    bits += 8;\n\n    // Write out as much as we can:\n    while (bits > encoding.bits) {\n      bits -= encoding.bits;\n      out += encoding.chars[mask & buffer >> bits];\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += encoding.chars[mask & buffer << encoding.bits - bits];\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (out.length * encoding.bits & 7) {\n      out += '=';\n    }\n  }\n  return out;\n}\n\nexport { base16, base32, base32hex, base64, base64url, codec };\n","import { hash } from './hash';\nimport {\n  ZKProof,\n  ProvingMethod,\n  ProvingMethodAlg,\n  ProofInputsPreparerHandlerFunc,\n  getProvingMethod,\n  prepare\n} from './proving';\n\nimport { base64url as base64 } from 'rfc4648';\nimport { toBigEndian } from '@iden3/js-iden3-core';\n\nexport enum Header {\n  Type = 'typ',\n  Alg = 'alg',\n  CircuitId = 'circuitId',\n  Critical = 'crit'\n}\n\nexport interface IRawJSONWebZeroknowledge {\n  payload: Uint8Array;\n  protectedHeaders: Uint8Array;\n  header: { [key: string]: unknown };\n  zkp: Uint8Array;\n\n  sanitized(): Promise<Token>;\n}\n\nexport class RawJSONWebZeroknowledge implements IRawJSONWebZeroknowledge {\n  constructor(\n    public payload: Uint8Array,\n    public protectedHeaders: Uint8Array,\n    public header: { [key: string]: unknown },\n    public zkp: Uint8Array\n  ) {}\n\n  async sanitized(): Promise<Token> {\n    if (!this.payload) {\n      throw new Error('iden3/js-jwz: missing payload in JWZ message');\n    }\n\n    const headers: { [key: string]: unknown } = JSON.parse(\n      new TextDecoder().decode(this.protectedHeaders)\n    );\n    const criticalHeaders = headers[Header.Critical] as string[];\n    criticalHeaders.forEach((key: string) => {\n      if (!headers[key]) {\n        throw new Error(`iden3/js-jwz: header is listed in critical ${key}, but not presented`);\n      }\n    });\n\n    const alg = headers[Header.Alg] as string;\n    const circuitId = headers[Header.CircuitId] as string;\n\n    const method = await getProvingMethod(new ProvingMethodAlg(alg, circuitId));\n    const zkp = JSON.parse(new TextDecoder().decode(this.zkp));\n    const token = new Token(method, new TextDecoder().decode(this.payload));\n    token.alg = alg;\n    token.circuitId = circuitId;\n    token.zkProof = zkp;\n    for (const [key, value] of Object.entries(headers)) {\n      token.setHeader(key, value);\n    }\n\n    return token;\n  }\n}\n\n// Token represents a JWZ Token.\nexport class Token {\n  public alg: string;\n  public circuitId: string;\n  private raw: IRawJSONWebZeroknowledge;\n  public zkProof: ZKProof = {} as ZKProof;\n\n  constructor(\n    public readonly method: ProvingMethod,\n    payload: string,\n    private readonly inputsPreparer?: ProofInputsPreparerHandlerFunc\n  ) {\n    this.alg = this.method.alg;\n    this.circuitId = this.method.circuitId;\n    this.raw = {} as IRawJSONWebZeroknowledge;\n    this.raw.header = this.getDefaultHeaders();\n\n    this.raw.payload = new TextEncoder().encode(payload);\n  }\n\n  public setHeader(key: string, value: unknown): void {\n    this.raw.header[key] = value;\n  }\n\n  public getPayload(): string {\n    return new TextDecoder().decode(this.raw.payload);\n  }\n\n  private getDefaultHeaders(): { [key: string]: string | string[] } {\n    return {\n      [Header.Alg]: this.alg,\n      [Header.Critical]: [Header.CircuitId],\n      [Header.CircuitId]: this.circuitId,\n      [Header.Type]: 'JWZ'\n    };\n  }\n\n  // Parse parses a jwz message in compact or full serialization format.\n  static parse(tokenStr: string): Promise<Token> {\n    // Parse parses a jwz message in compact or full serialization format.\n    const token = tokenStr?.trim();\n    return token.startsWith('{') ? Token.parseFull(tokenStr) : Token.parseCompact(tokenStr);\n  }\n\n  // parseCompact parses a message in compact format.\n  private static async parseCompact(tokenStr: string): Promise<Token> {\n    const parts = tokenStr.split('.');\n    if (parts.length != 3) {\n      throw new Error('iden3/js-jwz: compact JWZ format must have three segments');\n    }\n    const rawProtected = base64.parse(parts[0], { loose: true });\n\n    const rawPayload = base64.parse(parts[1], { loose: true });\n\n    const proof = base64.parse(parts[2], { loose: true });\n\n    const raw: IRawJSONWebZeroknowledge = new RawJSONWebZeroknowledge(\n      rawPayload,\n      rawProtected,\n      {},\n      proof\n    );\n\n    return await raw.sanitized();\n  }\n\n  // parseFull parses a message in full format.\n  private static async parseFull(tokenStr: string): Promise<Token> {\n    const raw: IRawJSONWebZeroknowledge = JSON.parse(tokenStr);\n    return await raw.sanitized();\n  }\n\n  // Prove creates and returns a complete, proved JWZ.\n  // The token is proven using the Proving Method specified in the token.\n  async prove(provingKey: Uint8Array, wasm: Uint8Array): Promise<string> {\n    // all headers must be protected\n    const headers = this.serializeHeaders();\n\n    this.raw.protectedHeaders = new TextEncoder().encode(headers);\n\n    const msgHash: Uint8Array = await this.getMessageHash();\n\n    if (!this.inputsPreparer) {\n      throw new Error('iden3/jwz: prepare func must be defined');\n    }\n    const inputs: Uint8Array = await prepare(this.inputsPreparer, msgHash, this.circuitId);\n\n    const proof: ZKProof = await this.method.prove(inputs, provingKey, wasm);\n\n    const marshaledProof = JSON.stringify(proof);\n\n    this.zkProof = proof;\n    this.raw.zkp = new TextEncoder().encode(marshaledProof);\n\n    return this.compactSerialize();\n  }\n\n  // CompactSerialize returns token serialized in three parts: base64 encoded headers, payload and proof.\n  compactSerialize(): string {\n    if (!this.raw.header || !this.raw.protectedHeaders || !this.zkProof) {\n      throw new Error(\"iden3/jwz:can't serialize without one of components\");\n    }\n\n    const serializedProtected = base64.stringify(this.raw.protectedHeaders, {\n      pad: false\n    });\n    const serializedProof = base64.stringify(this.raw.zkp, { pad: false });\n    const serializedPayload = base64.stringify(this.raw.payload, {\n      pad: false\n    });\n    return `${serializedProtected}.${serializedPayload}.${serializedProof}`;\n  }\n\n  // fullSerialize returns marshaled presentation of raw token as json string.\n  fullSerialize(): string {\n    return JSON.stringify(this.raw);\n  }\n\n  async getMessageHash(): Promise<Uint8Array> {\n    const serializedHeadersJSON = this.serializeHeaders();\n\n    const serializedHeaders = new TextEncoder().encode(serializedHeadersJSON);\n    const protectedHeaders = base64.stringify(serializedHeaders, {\n      pad: false\n    });\n\n    const payload = base64.stringify(this.raw.payload, { pad: false });\n\n    // JWZ ZkProof input value is ASCII(BASE64URL(UTF8(JWS Protected Header)) || '.' || BASE64URL(JWS Payload)).\n    const messageToProof = new TextEncoder().encode(`${protectedHeaders}.${payload}`);\n\n    const hashInt: bigint = await hash(messageToProof);\n\n    return toBigEndian(hashInt, 32);\n  }\n\n  // Verify  perform zero knowledge verification.\n  async verify(verificationKey: Uint8Array): Promise<boolean> {\n    // 1. prepare hash o payload message that had to be proven\n    const msgHash = await this.getMessageHash();\n\n    // 2. verify that zkp is valid\n\n    return this.method.verify(msgHash, this.zkProof, verificationKey);\n  }\n\n  serializeHeaders() {\n    return JSON.stringify(this.raw.header, Object.keys(this.raw.header).sort());\n  }\n}\n","/* eslint-disable require-await */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport async function witnessBuilder(code, options?) {\n  options = options || {};\n\n  let wasmModule;\n  try {\n    wasmModule = await WebAssembly.compile(code);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.log(err);\n    // eslint-disable-next-line no-console\n    console.log('\\nTry to run circom --c in order to generate c++ code instead\\n');\n    throw new Error(err);\n  }\n\n  let errStr = '';\n  let msgStr = '';\n\n  const instance = await WebAssembly.instantiate(wasmModule, {\n    runtime: {\n      exceptionHandler: function (code) {\n        let err;\n        if (code == 1) {\n          err = 'Signal not found.\\n';\n        } else if (code == 2) {\n          err = 'Too many signals set.\\n';\n        } else if (code == 3) {\n          err = 'Signal already set.\\n';\n        } else if (code == 4) {\n          err = 'Assert Failed.\\n';\n        } else if (code == 5) {\n          err = 'Not enough memory.\\n';\n        } else if (code == 6) {\n          err = 'Input signal array access exceeds the size.\\n';\n        } else {\n          err = 'Unknown error.\\n';\n        }\n        throw new Error(err + errStr);\n      },\n      printErrorMessage: function () {\n        errStr += getMessage() + '\\n';\n        // console.error(getMessage());\n      },\n      writeBufferMessage: function () {\n        const msg = getMessage();\n        // Any calls to `log()` will always end with a `\\n`, so that's when we print and reset\n        if (msg === '\\n') {\n          // eslint-disable-next-line no-console\n          console.log(msgStr);\n          msgStr = '';\n        } else {\n          // If we've buffered other content, put a space in between the items\n          if (msgStr !== '') {\n            msgStr += ' ';\n          }\n          // Then append the message to the message we are creating\n          msgStr += msg;\n        }\n      },\n      showSharedRWMemory: function () {\n        printSharedRWMemory();\n      }\n    }\n  });\n\n  const sanityCheck = options;\n  //        options &&\n  //        (\n  //            options.sanityCheck ||\n  //            options.logGetSignal ||\n  //            options.logSetSignal ||\n  //            options.logStartComponent ||\n  //            options.logFinishComponent\n  //        );\n\n  const wc = new WitnessCalculator(instance, sanityCheck);\n  return wc;\n\n  function getMessage() {\n    let message = '';\n    let c = (instance as any).exports.getMessageChar();\n    while (c != 0) {\n      message += String.fromCharCode(c);\n      c = (instance as any).exports.getMessageChar();\n    }\n    return message;\n  }\n\n  function printSharedRWMemory() {\n    const shared_rw_memory_size = (instance as any).exports.getFieldNumLen32();\n    const arr = new Uint32Array(shared_rw_memory_size);\n    for (let j = 0; j < shared_rw_memory_size; j++) {\n      arr[shared_rw_memory_size - 1 - j] = (instance as any).exports.readSharedRWMemory(j);\n    }\n\n    // If we've buffered other content, put a space in between the items\n    if (msgStr !== '') {\n      msgStr += ' ';\n    }\n    // Then append the value to the message we are creating\n    msgStr += fromArray32(arr).toString();\n  }\n}\n\nclass WitnessCalculator {\n  version: any;\n  n32: any;\n  prime: any;\n  witnessSize: any;\n  sanityCheck: any;\n  constructor(private instance, sanityCheck) {\n    this.instance = instance;\n    this.version = (this.instance.exports as any).getVersion();\n    this.n32 = (this.instance.exports as any).getFieldNumLen32();\n\n    (this.instance.exports as any).getRawPrime();\n    const arr = new Uint32Array(this.n32);\n    for (let i = 0; i < this.n32; i++) {\n      arr[this.n32 - 1 - i] = (this.instance.exports as any).readSharedRWMemory(i);\n    }\n    this.prime = fromArray32(arr);\n\n    this.witnessSize = (this.instance.exports as any).getWitnessSize();\n\n    this.sanityCheck = sanityCheck;\n  }\n\n  circom_version() {\n    return (this.instance.exports as any).getVersion();\n  }\n\n  async _doCalculateWitness(input, sanityCheck) {\n    //input is assumed to be a map from signals to arrays of bigints\n    (this.instance.exports as any).init(this.sanityCheck || sanityCheck ? 1 : 0);\n    const keys = Object.keys(input);\n    let input_counter = 0;\n    keys.forEach((k) => {\n      const h = fnvHash(k);\n      const hMSB = parseInt(h.slice(0, 8), 16);\n      const hLSB = parseInt(h.slice(8, 16), 16);\n      const fArr = flatArray(input[k]);\n      const signalSize = (this.instance.exports as any).getInputSignalSize(hMSB, hLSB);\n      if (signalSize < 0) {\n        throw new Error(`Signal ${k} not found\\n`);\n      }\n      if (fArr.length < signalSize) {\n        throw new Error(`Not enough values for input signal ${k}\\n`);\n      }\n      if (fArr.length > signalSize) {\n        throw new Error(`Too many values for input signal ${k}\\n`);\n      }\n      for (let i = 0; i < fArr.length; i++) {\n        const arrFr = toArray32(BigInt(fArr[i]) % this.prime, this.n32);\n        for (let j = 0; j < this.n32; j++) {\n          (this.instance.exports as any).writeSharedRWMemory(j, arrFr[this.n32 - 1 - j]);\n        }\n        try {\n          (this.instance.exports as any).setInputSignal(hMSB, hLSB, i);\n          input_counter++;\n        } catch (err) {\n          // console.log(`After adding signal ${i} of ${k}`)\n          throw new Error(err);\n        }\n      }\n    });\n    if (input_counter < (this.instance.exports as any).getInputSize()) {\n      throw new Error(\n        `Not all inputs have been set. Only ${input_counter} out of ${(\n          this.instance.exports as any\n        ).getInputSize()}`\n      );\n    }\n  }\n\n  async calculateWitness(input, sanityCheck) {\n    const w: bigint[] = [];\n\n    await this._doCalculateWitness(input, sanityCheck);\n\n    for (let i = 0; i < this.witnessSize; i++) {\n      (this.instance.exports as any).getWitness(i);\n      const arr = new Uint32Array(this.n32);\n      for (let j = 0; j < this.n32; j++) {\n        arr[this.n32 - 1 - j] = (this.instance.exports as any).readSharedRWMemory(j);\n      }\n      w.push(fromArray32(arr));\n    }\n\n    return w;\n  }\n\n  async calculateBinWitness(input, sanityCheck) {\n    const buff32 = new Uint32Array(this.witnessSize * this.n32);\n    const buff = new Uint8Array(buff32.buffer);\n    await this._doCalculateWitness(input, sanityCheck);\n\n    for (let i = 0; i < this.witnessSize; i++) {\n      (this.instance.exports as any).getWitness(i);\n      const pos = i * this.n32;\n      for (let j = 0; j < this.n32; j++) {\n        buff32[pos + j] = (this.instance.exports as any).readSharedRWMemory(j);\n      }\n    }\n\n    return buff;\n  }\n\n  async calculateWTNSBin(input, sanityCheck) {\n    const buff32 = new Uint32Array(this.witnessSize * this.n32 + this.n32 + 11);\n    const buff = new Uint8Array(buff32.buffer);\n    await this._doCalculateWitness(input, sanityCheck);\n\n    //\"wtns\"\n    buff[0] = 'w'.charCodeAt(0);\n    buff[1] = 't'.charCodeAt(0);\n    buff[2] = 'n'.charCodeAt(0);\n    buff[3] = 's'.charCodeAt(0);\n\n    //version 2\n    buff32[1] = 2;\n\n    //number of sections: 2\n    buff32[2] = 2;\n\n    //id section 1\n    buff32[3] = 1;\n\n    const n8 = this.n32 * 4;\n    //id section 1 length in 64bytes\n    const idSection1length = 8 + n8;\n    const idSection1lengthHex = idSection1length.toString(16);\n    buff32[4] = parseInt(idSection1lengthHex.slice(0, 8), 16);\n    buff32[5] = parseInt(idSection1lengthHex.slice(8, 16), 16);\n\n    //this.n32\n    buff32[6] = n8;\n\n    //prime number\n    this.instance.exports.getRawPrime();\n\n    let pos = 7;\n    for (let j = 0; j < this.n32; j++) {\n      buff32[pos + j] = this.instance.exports.readSharedRWMemory(j);\n    }\n    pos += this.n32;\n\n    // witness size\n    buff32[pos] = this.witnessSize;\n    pos++;\n\n    //id section 2\n    buff32[pos] = 2;\n    pos++;\n\n    // section 2 length\n    const idSection2length = n8 * this.witnessSize;\n    const idSection2lengthHex = idSection2length.toString(16);\n    buff32[pos] = parseInt(idSection2lengthHex.slice(0, 8), 16);\n    buff32[pos + 1] = parseInt(idSection2lengthHex.slice(8, 16), 16);\n\n    pos += 2;\n    for (let i = 0; i < this.witnessSize; i++) {\n      this.instance.exports.getWitness(i);\n      for (let j = 0; j < this.n32; j++) {\n        buff32[pos + j] = this.instance.exports.readSharedRWMemory(j);\n      }\n      pos += this.n32;\n    }\n\n    return buff;\n  }\n}\n\nfunction toArray32(rem, size) {\n  const res: number[] = []; //new Uint32Array(size); //has no unshift\n  const radix = BigInt(0x100000000);\n  while (rem) {\n    res.unshift(Number(rem % radix));\n    rem = rem / radix;\n  }\n  if (size) {\n    let i = size - res.length;\n    while (i > 0) {\n      res.unshift(0);\n      i--;\n    }\n  }\n  return res;\n}\n\nfunction fromArray32(arr) {\n  //returns a BigInt\n  let res = BigInt(0);\n  const radix = BigInt(0x100000000);\n  for (let i = 0; i < arr.length; i++) {\n    res = res * radix + BigInt(arr[i]);\n  }\n  return res;\n}\n\nfunction flatArray(a) {\n  const res = [];\n  fillArray(res, a);\n  return res;\n\n  function fillArray(res, a) {\n    if (Array.isArray(a)) {\n      for (let i = 0; i < a.length; i++) {\n        fillArray(res, a[i]);\n      }\n    } else {\n      res.push(a);\n    }\n  }\n}\n\nfunction fnvHash(str) {\n  const uint64_max = BigInt(2) ** BigInt(64);\n  let hash = BigInt('0xCBF29CE484222325');\n  for (let i = 0; i < str.length; i++) {\n    hash ^= BigInt(str[i].charCodeAt());\n    hash *= BigInt(0x100000001b3);\n    hash %= uint64_max;\n  }\n  let hashHex = hash.toString(16);\n  const n = 16 - hashHex.length;\n  hashHex = '0'.repeat(n).concat(hashHex);\n  return hashHex;\n}\n","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is positive integer. */\nexport function anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n/** Asserts something is Uint8Array. */\nexport function abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/** Asserts something is hash */\nexport function ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.createHasher');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays) {\n    for (let i = 0; i < arrays.length; i++) {\n        arrays[i].fill(0);\n    }\n}\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word, shift) {\n    return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word, shift) {\n    return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n/** The byte swap operation for uint32 */\nexport function byteSwap(word) {\n    return (((word << 24) & 0xff000000) |\n        ((word << 8) & 0xff0000) |\n        ((word >>> 8) & 0xff00) |\n        ((word >>> 24) & 0xff));\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const swap8IfBE = isLE\n    ? (n) => n\n    : (n) => byteSwap(n);\n/** @deprecated */\nexport const byteSwapIfBE = swap8IfBE;\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n    return arr;\n}\nexport const swap32IfBE = isLE\n    ? (u) => u\n    : byteSwap32;\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin = /* @__PURE__ */ (() => \n// @ts-ignore\ntypeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return bytes.toHex();\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return Uint8Array.fromHex(hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async () => { };\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes) {\n    return new TextDecoder().decode(bytes);\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Helper for KDFs: consumes uint8array or string.\n * When string is passed, does utf8 decoding, using TextDecoder.\n */\nexport function kdfInputToBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/** Copies several Uint8Arrays into one. */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n        throw new Error('options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** For runtime check if class implements interface */\nexport class Hash {\n}\n/** Wraps hash function, creating an interface on top of it */\nexport function createHasher(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function createOptHasher(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function createXOFer(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport const wrapConstructor = createHasher;\nexport const wrapConstructorWithOpts = createOptHasher;\nexport const wrapXOFConstructorWithOpts = createXOFer;\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto && typeof crypto.randomBytes === 'function') {\n        return Uint8Array.from(crypto.randomBytes(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { Hash, abytes, aexists, aoutput, clean, createView, toBytes } from \"./utils.js\";\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */\nexport function Chi(a, b, c) {\n    return (a & b) ^ (~a & c);\n}\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a, b, c) {\n    return (a & b) ^ (a & c) ^ (b & c);\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        data = toBytes(data);\n        abytes(data);\n        const { view, buffer, blockLen } = this;\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        clean(this.buffer.subarray(pos));\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.destroyed = destroyed;\n        to.finished = finished;\n        to.length = length;\n        to.pos = pos;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n}\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\nexport const SHA256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\n]);\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\nexport const SHA224_IV = /* @__PURE__ */ Uint32Array.from([\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\n]);\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\nexport const SHA384_IV = /* @__PURE__ */ Uint32Array.from([\n    0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\n]);\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\nexport const SHA512_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\n]);\n//# sourceMappingURL=_md.js.map","/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj, SHA224_IV, SHA256_IV, SHA384_IV, SHA512_IV } from \"./_md.js\";\nimport * as u64 from \"./_u64.js\";\nimport { clean, createHasher, rotr } from \"./utils.js\";\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD {\n    constructor(outputLen = 32) {\n        super(64, outputLen, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        clean(SHA256_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        clean(this.buffer);\n    }\n}\nexport class SHA224 extends SHA256 {\n    constructor() {\n        super(28);\n        this.A = SHA224_IV[0] | 0;\n        this.B = SHA224_IV[1] | 0;\n        this.C = SHA224_IV[2] | 0;\n        this.D = SHA224_IV[3] | 0;\n        this.E = SHA224_IV[4] | 0;\n        this.F = SHA224_IV[5] | 0;\n        this.G = SHA224_IV[6] | 0;\n        this.H = SHA224_IV[7] | 0;\n    }\n}\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor(outputLen = 64) {\n        super(128, outputLen, 16, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = SHA512_IV[0] | 0;\n        this.Al = SHA512_IV[1] | 0;\n        this.Bh = SHA512_IV[2] | 0;\n        this.Bl = SHA512_IV[3] | 0;\n        this.Ch = SHA512_IV[4] | 0;\n        this.Cl = SHA512_IV[5] | 0;\n        this.Dh = SHA512_IV[6] | 0;\n        this.Dl = SHA512_IV[7] | 0;\n        this.Eh = SHA512_IV[8] | 0;\n        this.El = SHA512_IV[9] | 0;\n        this.Fh = SHA512_IV[10] | 0;\n        this.Fl = SHA512_IV[11] | 0;\n        this.Gh = SHA512_IV[12] | 0;\n        this.Gl = SHA512_IV[13] | 0;\n        this.Hh = SHA512_IV[14] | 0;\n        this.Hl = SHA512_IV[15] | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        clean(SHA512_W_H, SHA512_W_L);\n    }\n    destroy() {\n        clean(this.buffer);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexport class SHA384 extends SHA512 {\n    constructor() {\n        super(48);\n        this.Ah = SHA384_IV[0] | 0;\n        this.Al = SHA384_IV[1] | 0;\n        this.Bh = SHA384_IV[2] | 0;\n        this.Bl = SHA384_IV[3] | 0;\n        this.Ch = SHA384_IV[4] | 0;\n        this.Cl = SHA384_IV[5] | 0;\n        this.Dh = SHA384_IV[6] | 0;\n        this.Dl = SHA384_IV[7] | 0;\n        this.Eh = SHA384_IV[8] | 0;\n        this.El = SHA384_IV[9] | 0;\n        this.Fh = SHA384_IV[10] | 0;\n        this.Fl = SHA384_IV[11] | 0;\n        this.Gh = SHA384_IV[12] | 0;\n        this.Gl = SHA384_IV[13] | 0;\n        this.Hh = SHA384_IV[14] | 0;\n        this.Hl = SHA384_IV[15] | 0;\n    }\n}\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */\n/** SHA512/224 IV */\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\n    0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\n    0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\n]);\n/** SHA512/256 IV */\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\n    0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\n]);\nexport class SHA512_224 extends SHA512 {\n    constructor() {\n        super(28);\n        this.Ah = T224_IV[0] | 0;\n        this.Al = T224_IV[1] | 0;\n        this.Bh = T224_IV[2] | 0;\n        this.Bl = T224_IV[3] | 0;\n        this.Ch = T224_IV[4] | 0;\n        this.Cl = T224_IV[5] | 0;\n        this.Dh = T224_IV[6] | 0;\n        this.Dl = T224_IV[7] | 0;\n        this.Eh = T224_IV[8] | 0;\n        this.El = T224_IV[9] | 0;\n        this.Fh = T224_IV[10] | 0;\n        this.Fl = T224_IV[11] | 0;\n        this.Gh = T224_IV[12] | 0;\n        this.Gl = T224_IV[13] | 0;\n        this.Hh = T224_IV[14] | 0;\n        this.Hl = T224_IV[15] | 0;\n    }\n}\nexport class SHA512_256 extends SHA512 {\n    constructor() {\n        super(32);\n        this.Ah = T256_IV[0] | 0;\n        this.Al = T256_IV[1] | 0;\n        this.Bh = T256_IV[2] | 0;\n        this.Bl = T256_IV[3] | 0;\n        this.Ch = T256_IV[4] | 0;\n        this.Cl = T256_IV[5] | 0;\n        this.Dh = T256_IV[6] | 0;\n        this.Dl = T256_IV[7] | 0;\n        this.Eh = T256_IV[8] | 0;\n        this.El = T256_IV[9] | 0;\n        this.Fh = T256_IV[10] | 0;\n        this.Fl = T256_IV[11] | 0;\n        this.Gh = T256_IV[12] | 0;\n        this.Gl = T256_IV[13] | 0;\n        this.Hh = T256_IV[14] | 0;\n        this.Hl = T256_IV[15] | 0;\n    }\n}\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */\nexport const sha256 = /* @__PURE__ */ createHasher(() => new SHA256());\n/** SHA2-224 hash function from RFC 4634 */\nexport const sha224 = /* @__PURE__ */ createHasher(() => new SHA224());\n/** SHA2-512 hash function from RFC 4634. */\nexport const sha512 = /* @__PURE__ */ createHasher(() => new SHA512());\n/** SHA2-384 hash function from RFC 4634. */\nexport const sha384 = /* @__PURE__ */ createHasher(() => new SHA384());\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_256 = /* @__PURE__ */ createHasher(() => new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_224 = /* @__PURE__ */ createHasher(() => new SHA512_224());\n//# sourceMappingURL=sha2.js.map","/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes } from \"./utils.js\";\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        clean(pad);\n    }\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\nexport function abool(title, value) {\n    if (typeof value !== 'boolean')\n        throw new Error(title + ' boolean expected, got ' + value);\n}\n// Used in weierstrass, der\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? '0' + hex : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin = \n// @ts-ignore\ntypeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function';\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return bytes.toHex();\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return Uint8Array.fromHex(hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(title + ' must be hex string or Uint8Array');\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Is positive bigint\nconst isPosBig = (n) => typeof n === 'bigint' && _0n <= n;\nexport function inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max))\n        throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n * TODO: merge with nLength in modular\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_1n << BigInt(n)) - _1n;\n// DRBG\nconst u8n = (len) => new Uint8Array(len); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n(0)) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error('invalid validator function');\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n    throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args) => {\n        const val = map.get(arg);\n        if (val !== undefined)\n            return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n}\n//# sourceMappingURL=utils.js.map","/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { anumber } from '@noble/hashes/utils';\nimport { bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, validateObject, } from \"./utils.js\";\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * TODO: remove.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num, power, modulo) {\n    return FpPow(Field(modulo), num, power);\n}\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number, modulo) {\n    if (number === _0n)\n        throw new Error('invert: expected non-zero number');\n    if (modulo <= _0n)\n        throw new Error('invert: expected positive modulus, got ' + modulo);\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4(Fp, n) {\n    const p1div4 = (Fp.ORDER + _1n) / _4n;\n    const root = Fp.pow(n, p1div4);\n    // Throw if root^2 != n\n    if (!Fp.eql(Fp.sqr(root), n))\n        throw new Error('Cannot find square root');\n    return root;\n}\nfunction sqrt5mod8(Fp, n) {\n    const p5div8 = (Fp.ORDER - _5n) / _8n;\n    const n2 = Fp.mul(n, _2n);\n    const v = Fp.pow(n2, p5div8);\n    const nv = Fp.mul(n, v);\n    const i = Fp.mul(Fp.mul(nv, _2n), v);\n    const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n    if (!Fp.eql(Fp.sqr(root), n))\n        throw new Error('Cannot find square root');\n    return root;\n}\n// TODO: Commented-out for now. Provide test vectors.\n// Tonelli is too slow for extension fields Fp2.\n// That means we can't use sqrt (c1, c2...) even for initialization constants.\n// if (P % _16n === _9n) return sqrt9mod16;\n// // prettier-ignore\n// function sqrt9mod16<T>(Fp: IField<T>, n: T, p7div16?: bigint) {\n//   if (p7div16 === undefined) p7div16 = (Fp.ORDER + BigInt(7)) / _16n;\n//   const c1 = Fp.sqrt(Fp.neg(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n//   const c2 = Fp.sqrt(c1);             //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n//   const c3 = Fp.sqrt(Fp.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n//   const c4 = p7div16;                 //  4. c4 = (q + 7) / 16        # Integer arithmetic\n//   let tv1 = Fp.pow(n, c4);            //  1. tv1 = x^c4\n//   let tv2 = Fp.mul(c1, tv1);          //  2. tv2 = c1 * tv1\n//   const tv3 = Fp.mul(c2, tv1);        //  3. tv3 = c2 * tv1\n//   let tv4 = Fp.mul(c3, tv1);          //  4. tv4 = c3 * tv1\n//   const e1 = Fp.eql(Fp.sqr(tv2), n);  //  5.  e1 = (tv2^2) == x\n//   const e2 = Fp.eql(Fp.sqr(tv3), n);  //  6.  e2 = (tv3^2) == x\n//   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n//   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n//   const e3 = Fp.eql(Fp.sqr(tv2), n);  //  9.  e3 = (tv2^2) == x\n//   return Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3) # Select the sqrt from tv1 and tv2\n// }\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Initialization (precomputation).\n    if (P < BigInt(3))\n        throw new Error('sqrt is not defined for small field');\n    // Factor P - 1 = Q * 2^S, where Q is odd\n    let Q = P - _1n;\n    let S = 0;\n    while (Q % _2n === _0n) {\n        Q /= _2n;\n        S++;\n    }\n    // Find the first quadratic non-residue Z >= 2\n    let Z = _2n;\n    const _Fp = Field(P);\n    while (FpLegendre(_Fp, Z) === 1) {\n        // Basic primality test for P. After x iterations, chance of\n        // not finding quadratic non-residue is 2^x, so 2^1000.\n        if (Z++ > 1000)\n            throw new Error('Cannot find square root: probably non-prime P');\n    }\n    // Fast-path; usually done before Z, but we do \"primality test\".\n    if (S === 1)\n        return sqrt3mod4;\n    // Slow-path\n    // TODO: test on Fp2 and others\n    let cc = _Fp.pow(Z, Q); // c = z^Q\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        if (Fp.is0(n))\n            return n;\n        // Check if n is a quadratic residue using Legendre symbol\n        if (FpLegendre(Fp, n) !== 1)\n            throw new Error('Cannot find square root');\n        // Initialize variables for the main loop\n        let M = S;\n        let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n        let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n        let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n        // Main loop\n        // while t != 1\n        while (!Fp.eql(t, Fp.ONE)) {\n            if (Fp.is0(t))\n                return Fp.ZERO; // if t=0 return R=0\n            let i = 1;\n            // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n            let t_tmp = Fp.sqr(t); // t^(2^1)\n            while (!Fp.eql(t_tmp, Fp.ONE)) {\n                i++;\n                t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n                if (i === M)\n                    throw new Error('Cannot find square root');\n            }\n            // Calculate the exponent for b: 2^(M - i - 1)\n            const exponent = _1n << BigInt(M - i - 1); // bigint is important\n            const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n            // Update variables\n            M = i;\n            c = Fp.sqr(b); // c = b^2\n            t = Fp.mul(t, c); // t = (t * b^2)\n            R = Fp.mul(R, b); // R = R*b\n        }\n        return R;\n    };\n}\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P) {\n    // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n    if (P % _4n === _3n)\n        return sqrt3mod4;\n    // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n    if (P % _8n === _5n)\n        return sqrt5mod8;\n    // P ≡ 9 (mod 16) not implemented, see above\n    // Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(Fp, num, power) {\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (power === _0n)\n        return Fp.ONE;\n    if (power === _1n)\n        return num;\n    let p = Fp.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = Fp.mul(p, d);\n        d = Fp.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nexport function FpInvertBatch(Fp, nums, passZero = false) {\n    const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n    // Walk from first to last, multiply them by each other MOD p\n    const multipliedAcc = nums.reduce((acc, num, i) => {\n        if (Fp.is0(num))\n            return acc;\n        inverted[i] = acc;\n        return Fp.mul(acc, num);\n    }, Fp.ONE);\n    // Invert last element\n    const invertedAcc = Fp.inv(multipliedAcc);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (Fp.is0(num))\n            return acc;\n        inverted[i] = Fp.mul(acc, inverted[i]);\n        return Fp.mul(acc, num);\n    }, invertedAcc);\n    return inverted;\n}\n// TODO: remove\nexport function FpDiv(Fp, lhs, rhs) {\n    return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(Fp, n) {\n    // We can use 3rd argument as optional cache of this value\n    // but seems unneeded for now. The operation is very fast.\n    const p1mod2 = (Fp.ORDER - _1n) / _2n;\n    const powered = Fp.pow(n, p1mod2);\n    const yes = Fp.eql(powered, Fp.ONE);\n    const zero = Fp.eql(powered, Fp.ZERO);\n    const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n    if (!yes && !zero && !no)\n        throw new Error('invalid Legendre symbol result');\n    return yes ? 1 : zero ? 0 : -1;\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(Fp, n) {\n    const l = FpLegendre(Fp, n);\n    return l === 1;\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    if (nBitLength !== undefined)\n        anumber(nBitLength);\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n    let sqrtP; // cached sqrtP\n    const f = Object.freeze({\n        ORDER,\n        isLE,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error('invalid field element: expected bigint, got ' + typeof num);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt ||\n            ((n) => {\n                if (!sqrtP)\n                    sqrtP = FpSqrt(ORDER);\n                return sqrtP(f, n);\n            }),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n        // TODO: we don't need it here, move out to separate fn\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // We can't move this out because Fp6, Fp12 implement it\n        // and it's unclear what to return in there.\n        cmov: (a, b, c) => (c ? b : a),\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n    const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { nLength, validateField } from \"./modular.js\";\nimport { bitLen, bitMask, validateObject } from \"./utils.js\";\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n        throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\nfunction calcWOpts(W, scalarBits) {\n    validateW(W, scalarBits);\n    const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n    const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n    const maxNumber = 2 ** W; // W=8 256\n    const mask = bitMask(W); // W=8 255 == mask 0b11111111\n    const shiftBy = BigInt(W); // W=8 8\n    return { windows, windowSize, mask, maxNumber, shiftBy };\n}\nfunction calcOffsets(n, window, wOpts) {\n    const { windowSize, mask, maxNumber, shiftBy } = wOpts;\n    let wbits = Number(n & mask); // extract W bits.\n    let nextN = n >> shiftBy; // shift number by W bits.\n    // What actually happens here:\n    // const highestBit = Number(mask ^ (mask >> 1n));\n    // let wbits2 = wbits - 1; // skip zero\n    // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n    // split if bits > max: +224 => 256-32\n    if (wbits > windowSize) {\n        // we skip zero, which means instead of `>= size-1`, we do `> size`\n        wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n        nextN += _1n; // +256 (carry)\n    }\n    const offsetStart = window * windowSize;\n    const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n    const isZero = wbits === 0; // is current window slice a 0?\n    const isNeg = wbits < 0; // is current window slice negative?\n    const isNegF = window % 2 !== 0; // fake random statement for noise\n    const offsetF = offsetStart; // fake offset for noise\n    return { nextN, offset, isZero, isNeg, isNegF, offsetF };\n}\nfunction validateMSMPoints(points, c) {\n    if (!Array.isArray(points))\n        throw new Error('array expected');\n    points.forEach((p, i) => {\n        if (!(p instanceof c))\n            throw new Error('invalid point at index ' + i);\n    });\n}\nfunction validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars))\n        throw new Error('array of scalars expected');\n    scalars.forEach((s, i) => {\n        if (!field.isValid(s))\n            throw new Error('invalid scalar at index ' + i);\n    });\n}\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes.\n// Allows to make points frozen / immutable.\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap();\nfunction getW(P) {\n    return pointWindowSizes.get(P) || 1;\n}\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF(c, bits) {\n    return {\n        constTimeNegate,\n        hasPrecomputes(elm) {\n            return getW(elm) !== 1;\n        },\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n, p = c.ZERO) {\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @param elm Point instance\n         * @param W window size\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // i=1, bc we skip 0\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // Smaller version:\n            // https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n            // TODO: check the scalar is less than group order?\n            // wNAF behavior is undefined otherwise. But have to carefully remove\n            // other checks before wNAF. ORDER == bits here.\n            // Accumulators\n            let p = c.ZERO;\n            let f = c.BASE;\n            // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n            // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n            // there is negate now: it is possible that negated element from low value\n            // would be the same as high element, which will create carry into next window.\n            // It's not obvious how this can fail, but still worth investigating later.\n            const wo = calcWOpts(W, bits);\n            for (let window = 0; window < wo.windows; window++) {\n                // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n                const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\n                n = nextN;\n                if (isZero) {\n                    // bits are 0: add garbage to fake point\n                    // Important part for const-time getPublicKey: add random \"noise\" point to f.\n                    f = f.add(constTimeNegate(isNegF, precomputes[offsetF]));\n                }\n                else {\n                    // bits are 1: add to result point\n                    p = p.add(constTimeNegate(isNeg, precomputes[offset]));\n                }\n            }\n            // Return both real and fake points: JIT won't eliminate f.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        /**\n         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @param acc accumulator point to add result of multiplication\n         * @returns point\n         */\n        wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {\n            const wo = calcWOpts(W, bits);\n            for (let window = 0; window < wo.windows; window++) {\n                if (n === _0n)\n                    break; // Early-exit, skip 0 value\n                const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\n                n = nextN;\n                if (isZero) {\n                    // Window bits are 0: skip processing.\n                    // Move to next window.\n                    continue;\n                }\n                else {\n                    const item = precomputes[offset];\n                    acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n                }\n            }\n            return acc;\n        },\n        getPrecomputes(W, P, transform) {\n            // Calculate precomputes on a first run, reuse them after\n            let comp = pointPrecomputes.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1)\n                    pointPrecomputes.set(P, transform(comp));\n            }\n            return comp;\n        },\n        wNAFCached(P, n, transform) {\n            const W = getW(P);\n            return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n        },\n        wNAFCachedUnsafe(P, n, transform, prev) {\n            const W = getW(P);\n            if (W === 1)\n                return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n            return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n        },\n        // We calculate precomputes for elliptic curve point multiplication\n        // using windowed method. This specifies window size and\n        // stores precomputed values. Usually only base point would be precomputed.\n        setWindowSize(P, W) {\n            validateW(W, bits);\n            pointWindowSizes.set(P, W);\n            pointPrecomputes.delete(P);\n        },\n    };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    const plength = points.length;\n    const slength = scalars.length;\n    if (plength !== slength)\n        throw new Error('arrays of points and scalars must have equal length');\n    // if (plength === 0) throw new Error('array must be of length >= 2');\n    const zero = c.ZERO;\n    const wbits = bitLen(BigInt(plength));\n    let windowSize = 1; // bits\n    if (wbits > 12)\n        windowSize = wbits - 3;\n    else if (wbits > 4)\n        windowSize = wbits - 2;\n    else if (wbits > 0)\n        windowSize = 2;\n    const MASK = bitMask(windowSize);\n    const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    let sum = zero;\n    for (let i = lastBits; i >= 0; i -= windowSize) {\n        buckets.fill(zero);\n        for (let j = 0; j < slength; j++) {\n            const scalar = scalars[j];\n            const wbits = Number((scalar >> BigInt(i)) & MASK);\n            buckets[wbits] = buckets[wbits].add(points[j]);\n        }\n        let resI = zero; // not using this will do small speed-up, but will lose ct\n        // Skip first bucket, because it is zero\n        for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n            sumI = sumI.add(buckets[j]);\n            resI = resI.add(sumI);\n        }\n        sum = sum.add(resI);\n        if (i !== 0)\n            for (let j = 0; j < windowSize; j++)\n                sum = sum.double();\n    }\n    return sum;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar × 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 × 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */\n    validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    const zero = c.ZERO;\n    const tableSize = 2 ** windowSize - 1; // table size (without zero)\n    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    const MASK = bitMask(windowSize);\n    const tables = points.map((p) => {\n        const res = [];\n        for (let i = 0, acc = p; i < tableSize; i++) {\n            res.push(acc);\n            acc = acc.add(p);\n        }\n        return res;\n    });\n    return (scalars) => {\n        validateMSMScalars(scalars, fieldN);\n        if (scalars.length > points.length)\n            throw new Error('array of scalars must be smaller than array of points');\n        let res = zero;\n        for (let i = 0; i < chunks; i++) {\n            // No need to double if accumulator is still zero.\n            if (res !== zero)\n                for (let j = 0; j < windowSize; j++)\n                    res = res.double();\n            const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n            for (let j = 0; j < scalars.length; j++) {\n                const n = scalars[j];\n                const curr = Number((n >> shiftBy) & MASK);\n                if (!curr)\n                    continue; // skip zero scalars chunks\n                res = res.add(tables[j][curr - 1]);\n            }\n        }\n        return res;\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Parameters\n *\n * To initialize a weierstrass curve, one needs to pass following params:\n *\n * * a: formula param\n * * b: formula param\n * * Fp: finite field of prime characteristic P; may be complex (Fp2). Arithmetics is done in field\n * * n: order of prime subgroup a.k.a total amount of valid curve points\n * * Gx: Base point (x, y) aka generator point. Gx = x coordinate\n * * Gy: ...y coordinate\n * * h: cofactor, usually 1. h*n = curve group order (n is only subgroup order)\n * * lowS: whether to enable (default) or disable \"low-s\" non-malleable signatures\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// prettier-ignore\nimport { pippenger, validateBasic, wNAF } from \"./curve.js\";\n// prettier-ignore\nimport { Field, FpInvertBatch, getMinHashLength, invert, mapHashToField, mod, validateField } from \"./modular.js\";\n// prettier-ignore\nimport { aInRange, abool, bitMask, bytesToHex, bytesToNumberBE, concatBytes, createHmacDrbg, ensureBytes, hexToBytes, inRange, isBytes, memoized, numberToBytesBE, numberToHexUnpadded, validateObject } from \"./utils.js\";\nfunction validateSigVerOpts(opts) {\n    if (opts.lowS !== undefined)\n        abool('lowS', opts.lowS);\n    if (opts.prehash !== undefined)\n        abool('prehash', opts.prehash);\n}\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowInfinityPoint: 'boolean',\n        allowedPrivateKeyLengths: 'array',\n        clearCofactor: 'function',\n        fromBytes: 'function',\n        isTorsionFree: 'function',\n        toBytes: 'function',\n        wrapPrivateKey: 'boolean',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('invalid endo: CURVE.a must be 0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('invalid endo: expected \"beta\": bigint and \"splitScalar\": function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\nexport class DERErr extends Error {\n    constructor(m = '') {\n        super(m);\n    }\n}\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: DERErr,\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n        encode: (tag, data) => {\n            const { Err: E } = DER;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length & 1)\n                throw new E('tlv.encode: unpadded data');\n            const dataLen = data.length / 2;\n            const len = numberToHexUnpadded(dataLen);\n            if ((len.length / 2) & 128)\n                throw new E('tlv.encode: long form length too big');\n            // length of length with long form flag\n            const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 128) : '';\n            const t = numberToHexUnpadded(tag);\n            return t + lenLen + len + data;\n        },\n        // v - value, l - left bytes (unparsed)\n        decode(tag, data) {\n            const { Err: E } = DER;\n            let pos = 0;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length < 2 || data[pos++] !== tag)\n                throw new E('tlv.decode: wrong tlv');\n            const first = data[pos++];\n            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n            let length = 0;\n            if (!isLong)\n                length = first;\n            else {\n                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n                const lenLen = first & 127;\n                if (!lenLen)\n                    throw new E('tlv.decode(long): indefinite length not supported');\n                if (lenLen > 4)\n                    throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n                const lengthBytes = data.subarray(pos, pos + lenLen);\n                if (lengthBytes.length !== lenLen)\n                    throw new E('tlv.decode: length bytes not complete');\n                if (lengthBytes[0] === 0)\n                    throw new E('tlv.decode(long): zero leftmost byte');\n                for (const b of lengthBytes)\n                    length = (length << 8) | b;\n                pos += lenLen;\n                if (length < 128)\n                    throw new E('tlv.decode(long): not minimal encoding');\n            }\n            const v = data.subarray(pos, pos + length);\n            if (v.length !== length)\n                throw new E('tlv.decode: wrong value length');\n            return { v, l: data.subarray(pos + length) };\n        },\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n        encode(num) {\n            const { Err: E } = DER;\n            if (num < _0n)\n                throw new E('integer: negative integers are not allowed');\n            let hex = numberToHexUnpadded(num);\n            // Pad with zero byte if negative flag is present\n            if (Number.parseInt(hex[0], 16) & 0b1000)\n                hex = '00' + hex;\n            if (hex.length & 1)\n                throw new E('unexpected DER parsing assertion: unpadded hex');\n            return hex;\n        },\n        decode(data) {\n            const { Err: E } = DER;\n            if (data[0] & 128)\n                throw new E('invalid signature integer: negative');\n            if (data[0] === 0x00 && !(data[1] & 128))\n                throw new E('invalid signature integer: unnecessary leading zero');\n            return bytesToNumberBE(data);\n        },\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E, _int: int, _tlv: tlv } = DER;\n        const data = ensureBytes('signature', hex);\n        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n        if (seqLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n        if (sLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        return { r: int.decode(rBytes), s: int.decode(sBytes) };\n    },\n    hexFromSig(sig) {\n        const { _tlv: tlv, _int: int } = DER;\n        const rs = tlv.encode(0x02, int.encode(sig.r));\n        const ss = tlv.encode(0x02, int.encode(sig.s));\n        const seq = rs + ss;\n        return tlv.encode(0x30, seq);\n    },\n};\nfunction numToSizedHex(num, size) {\n    return bytesToHex(numberToBytesBE(num, size));\n}\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const Fn = Field(CURVE.n, CURVE.nBitLength);\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x² * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n    }\n    function isValidXY(x, y) {\n        const left = Fp.sqr(y); // y²\n        const right = weierstrassEquation(x); // x³ + ax + b\n        return Fp.eql(left, right);\n    }\n    // Validate whether the passed curve params are valid.\n    // Test 1: equation y² = x³ + ax + b should work for generator point.\n    if (!isValidXY(CURVE.Gx, CURVE.Gy))\n        throw new Error('bad curve params: generator point');\n    // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n    // Guarantees curve is genus-1, smooth (non-singular).\n    const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n    const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n    if (Fp.is0(Fp.add(_4a3, _27b2)))\n        throw new Error('bad curve params: a or b');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return inRange(num, _1n, CURVE.n);\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (isBytes(key))\n                key = bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('invalid private key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error('invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key);\n        }\n        if (wrapPrivateKey)\n            num = mod(num, N); // disabled by default, enabled for BLS\n        aInRange('private key', num, _1n, N); // num in range [1..N-1]\n        return num;\n    }\n    function aprjpoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n    const toAffineMemo = memoized((p, iz) => {\n        const { px: x, py: y, pz: z } = p;\n        // Fast-path for normalized points\n        if (Fp.eql(z, Fp.ONE))\n            return { x, y };\n        const is0 = p.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null)\n            iz = is0 ? Fp.ONE : Fp.inv(z);\n        const ax = Fp.mul(x, iz);\n        const ay = Fp.mul(y, iz);\n        const zz = Fp.mul(z, iz);\n        if (is0)\n            return { x: Fp.ZERO, y: Fp.ZERO };\n        if (!Fp.eql(zz, Fp.ONE))\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = memoized((p) => {\n        if (p.is0()) {\n            // (0, 1, 0) aka ZERO is invalid in most contexts.\n            // In BLS, ZERO can be serialized, so we allow it.\n            // (0, 0, 0) is invalid representation of ZERO.\n            if (CURVE.allowInfinityPoint && !Fp.is0(p.py))\n                return;\n            throw new Error('bad point: ZERO');\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        const { x, y } = p.toAffine();\n        // Check if x, y are valid field elements\n        if (!Fp.isValid(x) || !Fp.isValid(y))\n            throw new Error('bad point: x or y not FE');\n        if (!isValidXY(x, y))\n            throw new Error('bad point: equation left != right');\n        if (!p.isTorsionFree())\n            throw new Error('bad point: not in prime-order subgroup');\n        return true;\n    });\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py) || Fp.is0(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            Object.freeze(this);\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = FpInvertBatch(Fp, points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // Multiscalar Multiplication\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            wnaf.setWindowSize(this, windowSize);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            aprjpoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            aprjpoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, n, Point.normalizeZ);\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(sc) {\n            const { endo, n: N } = CURVE;\n            aInRange('scalar', sc, _0n, N);\n            const I = Point.ZERO;\n            if (sc === _0n)\n                return I;\n            if (this.is0() || sc === _1n)\n                return this;\n            // Case a: no endomorphism. Case b: has precomputes.\n            if (!endo || wnaf.hasPrecomputes(this))\n                return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n            // Case c: endomorphism\n            /** See docs for {@link EndomorphismOpts} */\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            const { endo, n: N } = CURVE;\n            aInRange('scalar', scalar, _1n, N);\n            let point, fake; // Fake point is used to const-time mult\n            /** See docs for {@link EndomorphismOpts} */\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(scalar);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            return toAffineMemo(this, iz);\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            return bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    // base / generator point\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    const { endo, nBitLength } = CURVE;\n    const wnaf = wNAF(Point, endo ? Math.ceil(nBitLength / 2) : nBitLength);\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER, nByteLength, nBitLength } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = concatBytes;\n            abool('isCompressed', isCompressed);\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = bytesToNumberBE(tail);\n                if (!inRange(x, _1n, Fp.ORDER))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                const cl = compressedLen;\n                const ul = uncompressedLen;\n                throw new Error('invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len);\n            }\n        },\n    });\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            aInRange('r', r, _1n, CURVE_ORDER); // r in [1..N]\n            aInRange('s', s, _1n, CURVE_ORDER); // s in [1..N]\n            this.r = r;\n            this.s = s;\n            if (recovery != null)\n                this.recovery = recovery;\n            Object.freeze(this);\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        /**\n         * @todo remove\n         * @deprecated\n         */\n        assertValidity() { }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToSizedHex(radj, Fp.BYTES));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig(this);\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            const l = nByteLength;\n            return numToSizedHex(this.r, l) + numToSizedHex(this.s, l);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = getMinHashLength(CURVE.n);\n            return mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        if (typeof item === 'bigint')\n            return false;\n        if (item instanceof Point)\n            return true;\n        const arr = ensureBytes('key', item);\n        const len = arr.length;\n        const fpl = Fp.BYTES;\n        const compLen = fpl + 1; // e.g. 33 for 32\n        const uncompLen = 2 * fpl + 1; // e.g. 65 for 32\n        if (CURVE.allowedPrivateKeyLengths || nByteLength === compLen) {\n            return undefined;\n        }\n        else {\n            return len === compLen || len === uncompLen;\n        }\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA) === true)\n            throw new Error('first arg must be private key');\n        if (isProbPub(publicB) === false)\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // Our custom check \"just in case\", for protection against DoS\n            if (bytes.length > 8192)\n                throw new Error('input is too large');\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = bitMask(nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        aInRange('num < 2^' + nBitLength, num, _0n, ORDER_MASK);\n        // works with order, can have different size than numToField!\n        return numberToBytesBE(num, nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n    // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        validateSigVerOpts(opts);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        const { lowS, prehash, format } = opts;\n        // Verify opts, deduce signature format\n        validateSigVerOpts(opts);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        if (format !== undefined && format !== 'compact' && format !== 'der')\n            throw new Error('format must be compact or der');\n        const isHex = typeof sg === 'string' || isBytes(sg);\n        const isObj = !isHex &&\n            !format &&\n            typeof sg === 'object' &&\n            sg !== null &&\n            typeof sg.r === 'bigint' &&\n            typeof sg.s === 'bigint';\n        if (!isHex && !isObj)\n            throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n        let _sig = undefined;\n        let P;\n        try {\n            if (isObj)\n                _sig = new Signature(sg.r, sg.s);\n            if (isHex) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    if (format !== 'compact')\n                        _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                }\n                if (!_sig && format !== 'der')\n                    _sig = Signature.fromCompact(sg);\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            return false;\n        }\n        if (!_sig)\n            return false;\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\n        x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","import { FpInvertBatch, mod } from \"./modular.js\";\nimport { abytes, bytesToNumberBE, concatBytes, utf8ToBytes, validateObject } from \"./utils.js\";\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    anum(value);\n    anum(length);\n    if (value < 0 || value >= 1 << (8 * length))\n        throw new Error('invalid I2OSP input: ' + value);\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction anum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n/**\n * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\n * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\n */\nexport function expand_message_xmd(msg, DST, lenInBytes, H) {\n    abytes(msg);\n    abytes(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255)\n        DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (lenInBytes > 65535 || ell > 255)\n        throw new Error('expand_message_xmd: invalid lenInBytes');\n    const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H(concatBytes(...args));\n    }\n    const pseudo_random_bytes = concatBytes(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n/**\n * Produces a uniformly random byte string using an extendable-output function (XOF) H.\n * 1. The collision resistance of H MUST be at least k bits.\n * 2. H MUST be an XOF that has been proved indifferentiable from\n *    a random oracle under a reasonable cryptographic assumption.\n * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\n */\nexport function expand_message_xof(msg, DST, lenInBytes, k, H) {\n    abytes(msg);\n    abytes(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg, count, options) {\n    validateObject(options, {\n        DST: 'stringOrUint8Array',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    abytes(msg);\n    anum(count);\n    const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === '_internal_pass') {\n        // for internal tests only\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = mod(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nexport function isogenyMap(field, map) {\n    // Make same order as in spec\n    const coeff = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xn, xd, yn, yd] = coeff.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        // 6.6.3\n        // Exceptional cases of iso_map are inputs that cause the denominator of\n        // either rational function to evaluate to zero; such cases MUST return\n        // the identity point on E.\n        const [xd_inv, yd_inv] = FpInvertBatch(field, [xd, yd], true);\n        x = field.mul(xn, xd_inv); // xNum / xDen\n        y = field.mul(y, field.mul(yn, yd_inv)); // y * (yNum / yDev)\n        return { x, y };\n    };\n}\n/** Creates hash-to-curve methods from EC Point and mapToCurve function. */\nexport function createHasher(Point, mapToCurve, defaults) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    function map(num) {\n        return Point.fromAffine(mapToCurve(num));\n    }\n    function clear(initial) {\n        const P = initial.clearCofactor();\n        if (P.equals(Point.ZERO))\n            return Point.ZERO; // zero will throw in assert\n        P.assertValidity();\n        return P;\n    }\n    return {\n        defaults,\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...defaults, DST: defaults.DST, ...options });\n            const u0 = map(u[0]);\n            const u1 = map(u[1]);\n            return clear(u0.add(u1));\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...defaults, DST: defaults.encodeDST, ...options });\n            return clear(map(u[0]));\n        },\n        // Same as encodeToCurve, but without hash\n        mapToCurve(scalars) {\n            if (!Array.isArray(scalars))\n                throw new Error('expected array of bigints');\n            for (const i of scalars)\n                if (typeof i !== 'bigint')\n                    throw new Error('expected array of bigints');\n            return clear(map(scalars));\n        },\n    };\n}\n//# sourceMappingURL=hash-to-curve.js.map","/**\n * BLS (Barreto-Lynn-Scott) family of pairing-friendly curves.\n * BLS != BLS.\n * The file implements BLS (Boneh-Lynn-Shacham) signatures.\n * Used in both BLS (Barreto-Lynn-Scott) and BN (Barreto-Naehrig)\n * families of pairing-friendly curves.\n * Consists of two curves: G1 and G2:\n * - G1 is a subgroup of (x, y) E(Fq) over y² = x³ + 4.\n * - G2 is a subgroup of ((x₁, x₂+i), (y₁, y₂+i)) E(Fq²) over y² = x³ + 4(1 + i) where i is √-1\n * - Gt, created by bilinear (ate) pairing e(G1, G2), consists of p-th roots of unity in\n *   Fq^k where k is embedding degree. Only degree 12 is currently supported, 24 is not.\n * Pairing is used to aggregate and verify signatures.\n * There are two main ways to use it:\n * 1. Fp for short private keys, Fp₂ for signatures\n * 2. Fp for short signatures, Fp₂ for private keys\n * @module\n **/\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// TODO: import { AffinePoint } from './curve.ts';\nimport { createHasher, } from \"./hash-to-curve.js\";\nimport { getMinHashLength, mapHashToField } from \"./modular.js\";\nimport { ensureBytes, memoized } from \"./utils.js\";\nimport { weierstrassPoints, } from \"./weierstrass.js\";\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// Not used with BLS12-381 (no sequential `11` in X). Useful for other curves.\nfunction NAfDecomposition(a) {\n    const res = [];\n    // a>1 because of marker bit\n    for (; a > _1n; a >>= _1n) {\n        if ((a & _1n) === _0n)\n            res.unshift(0);\n        else if ((a & _3n) === _3n) {\n            res.unshift(-1);\n            a += _1n;\n        }\n        else\n            res.unshift(1);\n    }\n    return res;\n}\nexport function bls(CURVE) {\n    // Fields are specific for curve, so for now we'll need to pass them with opts\n    const { Fp, Fr, Fp2, Fp6, Fp12 } = CURVE.fields;\n    const BLS_X_IS_NEGATIVE = CURVE.params.xNegative;\n    const TWIST = CURVE.params.twistType;\n    // Point on G1 curve: (x, y)\n    const G1_ = weierstrassPoints({ n: Fr.ORDER, ...CURVE.G1 });\n    const G1 = Object.assign(G1_, createHasher(G1_.ProjectivePoint, CURVE.G1.mapToCurve, {\n        ...CURVE.htfDefaults,\n        ...CURVE.G1.htfDefaults,\n    }));\n    // Point on G2 curve (complex numbers): (x₁, x₂+i), (y₁, y₂+i)\n    const G2_ = weierstrassPoints({ n: Fr.ORDER, ...CURVE.G2 });\n    const G2 = Object.assign(G2_, createHasher(G2_.ProjectivePoint, CURVE.G2.mapToCurve, {\n        ...CURVE.htfDefaults,\n        ...CURVE.G2.htfDefaults,\n    }));\n    // Applies sparse multiplication as line function\n    let lineFunction;\n    if (TWIST === 'multiplicative') {\n        lineFunction = (c0, c1, c2, f, Px, Py) => Fp12.mul014(f, c0, Fp2.mul(c1, Px), Fp2.mul(c2, Py));\n    }\n    else if (TWIST === 'divisive') {\n        // NOTE: it should be [c0, c1, c2], but we use different order here to reduce complexity of\n        // precompute calculations.\n        lineFunction = (c0, c1, c2, f, Px, Py) => Fp12.mul034(f, Fp2.mul(c2, Py), Fp2.mul(c1, Px), c0);\n    }\n    else\n        throw new Error('bls: unknown twist type');\n    const Fp2div2 = Fp2.div(Fp2.ONE, Fp2.mul(Fp2.ONE, _2n));\n    function pointDouble(ell, Rx, Ry, Rz) {\n        const t0 = Fp2.sqr(Ry); // Ry²\n        const t1 = Fp2.sqr(Rz); // Rz²\n        const t2 = Fp2.mulByB(Fp2.mul(t1, _3n)); // 3 * T1 * B\n        const t3 = Fp2.mul(t2, _3n); // 3 * T2\n        const t4 = Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(Ry, Rz)), t1), t0); // (Ry + Rz)² - T1 - T0\n        const c0 = Fp2.sub(t2, t0); // T2 - T0 (i)\n        const c1 = Fp2.mul(Fp2.sqr(Rx), _3n); // 3 * Rx²\n        const c2 = Fp2.neg(t4); // -T4 (-h)\n        ell.push([c0, c1, c2]);\n        Rx = Fp2.mul(Fp2.mul(Fp2.mul(Fp2.sub(t0, t3), Rx), Ry), Fp2div2); // ((T0 - T3) * Rx * Ry) / 2\n        Ry = Fp2.sub(Fp2.sqr(Fp2.mul(Fp2.add(t0, t3), Fp2div2)), Fp2.mul(Fp2.sqr(t2), _3n)); // ((T0 + T3) / 2)² - 3 * T2²\n        Rz = Fp2.mul(t0, t4); // T0 * T4\n        return { Rx, Ry, Rz };\n    }\n    function pointAdd(ell, Rx, Ry, Rz, Qx, Qy) {\n        // Addition\n        const t0 = Fp2.sub(Ry, Fp2.mul(Qy, Rz)); // Ry - Qy * Rz\n        const t1 = Fp2.sub(Rx, Fp2.mul(Qx, Rz)); // Rx - Qx * Rz\n        const c0 = Fp2.sub(Fp2.mul(t0, Qx), Fp2.mul(t1, Qy)); // T0 * Qx - T1 * Qy == Ry * Qx  - Rx * Qy\n        const c1 = Fp2.neg(t0); // -T0 == Qy * Rz - Ry\n        const c2 = t1; // == Rx - Qx * Rz\n        ell.push([c0, c1, c2]);\n        const t2 = Fp2.sqr(t1); // T1²\n        const t3 = Fp2.mul(t2, t1); // T2 * T1\n        const t4 = Fp2.mul(t2, Rx); // T2 * Rx\n        const t5 = Fp2.add(Fp2.sub(t3, Fp2.mul(t4, _2n)), Fp2.mul(Fp2.sqr(t0), Rz)); // T3 - 2 * T4 + T0² * Rz\n        Rx = Fp2.mul(t1, t5); // T1 * T5\n        Ry = Fp2.sub(Fp2.mul(Fp2.sub(t4, t5), t0), Fp2.mul(t3, Ry)); // (T4 - T5) * T0 - T3 * Ry\n        Rz = Fp2.mul(Rz, t3); // Rz * T3\n        return { Rx, Ry, Rz };\n    }\n    // Pre-compute coefficients for sparse multiplication\n    // Point addition and point double calculations is reused for coefficients\n    // pointAdd happens only if bit set, so wNAF is reasonable. Unfortunately we cannot combine\n    // add + double in windowed precomputes here, otherwise it would be single op (since X is static)\n    const ATE_NAF = NAfDecomposition(CURVE.params.ateLoopSize);\n    const calcPairingPrecomputes = memoized((point) => {\n        const p = point;\n        const { x, y } = p.toAffine();\n        // prettier-ignore\n        const Qx = x, Qy = y, negQy = Fp2.neg(y);\n        // prettier-ignore\n        let Rx = Qx, Ry = Qy, Rz = Fp2.ONE;\n        const ell = [];\n        for (const bit of ATE_NAF) {\n            const cur = [];\n            ({ Rx, Ry, Rz } = pointDouble(cur, Rx, Ry, Rz));\n            if (bit)\n                ({ Rx, Ry, Rz } = pointAdd(cur, Rx, Ry, Rz, Qx, bit === -1 ? negQy : Qy));\n            ell.push(cur);\n        }\n        if (CURVE.postPrecompute) {\n            const last = ell[ell.length - 1];\n            CURVE.postPrecompute(Rx, Ry, Rz, Qx, Qy, pointAdd.bind(null, last));\n        }\n        return ell;\n    });\n    function millerLoopBatch(pairs, withFinalExponent = false) {\n        let f12 = Fp12.ONE;\n        if (pairs.length) {\n            const ellLen = pairs[0][0].length;\n            for (let i = 0; i < ellLen; i++) {\n                f12 = Fp12.sqr(f12); // This allows us to do sqr only one time for all pairings\n                // NOTE: we apply multiple pairings in parallel here\n                for (const [ell, Px, Py] of pairs) {\n                    for (const [c0, c1, c2] of ell[i])\n                        f12 = lineFunction(c0, c1, c2, f12, Px, Py);\n                }\n            }\n        }\n        if (BLS_X_IS_NEGATIVE)\n            f12 = Fp12.conjugate(f12);\n        return withFinalExponent ? Fp12.finalExponentiate(f12) : f12;\n    }\n    // Calculates product of multiple pairings\n    // This up to x2 faster than just `map(({g1, g2})=>pairing({g1,g2}))`\n    function pairingBatch(pairs, withFinalExponent = true) {\n        const res = [];\n        // Cache precomputed toAffine for all points\n        G1.ProjectivePoint.normalizeZ(pairs.map(({ g1 }) => g1));\n        G2.ProjectivePoint.normalizeZ(pairs.map(({ g2 }) => g2));\n        for (const { g1, g2 } of pairs) {\n            if (g1.equals(G1.ProjectivePoint.ZERO) || g2.equals(G2.ProjectivePoint.ZERO))\n                throw new Error('pairing is not available for ZERO point');\n            // This uses toAffine inside\n            g1.assertValidity();\n            g2.assertValidity();\n            const Qa = g1.toAffine();\n            res.push([calcPairingPrecomputes(g2), Qa.x, Qa.y]);\n        }\n        return millerLoopBatch(res, withFinalExponent);\n    }\n    // Calculates bilinear pairing\n    function pairing(Q, P, withFinalExponent = true) {\n        return pairingBatch([{ g1: Q, g2: P }], withFinalExponent);\n    }\n    const utils = {\n        randomPrivateKey: () => {\n            const length = getMinHashLength(Fr.ORDER);\n            return mapHashToField(CURVE.randomBytes(length), Fr.ORDER);\n        },\n        calcPairingPrecomputes,\n    };\n    const { ShortSignature } = CURVE.G1;\n    const { Signature } = CURVE.G2;\n    function normP1(point) {\n        return point instanceof G1.ProjectivePoint ? point : G1.ProjectivePoint.fromHex(point);\n    }\n    function normP1Hash(point, htfOpts) {\n        return point instanceof G1.ProjectivePoint\n            ? point\n            : G1.hashToCurve(ensureBytes('point', point), htfOpts);\n    }\n    function normP2(point) {\n        return point instanceof G2.ProjectivePoint ? point : Signature.fromHex(point);\n    }\n    function normP2Hash(point, htfOpts) {\n        return point instanceof G2.ProjectivePoint\n            ? point\n            : G2.hashToCurve(ensureBytes('point', point), htfOpts);\n    }\n    // Multiplies generator (G1) by private key.\n    // P = pk x G\n    function getPublicKey(privateKey) {\n        return G1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(true);\n    }\n    // Multiplies generator (G2) by private key.\n    // P = pk x G\n    function getPublicKeyForShortSignatures(privateKey) {\n        return G2.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(true);\n    }\n    function sign(message, privateKey, htfOpts) {\n        const msgPoint = normP2Hash(message, htfOpts);\n        msgPoint.assertValidity();\n        const sigPoint = msgPoint.multiply(G1.normPrivateKeyToScalar(privateKey));\n        if (message instanceof G2.ProjectivePoint)\n            return sigPoint;\n        return Signature.toRawBytes(sigPoint);\n    }\n    function signShortSignature(message, privateKey, htfOpts) {\n        const msgPoint = normP1Hash(message, htfOpts);\n        msgPoint.assertValidity();\n        const sigPoint = msgPoint.multiply(G1.normPrivateKeyToScalar(privateKey));\n        if (message instanceof G1.ProjectivePoint)\n            return sigPoint;\n        return ShortSignature.toRawBytes(sigPoint);\n    }\n    // Checks if pairing of public key & hash is equal to pairing of generator & signature.\n    // e(P, H(m)) == e(G, S)\n    function verify(signature, message, publicKey, htfOpts) {\n        const P = normP1(publicKey);\n        const Hm = normP2Hash(message, htfOpts);\n        const G = G1.ProjectivePoint.BASE;\n        const S = normP2(signature);\n        const exp = pairingBatch([\n            { g1: P.negate(), g2: Hm }, // ePHM = pairing(P.negate(), Hm, false);\n            { g1: G, g2: S }, // eGS = pairing(G, S, false);\n        ]);\n        return Fp12.eql(exp, Fp12.ONE);\n    }\n    // Checks if pairing of public key & hash is equal to pairing of generator & signature.\n    // e(S, G) == e(H(m), P)\n    function verifyShortSignature(signature, message, publicKey, htfOpts) {\n        const P = normP2(publicKey);\n        const Hm = normP1Hash(message, htfOpts);\n        const G = G2.ProjectivePoint.BASE;\n        const S = normP1(signature);\n        const exp = pairingBatch([\n            { g1: Hm, g2: P }, // eHmP = pairing(Hm, P, false);\n            { g1: S, g2: G.negate() }, // eSG = pairing(S, G.negate(), false);\n        ]);\n        return Fp12.eql(exp, Fp12.ONE);\n    }\n    function aNonEmpty(arr) {\n        if (!Array.isArray(arr) || arr.length === 0)\n            throw new Error('expected non-empty array');\n    }\n    function aggregatePublicKeys(publicKeys) {\n        aNonEmpty(publicKeys);\n        const agg = publicKeys.map(normP1).reduce((sum, p) => sum.add(p), G1.ProjectivePoint.ZERO);\n        const aggAffine = agg; //.toAffine();\n        if (publicKeys[0] instanceof G1.ProjectivePoint) {\n            aggAffine.assertValidity();\n            return aggAffine;\n        }\n        // toRawBytes ensures point validity\n        return aggAffine.toRawBytes(true);\n    }\n    function aggregateSignatures(signatures) {\n        aNonEmpty(signatures);\n        const agg = signatures.map(normP2).reduce((sum, s) => sum.add(s), G2.ProjectivePoint.ZERO);\n        const aggAffine = agg; //.toAffine();\n        if (signatures[0] instanceof G2.ProjectivePoint) {\n            aggAffine.assertValidity();\n            return aggAffine;\n        }\n        return Signature.toRawBytes(aggAffine);\n    }\n    function aggregateShortSignatures(signatures) {\n        aNonEmpty(signatures);\n        const agg = signatures.map(normP1).reduce((sum, s) => sum.add(s), G1.ProjectivePoint.ZERO);\n        const aggAffine = agg; //.toAffine();\n        if (signatures[0] instanceof G1.ProjectivePoint) {\n            aggAffine.assertValidity();\n            return aggAffine;\n        }\n        return ShortSignature.toRawBytes(aggAffine);\n    }\n    // https://ethresear.ch/t/fast-verification-of-multiple-bls-signatures/5407\n    // e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))\n    function verifyBatch(signature, \n    // TODO: maybe `{message: G2Hex, publicKey: G1Hex}[]` instead?\n    messages, publicKeys, htfOpts) {\n        aNonEmpty(messages);\n        if (publicKeys.length !== messages.length)\n            throw new Error('amount of public keys and messages should be equal');\n        const sig = normP2(signature);\n        const nMessages = messages.map((i) => normP2Hash(i, htfOpts));\n        const nPublicKeys = publicKeys.map(normP1);\n        // NOTE: this works only for exact same object\n        const messagePubKeyMap = new Map();\n        for (let i = 0; i < nPublicKeys.length; i++) {\n            const pub = nPublicKeys[i];\n            const msg = nMessages[i];\n            let keys = messagePubKeyMap.get(msg);\n            if (keys === undefined) {\n                keys = [];\n                messagePubKeyMap.set(msg, keys);\n            }\n            keys.push(pub);\n        }\n        const paired = [];\n        try {\n            for (const [msg, keys] of messagePubKeyMap) {\n                const groupPublicKey = keys.reduce((acc, msg) => acc.add(msg));\n                paired.push({ g1: groupPublicKey, g2: msg });\n            }\n            paired.push({ g1: G1.ProjectivePoint.BASE.negate(), g2: sig });\n            return Fp12.eql(pairingBatch(paired), Fp12.ONE);\n        }\n        catch {\n            return false;\n        }\n    }\n    G1.ProjectivePoint.BASE._setWindowSize(4);\n    return {\n        getPublicKey,\n        getPublicKeyForShortSignatures,\n        sign,\n        signShortSignature,\n        verify,\n        verifyBatch,\n        verifyShortSignature,\n        aggregatePublicKeys,\n        aggregateSignatures,\n        aggregateShortSignatures,\n        millerLoopBatch,\n        pairing,\n        pairingBatch,\n        G1,\n        G2,\n        Signature,\n        ShortSignature,\n        fields: {\n            Fr,\n            Fp,\n            Fp2,\n            Fp6,\n            Fp12,\n        },\n        params: {\n            ateLoopSize: CURVE.params.ateLoopSize,\n            r: CURVE.params.r,\n            G1b: CURVE.G1.b,\n            G2b: CURVE.G2.b,\n        },\n        utils,\n    };\n}\n//# sourceMappingURL=bls.js.map","/**\n * Towered extension fields.\n * Rather than implementing a massive 12th-degree extension directly, it is more efficient\n * to build it up from smaller extensions: a tower of extensions.\n *\n * For BLS12-381, the Fp12 field is implemented as a quadratic (degree two) extension,\n * on top of a cubic (degree three) extension, on top of a quadratic extension of Fp.\n *\n * For more info: \"Pairings for beginners\" by Costello, section 7.3.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport * as mod from \"./modular.js\";\nimport { bitLen, bitMask, concatBytes, notImplemented } from \"./utils.js\";\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\nfunction calcFrobeniusCoefficients(Fp, nonResidue, modulus, degree, num = 1, divisor) {\n    const _divisor = BigInt(divisor === undefined ? degree : divisor);\n    const towerModulus = modulus ** BigInt(degree);\n    const res = [];\n    for (let i = 0; i < num; i++) {\n        const a = BigInt(i + 1);\n        const powers = [];\n        for (let j = 0, qPower = _1n; j < degree; j++) {\n            const power = ((a * qPower - a) / _divisor) % towerModulus;\n            powers.push(Fp.pow(nonResidue, power));\n            qPower *= modulus;\n        }\n        res.push(powers);\n    }\n    return res;\n}\n// This works same at least for bls12-381, bn254 and bls12-377\nexport function psiFrobenius(Fp, Fp2, base) {\n    // GLV endomorphism Ψ(P)\n    const PSI_X = Fp2.pow(base, (Fp.ORDER - _1n) / _3n); // u^((p-1)/3)\n    const PSI_Y = Fp2.pow(base, (Fp.ORDER - _1n) / _2n); // u^((p-1)/2)\n    function psi(x, y) {\n        // This x10 faster than previous version in bls12-381\n        const x2 = Fp2.mul(Fp2.frobeniusMap(x, 1), PSI_X);\n        const y2 = Fp2.mul(Fp2.frobeniusMap(y, 1), PSI_Y);\n        return [x2, y2];\n    }\n    // Ψ²(P) endomorphism (psi2(x) = psi(psi(x)))\n    const PSI2_X = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _3n); // u^((p^2 - 1)/3)\n    // This equals -1, which causes y to be Fp2.neg(y).\n    // But not sure if there are case when this is not true?\n    const PSI2_Y = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _2n); // u^((p^2 - 1)/3)\n    if (!Fp2.eql(PSI2_Y, Fp2.neg(Fp2.ONE)))\n        throw new Error('psiFrobenius: PSI2_Y!==-1');\n    function psi2(x, y) {\n        return [Fp2.mul(x, PSI2_X), Fp2.neg(y)];\n    }\n    // Map points\n    const mapAffine = (fn) => (c, P) => {\n        const affine = P.toAffine();\n        const p = fn(affine.x, affine.y);\n        return c.fromAffine({ x: p[0], y: p[1] });\n    };\n    const G2psi = mapAffine(psi);\n    const G2psi2 = mapAffine(psi2);\n    return { psi, psi2, G2psi, G2psi2, PSI_X, PSI_Y, PSI2_X, PSI2_Y };\n}\nexport function tower12(opts) {\n    const { ORDER } = opts;\n    // Fp\n    const Fp = mod.Field(ORDER);\n    const FpNONRESIDUE = Fp.create(opts.NONRESIDUE || BigInt(-1));\n    const Fpdiv2 = Fp.div(Fp.ONE, _2n); // 1/2\n    // Fp2\n    const FP2_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp, FpNONRESIDUE, Fp.ORDER, 2)[0];\n    const Fp2Add = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({\n        c0: Fp.add(c0, r0),\n        c1: Fp.add(c1, r1),\n    });\n    const Fp2Subtract = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({\n        c0: Fp.sub(c0, r0),\n        c1: Fp.sub(c1, r1),\n    });\n    const Fp2Multiply = ({ c0, c1 }, rhs) => {\n        if (typeof rhs === 'bigint')\n            return { c0: Fp.mul(c0, rhs), c1: Fp.mul(c1, rhs) };\n        // (a+bi)(c+di) = (ac−bd) + (ad+bc)i\n        const { c0: r0, c1: r1 } = rhs;\n        let t1 = Fp.mul(c0, r0); // c0 * o0\n        let t2 = Fp.mul(c1, r1); // c1 * o1\n        // (T1 - T2) + ((c0 + c1) * (r0 + r1) - (T1 + T2))*i\n        const o0 = Fp.sub(t1, t2);\n        const o1 = Fp.sub(Fp.mul(Fp.add(c0, c1), Fp.add(r0, r1)), Fp.add(t1, t2));\n        return { c0: o0, c1: o1 };\n    };\n    const Fp2Square = ({ c0, c1 }) => {\n        const a = Fp.add(c0, c1);\n        const b = Fp.sub(c0, c1);\n        const c = Fp.add(c0, c0);\n        return { c0: Fp.mul(a, b), c1: Fp.mul(c, c1) };\n    };\n    const Fp2fromBigTuple = (tuple) => {\n        if (tuple.length !== 2)\n            throw new Error('invalid tuple');\n        const fps = tuple.map((n) => Fp.create(n));\n        return { c0: fps[0], c1: fps[1] };\n    };\n    const FP2_ORDER = ORDER * ORDER;\n    const Fp2Nonresidue = Fp2fromBigTuple(opts.FP2_NONRESIDUE);\n    const Fp2 = {\n        ORDER: FP2_ORDER,\n        isLE: Fp.isLE,\n        NONRESIDUE: Fp2Nonresidue,\n        BITS: bitLen(FP2_ORDER),\n        BYTES: Math.ceil(bitLen(FP2_ORDER) / 8),\n        MASK: bitMask(bitLen(FP2_ORDER)),\n        ZERO: { c0: Fp.ZERO, c1: Fp.ZERO },\n        ONE: { c0: Fp.ONE, c1: Fp.ZERO },\n        create: (num) => num,\n        isValid: ({ c0, c1 }) => typeof c0 === 'bigint' && typeof c1 === 'bigint',\n        is0: ({ c0, c1 }) => Fp.is0(c0) && Fp.is0(c1),\n        eql: ({ c0, c1 }, { c0: r0, c1: r1 }) => Fp.eql(c0, r0) && Fp.eql(c1, r1),\n        neg: ({ c0, c1 }) => ({ c0: Fp.neg(c0), c1: Fp.neg(c1) }),\n        pow: (num, power) => mod.FpPow(Fp2, num, power),\n        invertBatch: (nums) => mod.FpInvertBatch(Fp2, nums),\n        // Normalized\n        add: Fp2Add,\n        sub: Fp2Subtract,\n        mul: Fp2Multiply,\n        sqr: Fp2Square,\n        // NonNormalized stuff\n        addN: Fp2Add,\n        subN: Fp2Subtract,\n        mulN: Fp2Multiply,\n        sqrN: Fp2Square,\n        // Why inversion for bigint inside Fp instead of Fp2? it is even used in that context?\n        div: (lhs, rhs) => Fp2.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp2.inv(rhs)),\n        inv: ({ c0: a, c1: b }) => {\n            // We wish to find the multiplicative inverse of a nonzero\n            // element a + bu in Fp2. We leverage an identity\n            //\n            // (a + bu)(a - bu) = a² + b²\n            //\n            // which holds because u² = -1. This can be rewritten as\n            //\n            // (a + bu)(a - bu)/(a² + b²) = 1\n            //\n            // because a² + b² = 0 has no nonzero solutions for (a, b).\n            // This gives that (a - bu)/(a² + b²) is the inverse\n            // of (a + bu). Importantly, this can be computing using\n            // only a single inversion in Fp.\n            const factor = Fp.inv(Fp.create(a * a + b * b));\n            return { c0: Fp.mul(factor, Fp.create(a)), c1: Fp.mul(factor, Fp.create(-b)) };\n        },\n        sqrt: (num) => {\n            if (opts.Fp2sqrt)\n                return opts.Fp2sqrt(num);\n            // This is generic for all quadratic extensions (Fp2)\n            const { c0, c1 } = num;\n            if (Fp.is0(c1)) {\n                // if c0 is quadratic residue\n                if (mod.FpLegendre(Fp, c0) === 1)\n                    return Fp2.create({ c0: Fp.sqrt(c0), c1: Fp.ZERO });\n                else\n                    return Fp2.create({ c0: Fp.ZERO, c1: Fp.sqrt(Fp.div(c0, FpNONRESIDUE)) });\n            }\n            const a = Fp.sqrt(Fp.sub(Fp.sqr(c0), Fp.mul(Fp.sqr(c1), FpNONRESIDUE)));\n            let d = Fp.mul(Fp.add(a, c0), Fpdiv2);\n            const legendre = mod.FpLegendre(Fp, d);\n            // -1, Quadratic non residue\n            if (legendre === -1)\n                d = Fp.sub(d, a);\n            const a0 = Fp.sqrt(d);\n            const candidateSqrt = Fp2.create({ c0: a0, c1: Fp.div(Fp.mul(c1, Fpdiv2), a0) });\n            if (!Fp2.eql(Fp2.sqr(candidateSqrt), num))\n                throw new Error('Cannot find square root');\n            // Normalize root: at this point candidateSqrt ** 2 = num, but also -candidateSqrt ** 2 = num\n            const x1 = candidateSqrt;\n            const x2 = Fp2.neg(x1);\n            const { re: re1, im: im1 } = Fp2.reim(x1);\n            const { re: re2, im: im2 } = Fp2.reim(x2);\n            if (im1 > im2 || (im1 === im2 && re1 > re2))\n                return x1;\n            return x2;\n        },\n        // Same as sgn0_m_eq_2 in RFC 9380\n        isOdd: (x) => {\n            const { re: x0, im: x1 } = Fp2.reim(x);\n            const sign_0 = x0 % _2n;\n            const zero_0 = x0 === _0n;\n            const sign_1 = x1 % _2n;\n            return BigInt(sign_0 || (zero_0 && sign_1)) == _1n;\n        },\n        // Bytes util\n        fromBytes(b) {\n            if (b.length !== Fp2.BYTES)\n                throw new Error('fromBytes invalid length=' + b.length);\n            return { c0: Fp.fromBytes(b.subarray(0, Fp.BYTES)), c1: Fp.fromBytes(b.subarray(Fp.BYTES)) };\n        },\n        toBytes: ({ c0, c1 }) => concatBytes(Fp.toBytes(c0), Fp.toBytes(c1)),\n        cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({\n            c0: Fp.cmov(c0, r0, c),\n            c1: Fp.cmov(c1, r1, c),\n        }),\n        reim: ({ c0, c1 }) => ({ re: c0, im: c1 }),\n        // multiply by u + 1\n        mulByNonresidue: ({ c0, c1 }) => Fp2.mul({ c0, c1 }, Fp2Nonresidue),\n        mulByB: opts.Fp2mulByB,\n        fromBigTuple: Fp2fromBigTuple,\n        frobeniusMap: ({ c0, c1 }, power) => ({\n            c0,\n            c1: Fp.mul(c1, FP2_FROBENIUS_COEFFICIENTS[power % 2]),\n        }),\n    };\n    // Fp6\n    const Fp6Add = ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }) => ({\n        c0: Fp2.add(c0, r0),\n        c1: Fp2.add(c1, r1),\n        c2: Fp2.add(c2, r2),\n    });\n    const Fp6Subtract = ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }) => ({\n        c0: Fp2.sub(c0, r0),\n        c1: Fp2.sub(c1, r1),\n        c2: Fp2.sub(c2, r2),\n    });\n    const Fp6Multiply = ({ c0, c1, c2 }, rhs) => {\n        if (typeof rhs === 'bigint') {\n            return {\n                c0: Fp2.mul(c0, rhs),\n                c1: Fp2.mul(c1, rhs),\n                c2: Fp2.mul(c2, rhs),\n            };\n        }\n        const { c0: r0, c1: r1, c2: r2 } = rhs;\n        const t0 = Fp2.mul(c0, r0); // c0 * o0\n        const t1 = Fp2.mul(c1, r1); // c1 * o1\n        const t2 = Fp2.mul(c2, r2); // c2 * o2\n        return {\n            // t0 + (c1 + c2) * (r1 * r2) - (T1 + T2) * (u + 1)\n            c0: Fp2.add(t0, Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), Fp2.add(r1, r2)), Fp2.add(t1, t2)))),\n            // (c0 + c1) * (r0 + r1) - (T0 + T1) + T2 * (u + 1)\n            c1: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c1), Fp2.add(r0, r1)), Fp2.add(t0, t1)), Fp2.mulByNonresidue(t2)),\n            // T1 + (c0 + c2) * (r0 + r2) - T0 + T2\n            c2: Fp2.sub(Fp2.add(t1, Fp2.mul(Fp2.add(c0, c2), Fp2.add(r0, r2))), Fp2.add(t0, t2)),\n        };\n    };\n    const Fp6Square = ({ c0, c1, c2 }) => {\n        let t0 = Fp2.sqr(c0); // c0²\n        let t1 = Fp2.mul(Fp2.mul(c0, c1), _2n); // 2 * c0 * c1\n        let t3 = Fp2.mul(Fp2.mul(c1, c2), _2n); // 2 * c1 * c2\n        let t4 = Fp2.sqr(c2); // c2²\n        return {\n            c0: Fp2.add(Fp2.mulByNonresidue(t3), t0), // T3 * (u + 1) + T0\n            c1: Fp2.add(Fp2.mulByNonresidue(t4), t1), // T4 * (u + 1) + T1\n            // T1 + (c0 - c1 + c2)² + T3 - T0 - T4\n            c2: Fp2.sub(Fp2.sub(Fp2.add(Fp2.add(t1, Fp2.sqr(Fp2.add(Fp2.sub(c0, c1), c2))), t3), t0), t4),\n        };\n    };\n    const [FP6_FROBENIUS_COEFFICIENTS_1, FP6_FROBENIUS_COEFFICIENTS_2] = calcFrobeniusCoefficients(Fp2, Fp2Nonresidue, Fp.ORDER, 6, 2, 3);\n    const Fp6 = {\n        ORDER: Fp2.ORDER, // TODO: unused, but need to verify\n        isLE: Fp2.isLE,\n        BITS: 3 * Fp2.BITS,\n        BYTES: 3 * Fp2.BYTES,\n        MASK: bitMask(3 * Fp2.BITS),\n        ZERO: { c0: Fp2.ZERO, c1: Fp2.ZERO, c2: Fp2.ZERO },\n        ONE: { c0: Fp2.ONE, c1: Fp2.ZERO, c2: Fp2.ZERO },\n        create: (num) => num,\n        isValid: ({ c0, c1, c2 }) => Fp2.isValid(c0) && Fp2.isValid(c1) && Fp2.isValid(c2),\n        is0: ({ c0, c1, c2 }) => Fp2.is0(c0) && Fp2.is0(c1) && Fp2.is0(c2),\n        neg: ({ c0, c1, c2 }) => ({ c0: Fp2.neg(c0), c1: Fp2.neg(c1), c2: Fp2.neg(c2) }),\n        eql: ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }) => Fp2.eql(c0, r0) && Fp2.eql(c1, r1) && Fp2.eql(c2, r2),\n        sqrt: notImplemented,\n        // Do we need division by bigint at all? Should be done via order:\n        div: (lhs, rhs) => Fp6.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp6.inv(rhs)),\n        pow: (num, power) => mod.FpPow(Fp6, num, power),\n        invertBatch: (nums) => mod.FpInvertBatch(Fp6, nums),\n        // Normalized\n        add: Fp6Add,\n        sub: Fp6Subtract,\n        mul: Fp6Multiply,\n        sqr: Fp6Square,\n        // NonNormalized stuff\n        addN: Fp6Add,\n        subN: Fp6Subtract,\n        mulN: Fp6Multiply,\n        sqrN: Fp6Square,\n        inv: ({ c0, c1, c2 }) => {\n            let t0 = Fp2.sub(Fp2.sqr(c0), Fp2.mulByNonresidue(Fp2.mul(c2, c1))); // c0² - c2 * c1 * (u + 1)\n            let t1 = Fp2.sub(Fp2.mulByNonresidue(Fp2.sqr(c2)), Fp2.mul(c0, c1)); // c2² * (u + 1) - c0 * c1\n            let t2 = Fp2.sub(Fp2.sqr(c1), Fp2.mul(c0, c2)); // c1² - c0 * c2\n            // 1/(((c2 * T1 + c1 * T2) * v) + c0 * T0)\n            let t4 = Fp2.inv(Fp2.add(Fp2.mulByNonresidue(Fp2.add(Fp2.mul(c2, t1), Fp2.mul(c1, t2))), Fp2.mul(c0, t0)));\n            return { c0: Fp2.mul(t4, t0), c1: Fp2.mul(t4, t1), c2: Fp2.mul(t4, t2) };\n        },\n        // Bytes utils\n        fromBytes: (b) => {\n            if (b.length !== Fp6.BYTES)\n                throw new Error('fromBytes invalid length=' + b.length);\n            return {\n                c0: Fp2.fromBytes(b.subarray(0, Fp2.BYTES)),\n                c1: Fp2.fromBytes(b.subarray(Fp2.BYTES, 2 * Fp2.BYTES)),\n                c2: Fp2.fromBytes(b.subarray(2 * Fp2.BYTES)),\n            };\n        },\n        toBytes: ({ c0, c1, c2 }) => concatBytes(Fp2.toBytes(c0), Fp2.toBytes(c1), Fp2.toBytes(c2)),\n        cmov: ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }, c) => ({\n            c0: Fp2.cmov(c0, r0, c),\n            c1: Fp2.cmov(c1, r1, c),\n            c2: Fp2.cmov(c2, r2, c),\n        }),\n        fromBigSix: (t) => {\n            if (!Array.isArray(t) || t.length !== 6)\n                throw new Error('invalid Fp6 usage');\n            return {\n                c0: Fp2.fromBigTuple(t.slice(0, 2)),\n                c1: Fp2.fromBigTuple(t.slice(2, 4)),\n                c2: Fp2.fromBigTuple(t.slice(4, 6)),\n            };\n        },\n        frobeniusMap: ({ c0, c1, c2 }, power) => ({\n            c0: Fp2.frobeniusMap(c0, power),\n            c1: Fp2.mul(Fp2.frobeniusMap(c1, power), FP6_FROBENIUS_COEFFICIENTS_1[power % 6]),\n            c2: Fp2.mul(Fp2.frobeniusMap(c2, power), FP6_FROBENIUS_COEFFICIENTS_2[power % 6]),\n        }),\n        mulByFp2: ({ c0, c1, c2 }, rhs) => ({\n            c0: Fp2.mul(c0, rhs),\n            c1: Fp2.mul(c1, rhs),\n            c2: Fp2.mul(c2, rhs),\n        }),\n        mulByNonresidue: ({ c0, c1, c2 }) => ({ c0: Fp2.mulByNonresidue(c2), c1: c0, c2: c1 }),\n        // Sparse multiplication\n        mul1: ({ c0, c1, c2 }, b1) => ({\n            c0: Fp2.mulByNonresidue(Fp2.mul(c2, b1)),\n            c1: Fp2.mul(c0, b1),\n            c2: Fp2.mul(c1, b1),\n        }),\n        // Sparse multiplication\n        mul01({ c0, c1, c2 }, b0, b1) {\n            let t0 = Fp2.mul(c0, b0); // c0 * b0\n            let t1 = Fp2.mul(c1, b1); // c1 * b1\n            return {\n                // ((c1 + c2) * b1 - T1) * (u + 1) + T0\n                c0: Fp2.add(Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), b1), t1)), t0),\n                // (b0 + b1) * (c0 + c1) - T0 - T1\n                c1: Fp2.sub(Fp2.sub(Fp2.mul(Fp2.add(b0, b1), Fp2.add(c0, c1)), t0), t1),\n                // (c0 + c2) * b0 - T0 + T1\n                c2: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c2), b0), t0), t1),\n            };\n        },\n    };\n    // Fp12\n    const FP12_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp2, Fp2Nonresidue, Fp.ORDER, 12, 1, 6)[0];\n    const Fp12Add = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({\n        c0: Fp6.add(c0, r0),\n        c1: Fp6.add(c1, r1),\n    });\n    const Fp12Subtract = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({\n        c0: Fp6.sub(c0, r0),\n        c1: Fp6.sub(c1, r1),\n    });\n    const Fp12Multiply = ({ c0, c1 }, rhs) => {\n        if (typeof rhs === 'bigint')\n            return { c0: Fp6.mul(c0, rhs), c1: Fp6.mul(c1, rhs) };\n        let { c0: r0, c1: r1 } = rhs;\n        let t1 = Fp6.mul(c0, r0); // c0 * r0\n        let t2 = Fp6.mul(c1, r1); // c1 * r1\n        return {\n            c0: Fp6.add(t1, Fp6.mulByNonresidue(t2)), // T1 + T2 * v\n            // (c0 + c1) * (r0 + r1) - (T1 + T2)\n            c1: Fp6.sub(Fp6.mul(Fp6.add(c0, c1), Fp6.add(r0, r1)), Fp6.add(t1, t2)),\n        };\n    };\n    const Fp12Square = ({ c0, c1 }) => {\n        let ab = Fp6.mul(c0, c1); // c0 * c1\n        return {\n            // (c1 * v + c0) * (c0 + c1) - AB - AB * v\n            c0: Fp6.sub(Fp6.sub(Fp6.mul(Fp6.add(Fp6.mulByNonresidue(c1), c0), Fp6.add(c0, c1)), ab), Fp6.mulByNonresidue(ab)),\n            c1: Fp6.add(ab, ab),\n        }; // AB + AB\n    };\n    function Fp4Square(a, b) {\n        const a2 = Fp2.sqr(a);\n        const b2 = Fp2.sqr(b);\n        return {\n            first: Fp2.add(Fp2.mulByNonresidue(b2), a2), // b² * Nonresidue + a²\n            second: Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(a, b)), a2), b2), // (a + b)² - a² - b²\n        };\n    }\n    const Fp12 = {\n        ORDER: Fp2.ORDER, // TODO: unused, but need to verify\n        isLE: Fp6.isLE,\n        BITS: 2 * Fp6.BITS,\n        BYTES: 2 * Fp6.BYTES,\n        MASK: bitMask(2 * Fp6.BITS),\n        ZERO: { c0: Fp6.ZERO, c1: Fp6.ZERO },\n        ONE: { c0: Fp6.ONE, c1: Fp6.ZERO },\n        create: (num) => num,\n        isValid: ({ c0, c1 }) => Fp6.isValid(c0) && Fp6.isValid(c1),\n        is0: ({ c0, c1 }) => Fp6.is0(c0) && Fp6.is0(c1),\n        neg: ({ c0, c1 }) => ({ c0: Fp6.neg(c0), c1: Fp6.neg(c1) }),\n        eql: ({ c0, c1 }, { c0: r0, c1: r1 }) => Fp6.eql(c0, r0) && Fp6.eql(c1, r1),\n        sqrt: notImplemented,\n        inv: ({ c0, c1 }) => {\n            let t = Fp6.inv(Fp6.sub(Fp6.sqr(c0), Fp6.mulByNonresidue(Fp6.sqr(c1)))); // 1 / (c0² - c1² * v)\n            return { c0: Fp6.mul(c0, t), c1: Fp6.neg(Fp6.mul(c1, t)) }; // ((C0 * T) * T) + (-C1 * T) * w\n        },\n        div: (lhs, rhs) => Fp12.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp12.inv(rhs)),\n        pow: (num, power) => mod.FpPow(Fp12, num, power),\n        invertBatch: (nums) => mod.FpInvertBatch(Fp12, nums),\n        // Normalized\n        add: Fp12Add,\n        sub: Fp12Subtract,\n        mul: Fp12Multiply,\n        sqr: Fp12Square,\n        // NonNormalized stuff\n        addN: Fp12Add,\n        subN: Fp12Subtract,\n        mulN: Fp12Multiply,\n        sqrN: Fp12Square,\n        // Bytes utils\n        fromBytes: (b) => {\n            if (b.length !== Fp12.BYTES)\n                throw new Error('fromBytes invalid length=' + b.length);\n            return {\n                c0: Fp6.fromBytes(b.subarray(0, Fp6.BYTES)),\n                c1: Fp6.fromBytes(b.subarray(Fp6.BYTES)),\n            };\n        },\n        toBytes: ({ c0, c1 }) => concatBytes(Fp6.toBytes(c0), Fp6.toBytes(c1)),\n        cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({\n            c0: Fp6.cmov(c0, r0, c),\n            c1: Fp6.cmov(c1, r1, c),\n        }),\n        // Utils\n        // toString() {\n        //   return '' + 'Fp12(' + this.c0 + this.c1 + '* w');\n        // },\n        // fromTuple(c: [Fp6, Fp6]) {\n        //   return new Fp12(...c);\n        // }\n        fromBigTwelve: (t) => ({\n            c0: Fp6.fromBigSix(t.slice(0, 6)),\n            c1: Fp6.fromBigSix(t.slice(6, 12)),\n        }),\n        // Raises to q**i -th power\n        frobeniusMap(lhs, power) {\n            const { c0, c1, c2 } = Fp6.frobeniusMap(lhs.c1, power);\n            const coeff = FP12_FROBENIUS_COEFFICIENTS[power % 12];\n            return {\n                c0: Fp6.frobeniusMap(lhs.c0, power),\n                c1: Fp6.create({\n                    c0: Fp2.mul(c0, coeff),\n                    c1: Fp2.mul(c1, coeff),\n                    c2: Fp2.mul(c2, coeff),\n                }),\n            };\n        },\n        mulByFp2: ({ c0, c1 }, rhs) => ({\n            c0: Fp6.mulByFp2(c0, rhs),\n            c1: Fp6.mulByFp2(c1, rhs),\n        }),\n        conjugate: ({ c0, c1 }) => ({ c0, c1: Fp6.neg(c1) }),\n        // Sparse multiplication\n        mul014: ({ c0, c1 }, o0, o1, o4) => {\n            let t0 = Fp6.mul01(c0, o0, o1);\n            let t1 = Fp6.mul1(c1, o4);\n            return {\n                c0: Fp6.add(Fp6.mulByNonresidue(t1), t0), // T1 * v + T0\n                // (c1 + c0) * [o0, o1+o4] - T0 - T1\n                c1: Fp6.sub(Fp6.sub(Fp6.mul01(Fp6.add(c1, c0), o0, Fp2.add(o1, o4)), t0), t1),\n            };\n        },\n        mul034: ({ c0, c1 }, o0, o3, o4) => {\n            const a = Fp6.create({\n                c0: Fp2.mul(c0.c0, o0),\n                c1: Fp2.mul(c0.c1, o0),\n                c2: Fp2.mul(c0.c2, o0),\n            });\n            const b = Fp6.mul01(c1, o3, o4);\n            const e = Fp6.mul01(Fp6.add(c0, c1), Fp2.add(o0, o3), o4);\n            return {\n                c0: Fp6.add(Fp6.mulByNonresidue(b), a),\n                c1: Fp6.sub(e, Fp6.add(a, b)),\n            };\n        },\n        // A cyclotomic group is a subgroup of Fp^n defined by\n        //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\n        // The result of any pairing is in a cyclotomic subgroup\n        // https://eprint.iacr.org/2009/565.pdf\n        _cyclotomicSquare: opts.Fp12cyclotomicSquare,\n        _cyclotomicExp: opts.Fp12cyclotomicExp,\n        // https://eprint.iacr.org/2010/354.pdf\n        // https://eprint.iacr.org/2009/565.pdf\n        finalExponentiate: opts.Fp12finalExponentiate,\n    };\n    return { Fp, Fp2, Fp6, Fp4Square, Fp12 };\n}\n//# sourceMappingURL=tower.js.map","/**\n * bn254, previously known as alt_bn_128, when it had 128-bit security.\n\nBarbulescu-Duquesne 2017 shown it's weaker: just about 100 bits,\nso the naming has been adjusted to its prime bit count:\nhttps://hal.science/hal-01534101/file/main.pdf.\nCompatible with EIP-196 and EIP-197.\n\nThere are huge compatibility issues in the ecosystem:\n\n1. Different libraries call it in different ways: \"bn254\", \"bn256\", \"alt_bn128\", \"bn128\".\n2. libff has bn128, but it's a different curve with different G2:\n   https://github.com/scipr-lab/libff/blob/a44f482e18b8ac04d034c193bd9d7df7817ad73f/libff/algebra/curves/bn128/bn128_init.cpp#L166-L169\n3. halo2curves bn256 is also incompatible and returns different outputs\n\nWe don't implement Point methods toHex / toRawBytes.\nTo work around this limitation, has to initialize points on their own from BigInts.\nReason it's not implemented is because [there is no standard](https://github.com/privacy-scaling-explorations/halo2curves/issues/109).\nPoints of divergence:\n\n- Endianness: LE vs BE (byte-swapped)\n- Flags as first hex bits (similar to BLS) vs no-flags\n- Imaginary part last in G2 vs first (c0, c1 vs c1, c0)\n\nThe goal of our implementation is to support \"Ethereum\" variant of the curve,\nbecause it at least has specs:\n\n- EIP196 (https://eips.ethereum.org/EIPS/eip-196) describes bn254 ECADD and ECMUL opcodes for EVM\n- EIP197 (https://eips.ethereum.org/EIPS/eip-197) describes bn254 pairings\n- It's hard: EIPs don't have proper tests. EIP-197 returns boolean output instead of Fp12\n- The existing implementations are bad. Some are deprecated:\n    - https://github.com/paritytech/bn (old version)\n    - https://github.com/ewasm/ethereum-bn128.rs (uses paritytech/bn)\n    - https://github.com/zcash-hackworks/bn\n    - https://github.com/arkworks-rs/curves/blob/master/bn254/src/lib.rs\n- Python implementations use different towers and produce different Fp12 outputs:\n    - https://github.com/ethereum/py_pairing\n    - https://github.com/ethereum/execution-specs/blob/master/src/ethereum/crypto/alt_bn128.py\n- Points are encoded differently in different implementations\n\n### Params\nSeed (X): 4965661367192848881\nFr: (36x⁴+36x³+18x²+6x+1)\nFp: (36x⁴+36x³+24x²+6x+1)\n(E  / Fp ): Y² = X³+3\n(Et / Fp²): Y² = X³+3/(u+9) (D-type twist)\nAte loop size: 6x+2\n\n### Towers\n- Fp²[u] = Fp/u²+1\n- Fp⁶[v] = Fp²/v³-9-u\n- Fp¹²[w] = Fp⁶/w²-v\n\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { getHash } from \"./_shortw_utils.js\";\nimport { bls, } from \"./abstract/bls.js\";\nimport { Field } from \"./abstract/modular.js\";\nimport { psiFrobenius, tower12 } from \"./abstract/tower.js\";\nimport { bitGet, bitLen, notImplemented } from \"./abstract/utils.js\";\nimport { weierstrass } from \"./abstract/weierstrass.js\";\n// prettier-ignore\nconst _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\nconst _6n = BigInt(6);\nconst BN_X = BigInt('4965661367192848881');\nconst BN_X_LEN = bitLen(BN_X);\nconst SIX_X_SQUARED = _6n * BN_X ** _2n;\n// Finite field over r. It's for convenience and is not used in the code below.\nconst Fr = Field(BigInt('21888242871839275222246405745257275088548364400416034343698204186575808495617'));\n// Fp2.div(Fp2.mul(Fp2.ONE, _3n), Fp2.NONRESIDUE)\nconst Fp2B = {\n    c0: BigInt('19485874751759354771024239261021720505790618469301721065564631296452457478373'),\n    c1: BigInt('266929791119991161246907387137283842545076965332900288569378510910307636690'),\n};\nconst { Fp, Fp2, Fp6, Fp4Square, Fp12 } = tower12({\n    ORDER: BigInt('21888242871839275222246405745257275088696311157297823662689037894645226208583'),\n    FP2_NONRESIDUE: [BigInt(9), _1n],\n    Fp2mulByB: (num) => Fp2.mul(num, Fp2B),\n    // The result of any pairing is in a cyclotomic subgroup\n    // https://eprint.iacr.org/2009/565.pdf\n    Fp12cyclotomicSquare: ({ c0, c1 }) => {\n        const { c0: c0c0, c1: c0c1, c2: c0c2 } = c0;\n        const { c0: c1c0, c1: c1c1, c2: c1c2 } = c1;\n        const { first: t3, second: t4 } = Fp4Square(c0c0, c1c1);\n        const { first: t5, second: t6 } = Fp4Square(c1c0, c0c2);\n        const { first: t7, second: t8 } = Fp4Square(c0c1, c1c2);\n        let t9 = Fp2.mulByNonresidue(t8); // T8 * (u + 1)\n        return {\n            c0: Fp6.create({\n                c0: Fp2.add(Fp2.mul(Fp2.sub(t3, c0c0), _2n), t3), // 2 * (T3 - c0c0)  + T3\n                c1: Fp2.add(Fp2.mul(Fp2.sub(t5, c0c1), _2n), t5), // 2 * (T5 - c0c1)  + T5\n                c2: Fp2.add(Fp2.mul(Fp2.sub(t7, c0c2), _2n), t7),\n            }), // 2 * (T7 - c0c2)  + T7\n            c1: Fp6.create({\n                c0: Fp2.add(Fp2.mul(Fp2.add(t9, c1c0), _2n), t9), // 2 * (T9 + c1c0) + T9\n                c1: Fp2.add(Fp2.mul(Fp2.add(t4, c1c1), _2n), t4), // 2 * (T4 + c1c1) + T4\n                c2: Fp2.add(Fp2.mul(Fp2.add(t6, c1c2), _2n), t6),\n            }),\n        }; // 2 * (T6 + c1c2) + T6\n    },\n    Fp12cyclotomicExp(num, n) {\n        let z = Fp12.ONE;\n        for (let i = BN_X_LEN - 1; i >= 0; i--) {\n            z = Fp12._cyclotomicSquare(z);\n            if (bitGet(n, i))\n                z = Fp12.mul(z, num);\n        }\n        return z;\n    },\n    // https://eprint.iacr.org/2010/354.pdf\n    // https://eprint.iacr.org/2009/565.pdf\n    Fp12finalExponentiate: (num) => {\n        const powMinusX = (num) => Fp12.conjugate(Fp12._cyclotomicExp(num, BN_X));\n        const r0 = Fp12.mul(Fp12.conjugate(num), Fp12.inv(num));\n        const r = Fp12.mul(Fp12.frobeniusMap(r0, 2), r0);\n        const y1 = Fp12._cyclotomicSquare(powMinusX(r));\n        const y2 = Fp12.mul(Fp12._cyclotomicSquare(y1), y1);\n        const y4 = powMinusX(y2);\n        const y6 = powMinusX(Fp12._cyclotomicSquare(y4));\n        const y8 = Fp12.mul(Fp12.mul(Fp12.conjugate(y6), y4), Fp12.conjugate(y2));\n        const y9 = Fp12.mul(y8, y1);\n        return Fp12.mul(Fp12.frobeniusMap(Fp12.mul(Fp12.conjugate(r), y9), 3), Fp12.mul(Fp12.frobeniusMap(y8, 2), Fp12.mul(Fp12.frobeniusMap(y9, 1), Fp12.mul(Fp12.mul(y8, y4), r))));\n    },\n});\n// END OF CURVE FIELDS\nconst { G2psi, psi } = psiFrobenius(Fp, Fp2, Fp2.NONRESIDUE);\n/*\nNo hashToCurve for now (and signatures):\n\n- RFC 9380 doesn't mention bn254 and doesn't provide test vectors\n- Overall seems like nobody is using BLS signatures on top of bn254\n- Seems like it can utilize SVDW, which is not implemented yet\n*/\nconst htfDefaults = Object.freeze({\n    // DST: a domain separation tag defined in section 2.2.5\n    DST: 'BN254G2_XMD:SHA-256_SVDW_RO_',\n    encodeDST: 'BN254G2_XMD:SHA-256_SVDW_RO_',\n    p: Fp.ORDER,\n    m: 2,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n});\nexport const _postPrecompute = (Rx, Ry, Rz, Qx, Qy, pointAdd) => {\n    const q = psi(Qx, Qy);\n    ({ Rx, Ry, Rz } = pointAdd(Rx, Ry, Rz, q[0], q[1]));\n    const q2 = psi(q[0], q[1]);\n    pointAdd(Rx, Ry, Rz, q2[0], Fp2.neg(q2[1]));\n};\n/**\n * bn254 (a.k.a. alt_bn128) pairing-friendly curve.\n * Contains G1 / G2 operations and pairings.\n */\nexport const bn254 = bls({\n    // Fields\n    fields: { Fp, Fp2, Fp6, Fp12, Fr },\n    G1: {\n        Fp,\n        h: BigInt(1),\n        Gx: BigInt(1),\n        Gy: BigInt(2),\n        a: Fp.ZERO,\n        b: _3n,\n        htfDefaults: { ...htfDefaults, m: 1, DST: 'BN254G2_XMD:SHA-256_SVDW_RO_' },\n        wrapPrivateKey: true,\n        allowInfinityPoint: true,\n        mapToCurve: notImplemented,\n        fromBytes: notImplemented,\n        toBytes: notImplemented,\n        ShortSignature: {\n            fromHex: notImplemented,\n            toRawBytes: notImplemented,\n            toHex: notImplemented,\n        },\n    },\n    G2: {\n        Fp: Fp2,\n        // cofactor: (36 * X^4) + (36 * X^3) + (30 * X^2) + 6*X + 1\n        h: BigInt('21888242871839275222246405745257275088844257914179612981679871602714643921549'),\n        Gx: Fp2.fromBigTuple([\n            BigInt('10857046999023057135944570762232829481370756359578518086990519993285655852781'),\n            BigInt('11559732032986387107991004021392285783925812861821192530917403151452391805634'),\n        ]),\n        Gy: Fp2.fromBigTuple([\n            BigInt('8495653923123431417604973247489272438418190587263600148770280649306958101930'),\n            BigInt('4082367875863433681332203403145435568316851327593401208105741076214120093531'),\n        ]),\n        a: Fp2.ZERO,\n        b: Fp2B,\n        hEff: BigInt('21888242871839275222246405745257275088844257914179612981679871602714643921549'),\n        htfDefaults: { ...htfDefaults },\n        wrapPrivateKey: true,\n        allowInfinityPoint: true,\n        isTorsionFree: (c, P) => P.multiplyUnsafe(SIX_X_SQUARED).equals(G2psi(c, P)), // [p]P = [6X^2]P\n        mapToCurve: notImplemented,\n        fromBytes: notImplemented,\n        toBytes: notImplemented,\n        Signature: {\n            fromHex: notImplemented,\n            toRawBytes: notImplemented,\n            toHex: notImplemented,\n        },\n    },\n    params: {\n        ateLoopSize: BN_X * _6n + _2n,\n        r: Fr.ORDER,\n        xNegative: false,\n        twistType: 'divisive',\n    },\n    htfDefaults,\n    hash: sha256,\n    randomBytes,\n    postPrecompute: _postPrecompute,\n});\n/**\n * bn254 weierstrass curve with ECDSA.\n * This is very rare and probably not used anywhere.\n * Instead, you should use G1 / G2, defined above.\n * @deprecated\n */\nexport const bn254_weierstrass = weierstrass({\n    a: BigInt(0),\n    b: BigInt(3),\n    Fp,\n    n: BigInt('21888242871839275222246405745257275088548364400416034343698204186575808495617'),\n    Gx: BigInt(1),\n    Gy: BigInt(2),\n    h: BigInt(1),\n    ...getHash(sha256),\n});\n//# sourceMappingURL=bn254.js.map","/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from \"./abstract/weierstrass.js\";\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return { ...create(defHash), create };\n}\n//# sourceMappingURL=_shortw_utils.js.map","import { ZKProof } from './proving';\nimport { witnessBuilder } from './witness_calculator';\nimport { groth16 } from 'snarkjs';\nimport { fromBigEndian } from '@iden3/js-iden3-core';\nimport { bn254 } from '@noble/curves/bn254';\n\nexport const Groth16 = 'groth16';\nexport const AuthCircuit = 'auth';\nexport const AuthV2Circuit = 'authV2';\nconst textDecoder = new TextDecoder();\nconst ZERO_BIGINT = BigInt(0);\n\nconst Fp2 = bn254.fields.Fp2;\nconst Fp12 = bn254.fields.Fp12;\n\nexport type Groth16VerificationKey = {\n  protocol: 'groth16';\n  curve: 'bn128';\n  nPublic: number;\n  vk_alpha_1: [string, string, string];\n  vk_beta_2: [[string, string], [string, string], [string, string]];\n  vk_gamma_2: [[string, string], [string, string], [string, string]];\n  vk_delta_2: [[string, string], [string, string], [string, string]];\n  vk_alphabeta_12: [\n    [[string, string], [string, string], [string, string]],\n    [[string, string], [string, string], [string, string]]\n  ];\n  IC: [string, string, string][];\n};\n\nexport async function prove(\n  inputs: Uint8Array,\n  provingKey: Uint8Array,\n  wasm: Uint8Array\n): Promise<ZKProof> {\n  const witnessCalculator = await witnessBuilder(wasm);\n\n  const jsonString = new TextDecoder().decode(inputs);\n\n  const parsedData = JSON.parse(jsonString);\n  const wtnsBytes: Uint8Array = await witnessCalculator.calculateWTNSBin(parsedData, 0);\n\n  const { proof, publicSignals } = await groth16.prove(provingKey, wtnsBytes);\n\n  return {\n    proof: proof,\n    pub_signals: publicSignals\n  };\n}\n\nconst [G1PP, G2PP] = [bn254.G1.ProjectivePoint, bn254.G2.ProjectivePoint];\n\nconst toG1 = ([x, y]: string[]) => G1PP.fromAffine({ x: BigInt(x), y: BigInt(y) });\n\nconst toG2 = ([[x0, y0], [x1, y1]]: string[][]) => {\n  return G2PP.fromAffine({\n    x: Fp2.fromBigTuple([BigInt(x0), BigInt(y0)]),\n    y: Fp2.fromBigTuple([BigInt(x1), BigInt(y1)])\n  });\n};\n\nexport async function verify<T extends { challenge: bigint }>(\n  messageHash: Uint8Array,\n  proof: ZKProof,\n  verificationKey: Uint8Array,\n  unmarshall: (pubSignals: string[]) => T\n): Promise<boolean> {\n  const outputs: T = unmarshall(proof.pub_signals);\n  if (outputs.challenge !== fromBigEndian(messageHash)) {\n    throw new Error('challenge is not equal to message hash');\n  }\n\n  const vk: Groth16VerificationKey = JSON.parse(textDecoder.decode(verificationKey));\n\n  return verifyGroth16Proof(proof, vk);\n}\n\nexport function verifyGroth16Proof(zkp: ZKProof, vk: Groth16VerificationKey): boolean {\n  if (!vk.IC) {\n    throw new Error(`verification file doesn't exist for circuit`);\n  }\n  const { proof, pub_signals } = zkp;\n\n  if (pub_signals.length + 1 !== vk.IC.length) {\n    throw new Error(\n      `Invalid number of public signals, expected ${vk.IC.length - 1} but got ${pub_signals.length}`\n    );\n  }\n\n  let cpub = G1PP.ZERO;\n\n  for (let i = 0; i < pub_signals.length; i++) {\n    // check input inside field\n    if (BigInt(pub_signals[i]) < ZERO_BIGINT || BigInt(pub_signals[i]) >= bn254.G1.CURVE.n) {\n      throw new Error(`Input value is not in the field ${bn254.G1.CURVE.n}`);\n    }\n    // Skip multiplication by 0 since it contributes nothing to the sum\n    if (BigInt(pub_signals[i]) !== ZERO_BIGINT) {\n      const [x, y] = vk.IC[i + 1].map(BigInt);\n      cpub = cpub.add(G1PP.fromAffine({ x, y }).multiply(BigInt(pub_signals[i])));\n    }\n  }\n  cpub = cpub.add(toG1(vk.IC[0]));\n\n  const newRes = bn254.pairingBatch([\n    { g1: toG1(proof.pi_a).negate(), g2: toG2(proof.pi_b) },\n    { g1: cpub, g2: toG2(vk.vk_gamma_2) },\n    { g1: toG1(proof.pi_c), g2: toG2(vk.vk_delta_2) },\n    { g1: toG1(vk.vk_alpha_1), g2: toG2(vk.vk_beta_2) }\n  ]);\n\n  return Fp12.eql(newRes, Fp12.ONE);\n}\n","import { ProvingMethod, ProvingMethodAlg, ZKProof } from './proving';\nimport { Id } from '@iden3/js-iden3-core';\nimport { AuthCircuit, Groth16, prove, verify } from './common';\n\n// AuthPubSignals auth.circom public signals\ninterface AuthPubSignals {\n  challenge: bigint;\n  userState: bigint;\n  userId: Id;\n}\n\n// ProvingMethodGroth16Auth defines proofs family and specific circuit\nclass ProvingMethodGroth16Auth implements ProvingMethod {\n  constructor(public readonly methodAlg: ProvingMethodAlg) {}\n\n  get alg(): string {\n    return this.methodAlg.alg;\n  }\n\n  get circuitId(): string {\n    return this.methodAlg.circuitId;\n  }\n\n  unmarshall(pubsignals: string[]): AuthPubSignals {\n    const outputs: AuthPubSignals = {} as AuthPubSignals;\n    if (pubsignals.length != 3) {\n      throw new Error(`invalid number of Output values expected ${3} got ${pubsignals.length}`);\n    }\n    outputs.challenge = BigInt(pubsignals[0]);\n    outputs.userState = BigInt(pubsignals[1]);\n    outputs.userId = Id.fromBigInt(BigInt(pubsignals[2]));\n\n    return outputs;\n  }\n\n  async verify(\n    messageHash: Uint8Array,\n    proof: ZKProof,\n    verificationKey: Uint8Array\n  ): Promise<boolean> {\n    return verify<AuthPubSignals>(messageHash, proof, verificationKey, this.unmarshall);\n  }\n\n  prove(inputs: Uint8Array, provingKey: Uint8Array, wasm: Uint8Array): Promise<ZKProof> {\n    return prove(inputs, provingKey, wasm);\n  }\n}\n\nexport const provingMethodGroth16AuthInstance: ProvingMethod = new ProvingMethodGroth16Auth(\n  new ProvingMethodAlg(Groth16, AuthCircuit)\n);\n","import { Id } from '@iden3/js-iden3-core';\nimport { ProvingMethod, ProvingMethodAlg, ZKProof } from './proving';\nimport { AuthV2Circuit, Groth16, prove, verify } from './common';\nimport { Hash } from '@iden3/js-merkletree';\nimport { getCurveFromName } from 'ffjavascript';\n\n// AuthV2PubSignals auth.circom public signals\nexport interface AuthV2PubSignals {\n  userID: Id;\n  challenge: bigint;\n  GISTRoot: Hash;\n}\n\nexport const AuthV2Groth16Alg = new ProvingMethodAlg(Groth16, AuthV2Circuit);\n\n// ProvingMethodGroth16AuthV2 instance for Groth16 proving method with an authV2 circuit\nexport class ProvingMethodGroth16AuthV2 implements ProvingMethod {\n  private static readonly curveName = 'bn128';\n\n  constructor(public readonly methodAlg: ProvingMethodAlg) {}\n\n  get alg(): string {\n    return this.methodAlg.alg;\n  }\n\n  get circuitId(): string {\n    return this.methodAlg.circuitId;\n  }\n\n  async verify(\n    messageHash: Uint8Array,\n    proof: ZKProof,\n    verificationKey: Uint8Array\n  ): Promise<boolean> {\n    return verify<AuthV2PubSignals>(messageHash, proof, verificationKey, this.unmarshall);\n  }\n\n  async prove(inputs: Uint8Array, provingKey: Uint8Array, wasm: Uint8Array): Promise<ZKProof> {\n    const zkProof = await prove(inputs, provingKey, wasm);\n    await this.terminateCurve();\n    return zkProof;\n  }\n\n  private async terminateCurve(): Promise<void> {\n    const curve = await getCurveFromName(ProvingMethodGroth16AuthV2.curveName);\n    curve.terminate();\n  }\n\n  unmarshall(pubSignals: string[]): AuthV2PubSignals {\n    const len = 3;\n\n    if (pubSignals.length !== len) {\n      throw new Error(`invalid number of Output values expected ${len} got ${pubSignals.length}`);\n    }\n\n    return {\n      userID: Id.fromBigInt(BigInt(pubSignals[0])),\n      challenge: BigInt(pubSignals[1]),\n      GISTRoot: Hash.fromString(pubSignals[2])\n    };\n  }\n}\n\nexport const provingMethodGroth16AuthV2Instance: ProvingMethod = new ProvingMethodGroth16AuthV2(\n  new ProvingMethodAlg(Groth16, AuthV2Circuit)\n);\n","import { hash } from './hash';\nimport { Token, Header } from './jwz';\nimport { provingMethodGroth16AuthInstance } from './authGroth16';\nimport {\n  getProvingMethod,\n  ProofInputsPreparerHandlerFunc,\n  ProvingMethod,\n  ProvingMethodAlg,\n  registerProvingMethod,\n  ZKProof,\n  ProofData\n} from './proving';\nimport { provingMethodGroth16AuthV2Instance } from './authV2Groth16';\nimport { Groth16VerificationKey, verifyGroth16Proof } from './common';\n\nregisterProvingMethod(\n  provingMethodGroth16AuthInstance.methodAlg,\n  () => provingMethodGroth16AuthInstance\n);\n\nregisterProvingMethod(\n  provingMethodGroth16AuthV2Instance.methodAlg,\n  () => provingMethodGroth16AuthV2Instance\n);\n\nconst proving = {\n  registerProvingMethod,\n  getProvingMethod,\n  provingMethodGroth16AuthInstance,\n  provingMethodGroth16AuthV2Instance\n};\n\nexport {\n  proving,\n  ProofInputsPreparerHandlerFunc,\n  ProvingMethod,\n  ProvingMethodAlg,\n  Token,\n  hash,\n  ZKProof,\n  ProofData,\n  Header,\n  verifyGroth16Proof,\n  Groth16VerificationKey\n};\n"],"names":["qString","hash","message","hashBytes","sha256","bi","fromBigEndian","reverse","m","BigInt","poseidon","ProvingMethodAlg","constructor","alg","circuitId","this","toString","provingMethods","Map","registerProvingMethod","f","Promise","res","set","getProvingMethod","rej","func","get","Header","base64UrlEncoding","chars","bits","base64url","string","opts","encoding","_opts$out","codes","i","length","loose","SyntaxError","end","out","Uint8Array","buffer","written","_i","value","undefined","_parse","data","_opts$pad","pad","mask","_stringify","RawJSONWebZeroknowledge","payload","protectedHeaders","header","zkp","sanitized","Error","headers","JSON","parse","TextDecoder","decode","Critical","forEach","key","Alg","CircuitId","method","token","Token","zkProof","Object","entries","setHeader","inputsPreparer","raw","getDefaultHeaders","TextEncoder","encode","getPayload","Type","tokenStr","trim","startsWith","parseFull","parseCompact","parts","split","rawProtected","base64","rawPayload","proof","prove","provingKey","wasm","serializeHeaders","msgHash","getMessageHash","inputs","prepare","marshaledProof","stringify","compactSerialize","serializedProtected","serializedProof","fullSerialize","serializedHeadersJSON","serializedHeaders","messageToProof","hashInt","toBigEndian","verify","verificationKey","keys","sort","async","witnessBuilder","code","options","wasmModule","WebAssembly","compile","err","console","log","errStr","msgStr","instance","instantiate","runtime","exceptionHandler","printErrorMessage","getMessage","writeBufferMessage","msg","showSharedRWMemory","shared_rw_memory_size","exports","getFieldNumLen32","arr","Uint32Array","j","readSharedRWMemory","fromArray32","printSharedRWMemory","WitnessCalculator","c","getMessageChar","String","fromCharCode","sanityCheck","version","getVersion","n32","getRawPrime","prime","witnessSize","getWitnessSize","circom_version","_doCalculateWitness","input","init","input_counter","k","h","str","uint64_max","charCodeAt","hashHex","n","repeat","concat","fnvHash","hMSB","parseInt","slice","hLSB","fArr","a","fillArray","Array","isArray","push","flatArray","signalSize","getInputSignalSize","arrFr","toArray32","writeSharedRWMemory","setInputSignal","getInputSize","calculateWitness","w","getWitness","calculateBinWitness","buff32","buff","pos","calculateWTNSBin","n8","idSection1lengthHex","idSection2lengthHex","rem","size","radix","unshift","Number","crypto","globalThis","anumber","isSafeInteger","abytes","b","lengths","ArrayBuffer","isView","name","includes","aexists","checkFinished","destroyed","finished","clean","arrays","fill","createView","DataView","byteOffset","byteLength","rotr","word","shift","toBytes","utf8ToBytes","Hash","createHasher","hashCons","hashC","update","digest","tmp","outputLen","blockLen","create","randomBytes","bytesLength","getRandomValues","from","Maj","HashMD","padOffset","isLE","super","view","len","take","Math","min","subarray","process","dataView","roundClean","digestInto","aoutput","setBigUint64","_32n","_u32_max","wh","wl","l","setUint32","oview","outLen","state","destroy","_cloneInto","to","clone","SHA256_IV","SHA256_K","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","s1","T1","T2","HMAC","_key","ahash","iHash","oHash","buf","getPrototypeOf","hmac","_0n","_1n","isBytes","item","abool","title","hexToNumber","hex","hasHexBuiltin","toHex","fromHex","hexes","_","padStart","bytesToHex","bytes","asciis","asciiToBase16","ch","hexToBytes","hl","al","array","ai","hi","n1","n2","char","bytesToNumberBE","bytesToNumberLE","numberToBytesBE","numberToBytesLE","ensureBytes","expectedLength","e","concatBytes","sum","isPosBig","inRange","max","aInRange","bitLen","bitGet","bitMask","validatorFns","bigint","val","function","boolean","stringOrUint8Array","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","notImplemented","memoized","fn","map","WeakMap","arg","args","computed","_2n","_3n","_4n","_5n","_8n","mod","result","invert","number","modulo","x","u","r","sqrt3mod4","p1div4","ORDER","root","pow","eql","sqr","sqrt5mod8","p5div8","mul","v","nv","sub","ONE","FpSqrt","P","Q","S","Z","_Fp","Field","FpLegendre","cc","Q1div2","is0","M","t","R","ZERO","t_tmp","exponent","tonelliShanks","FIELD_FIELDS","FpPow","num","power","p","d","FpInvertBatch","nums","passZero","inverted","multipliedAcc","reduce","acc","invertedAcc","inv","reduceRight","p1mod2","powered","yes","zero","no","neg","nLength","nBitLength","_nBitLength","nByteLength","ceil","redef","BITS","BYTES","sqrtP","freeze","MASK","isOdd","lhs","rhs","add","div","sqrN","addN","subN","mulN","sqrt","fromBytes","invertBatch","lst","cmov","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","mapHashToField","fieldLen","minLen","reduced","constTimeNegate","condition","negate","validateW","W","calcWOpts","scalarBits","maxNumber","windows","windowSize","shiftBy","calcOffsets","window","wOpts","wbits","nextN","offsetStart","abs","isZero","isNeg","isNegF","offsetF","pointPrecomputes","pointWindowSizes","getW","pippenger","fieldN","points","scalars","validateMSMPoints","s","validateMSMScalars","plength","slength","buckets","floor","scalar","resI","sumI","double","validateBasic","curve","Gx","Gy","weierstrassPoints","CURVE","allowInfinityPoint","allowedPrivateKeyLengths","clearCofactor","isTorsionFree","wrapPrivateKey","endo","beta","splitScalar","validatePointOpts","Fn","_c","point","_isCompressed","toAffine","y","tail","weierstrassEquation","x2","x3","isValidXY","left","right","_4a3","_27b2","normPrivateKeyToScalar","N","error","aprjpoint","other","Point","toAffineMemo","iz","px","py","pz","z","ax","ay","zz","assertValidMemo","fromAffine","normalizeZ","toInv","assertValidity","fromPrivateKey","privateKey","BASE","multiply","msm","_setWindowSize","wnaf","setWindowSize","hasEvenY","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t2","t3","t4","t5","subtract","wNAF","wNAFCached","multiplyUnsafe","sc","I","hasPrecomputes","wNAFCachedUnsafe","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","cofactor","toRawBytes","isCompressed","elm","unsafeLadder","precomputeWindow","base","precomputes","wo","wNAFUnsafe","getPrecomputes","transform","comp","prev","delete","ProjectivePoint","isWithinCurveOrder","os2ip","i2osp","anum","strxor","hash_to_field","count","DST","expand","_DST","log2p","L","len_in_bytes","prb","lenInBytes","b_in_bytes","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b_0","expand_message_xmd","dkLen","expand_message_xof","elm_offset","tv","mapToCurve","defaults","clear","initial","hashToCurve","u0","u1","encodeToCurve","encodeDST","calcFrobeniusCoefficients","nonResidue","modulus","degree","divisor","_divisor","towerModulus","powers","qPower","_6n","BN_X","BN_X_LEN","SIX_X_SQUARED","Fr","Fp2B","c0","c1","Fp2","Fp6","Fp4Square","Fp12","mod.Field","FpNONRESIDUE","NONRESIDUE","Fpdiv2","FP2_FROBENIUS_COEFFICIENTS","Fp2Add","r0","r1","Fp2Subtract","Fp2Multiply","Fp2Square","Fp2fromBigTuple","tuple","fps","FP2_ORDER","Fp2Nonresidue","FP2_NONRESIDUE","mod.FpPow","mod.FpInvertBatch","factor","Fp2sqrt","mod.FpLegendre","a0","candidateSqrt","x1","re","re1","im","im1","reim","re2","im2","x0","mulByNonresidue","mulByB","Fp2mulByB","fromBigTuple","frobeniusMap","Fp6Add","c2","r2","Fp6Subtract","Fp6Multiply","Fp6Square","FP6_FROBENIUS_COEFFICIENTS_1","FP6_FROBENIUS_COEFFICIENTS_2","fromBigSix","mulByFp2","mul1","b1","mul01","b0","FP12_FROBENIUS_COEFFICIENTS","Fp12Add","Fp12Subtract","Fp12Multiply","Fp12Square","ab","fromBigTwelve","coeff","conjugate","mul014","o0","o1","o4","mul034","o3","_cyclotomicSquare","Fp12cyclotomicSquare","_cyclotomicExp","Fp12cyclotomicExp","finalExponentiate","Fp12finalExponentiate","a2","b2","first","second","tower12","c0c0","c0c1","c0c2","c1c0","c1c1","c1c2","t6","t7","t8","t9","powMinusX","y1","y2","y4","y6","y8","y9","G2psi","psi","PSI_X","PSI_Y","PSI2_X","PSI2_Y","psi2","mapAffine","affine","G2psi2","psiFrobenius","htfDefaults","bn254","fields","BLS_X_IS_NEGATIVE","params","xNegative","TWIST","twistType","G1_","G1","assign","G2_","G2","lineFunction","Px","Py","Fp2div2","pointDouble","Rx","Ry","Rz","pointAdd","Qx","Qy","ATE_NAF","NAfDecomposition","ateLoopSize","calcPairingPrecomputes","negQy","bit","cur","postPrecompute","last","bind","millerLoopBatch","pairs","withFinalExponent","f12","ellLen","pairingBatch","g1","g2","Qa","utils","randomPrivateKey","ShortSignature","Signature","normP1","normP1Hash","htfOpts","normP2","normP2Hash","aNonEmpty","getPublicKey","getPublicKeyForShortSignatures","sign","msgPoint","sigPoint","signShortSignature","signature","publicKey","Hm","exp","verifyBatch","messages","publicKeys","sig","nMessages","nPublicKeys","messagePubKeyMap","pub","paired","groupPublicKey","verifyShortSignature","aggregatePublicKeys","aggAffine","aggregateSignatures","signatures","aggregateShortSignatures","pairing","G1b","G2b","bls","hEff","q","q2","curveDef","bits2int","bits2int_modN","lowS","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","cat","head","sqrtError","suffix","isBiggerThanHalfOrder","slcNum","recovery","fromCompact","fromDER","DER","toSig","addRecoveryBit","recoverPublicKey","rec","radj","prefix","numToSizedHex","ir","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","hexFromSig","toCompactRawBytes","toCompactHex","isValidPrivateKey","precompute","isProbPub","fpl","compLen","uncompLen","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","prehash","extraEntropy","ent","validateSigVerOpts","h1int","seedArgs","seed","k2sig","kBytes","ik","normS","defaultVerOpts","weierstrass","msgs","getHash","Groth16","textDecoder","ZERO_BIGINT","witnessCalculator","jsonString","parsedData","wtnsBytes","publicSignals","groth16","pub_signals","G1PP","G2PP","toG1","toG2","y0","messageHash","unmarshall","challenge","verifyGroth16Proof","vk","IC","cpub","newRes","pi_a","pi_b","vk_gamma_2","pi_c","vk_delta_2","vk_alpha_1","vk_beta_2","provingMethodGroth16AuthInstance","methodAlg","pubsignals","outputs","userState","userId","Id","fromBigInt","ProvingMethodGroth16AuthV2","terminateCurve","getCurveFromName","curveName","terminate","pubSignals","userID","GISTRoot","fromString","provingMethodGroth16AuthV2Instance","proving"],"mappings":"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","x_google_ignoreList":[2,5,6,7,8,9,10,11,12,13,14,15,16,17,18]}
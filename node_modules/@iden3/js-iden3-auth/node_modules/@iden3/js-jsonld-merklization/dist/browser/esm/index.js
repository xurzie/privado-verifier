import { poseidon } from '@iden3/js-crypto';
import { InMemoryDB, str2Bytes, Merkletree } from '@iden3/js-merkletree';

const MerklizationConstants = Object.freeze({
    ERRORS: {
        CONTEXT_NOT_DEFINED: new Error('error: context not defined on the object'),
        PARSED_CONTEXT_IS_NULL: new Error('error: parsed context is null'),
        TERM_IS_NOT_DEFINED: new Error('error: term is not defined'),
        NO_ID_ATTR: new Error('error: no @id attribute is defined'),
        CTX_TYP_IS_EMPTY: new Error('error: ctx type is empty'),
        FIELD_PATH_IS_EMPTY: new Error('error: filed path is empty'),
        UNEXPECTED_ARR_ELEMENT: new Error('error: unexpected array elements'),
        INVALID_REFERENCE_TYPE: new Error('error: invalid reference type'),
        MULTIPLE_PARENTS_FOUND: new Error('error: multiple parents found'),
        PARENT_NOT_FOUND: new Error('error: parent not found'),
        GRAPH_NOT_FOUND: new Error('error: graph not found'),
        QUAD_NOT_FOUND: new Error('error: quad not found'),
        MT_VALUE_INCORRECT_TYPE: new Error('error: incorrect type')
    },
    DEFAULT_GRAPH_NODE_NAME: '@default',
    DEFAULT_GRAPH_TERM_TYPE: 'DefaultGraph',
    QUADS_FORMAT: 'application/n-quads',
    DIGITS_ONLY_REGEX: /^\d+$/,
    Q: BigInt('21888242871839275222246405745257275088548364400416034343698204186575808495617')
});

class PoseidonHasher {
    _hasher;
    constructor(_hasher = poseidon) {
        this._hasher = _hasher;
    }
    async hash(inp) {
        return this._hasher.hash(inp);
    }
    async hashBytes(b) {
        return this._hasher.hashBytes(b);
    }
    prime() {
        return MerklizationConstants.Q;
    }
}
const DEFAULT_HASHER = new PoseidonHasher();

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  if (Object.prototype.hasOwnProperty.call(n, '__esModule')) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var jsbiUmd$1 = {exports: {}};

var jsbiUmd = jsbiUmd$1.exports;

var hasRequiredJsbiUmd;

function requireJsbiUmd () {
	if (hasRequiredJsbiUmd) return jsbiUmd$1.exports;
	hasRequiredJsbiUmd = 1;
	(function (module, exports) {
		(function(e,t){module.exports=t();})(jsbiUmd,function(){var e=Math.imul,t=Math.clz32;function i(e){"@babel/helpers - typeof";return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function _(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){for(var _,n=0;n<t.length;n++)_=t[n],_.enumerable=_.enumerable||false,_.configurable=true,"value"in _&&(_.writable=true),Object.defineProperty(e,_.key,_);}function l(e,t,i){return t&&n(e.prototype,t),i&&n(e,i),Object.defineProperty(e,"prototype",{writable:false}),e}function g(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:true,configurable:true}}),Object.defineProperty(e,"prototype",{writable:false}),t&&u(e,t);}function a(e){return a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},a(e)}function u(e,t){return u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},u(e,t)}function s(){if("undefined"==typeof Reflect||!Reflect.construct)return  false;if(Reflect.construct.sham)return  false;if("function"==typeof Proxy)return  true;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),true}catch(t){return  false}}function r(){return r=s()?Reflect.construct:function(e,t,i){var _=[null];_.push.apply(_,t);var n=Function.bind.apply(e,_),l=new n;return i&&u(l,i.prototype),l},r.apply(null,arguments)}function d(e){return  -1!==Function.toString.call(e).indexOf("[native code]")}function h(e){var t="function"==typeof Map?new Map:void 0;return h=function(e){function i(){return r(e,arguments,a(this).constructor)}if(null===e||!d(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if("undefined"!=typeof t){if(t.has(e))return t.get(e);t.set(e,i);}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:false,writable:true,configurable:true}}),u(i,e)},h(e)}function b(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function m(e,t){if(t&&("object"==typeof t||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return b(e)}function c(e){var t=s();return function(){var i,_=a(e);if(t){var n=a(this).constructor;i=Reflect.construct(_,arguments,n);}else i=_.apply(this,arguments);return m(this,i)}}function v(e,t){return y(e)||f(e,t)||D(e,t)||k()}function y(e){if(Array.isArray(e))return e}function f(e,t){var i=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=i){var _,n,l=[],g=true,o=false;try{for(i=i.call(e);!(g=(_=i.next()).done)&&(l.push(_.value),!(l.length===t));g=true);}catch(e){o=true,n=e;}finally{try{g||null==i["return"]||i["return"]();}finally{if(o)throw n}}return l}}function D(e,t){if(e){if("string"==typeof e)return p(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);return "Object"===i&&e.constructor&&(i=e.constructor.name),"Map"===i||"Set"===i?Array.from(e):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?p(e,t):void 0}}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var _=0,n=Array(t);_<t;_++)n[_]=e[_];return n}function k(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function B(e,t){var _="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!_){if(Array.isArray(e)||(_=D(e))||t){_&&(e=_);var n=0,l=function(){};return {s:l,n:function(){return n>=e.length?{done:true}:{done:false,value:e[n++]}},e:function(t){throw t},f:l}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var g,a=true,u=false;return {s:function(){_=_.call(e);},n:function(){var e=_.next();return a=e.done,e},e:function(t){u=true,g=t;},f:function(){try{a||null==_.return||_.return();}finally{if(u)throw g}}}}var S=function(e){var t=Math.abs,n=Math.max,o=Math.floor;function a(e,t){var i;if(_(this,a),i=u.call(this,e),i.sign=t,Object.setPrototypeOf(b(i),a.prototype),e>a.__kMaxLength)throw new RangeError("Maximum BigInt size exceeded");return i}g(a,e);var u=c(a);return l(a,[{key:"toDebugString",value:function(){var e,t=["BigInt["],i=B(this);try{for(i.s();!(e=i.n()).done;){var _=e.value;t.push((_?(_>>>0).toString(16):_)+", ");}}catch(e){i.e(e);}finally{i.f();}return t.push("]"),t.join("")}},{key:"toString",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:10;if(2>e||36<e)throw new RangeError("toString() radix argument must be between 2 and 36");return 0===this.length?"0":0==(e&e-1)?a.__toStringBasePowerOfTwo(this,e):a.__toStringGeneric(this,e,false)}},{key:"valueOf",value:function(){throw new Error("Convert JSBI instances to native numbers using `toNumber`.")}},{key:"__copy",value:function(){for(var e=new a(this.length,this.sign),t=0;t<this.length;t++)e[t]=this[t];return e}},{key:"__trim",value:function(){for(var e=this.length,t=this[e-1];0===t;)e--,t=this[e-1],this.pop();return 0===e&&(this.sign=false),this}},{key:"__initializeDigits",value:function(){for(var e=0;e<this.length;e++)this[e]=0;}},{key:"__clzmsd",value:function(){return a.__clz30(this.__digit(this.length-1))}},{key:"__inplaceMultiplyAdd",value:function(e,t,_){_>this.length&&(_=this.length);for(var n=32767&e,l=e>>>15,g=0,o=t,u=0;u<_;u++){var s=this.__digit(u),r=32767&s,d=s>>>15,h=a.__imul(r,n),b=a.__imul(r,l),m=a.__imul(d,n),c=a.__imul(d,l),v=o+h+g;g=v>>>30,v&=1073741823,v+=((32767&b)<<15)+((32767&m)<<15),g+=v>>>30,o=c+(b>>>15)+(m>>>15),this.__setDigit(u,1073741823&v);}if(0!==g||0!==o)throw new Error("implementation bug")}},{key:"__inplaceAdd",value:function(e,t,_){for(var n,l=0,g=0;g<_;g++)n=this.__halfDigit(t+g)+e.__halfDigit(g)+l,l=n>>>15,this.__setHalfDigit(t+g,32767&n);return l}},{key:"__inplaceSub",value:function(e,t,_){var n=0;if(1&t){t>>=1;for(var l=this.__digit(t),g=32767&l,o=0;o<_-1>>>1;o++){var a=e.__digit(o),u=(l>>>15)-(32767&a)-n;n=1&u>>>15,this.__setDigit(t+o,(32767&u)<<15|32767&g),l=this.__digit(t+o+1),g=(32767&l)-(a>>>15)-n,n=1&g>>>15;}var s=e.__digit(o),r=(l>>>15)-(32767&s)-n;n=1&r>>>15,this.__setDigit(t+o,(32767&r)<<15|32767&g);if(t+o+1>=this.length)throw new RangeError("out of bounds");0==(1&_)&&(l=this.__digit(t+o+1),g=(32767&l)-(s>>>15)-n,n=1&g>>>15,this.__setDigit(t+e.length,1073709056&l|32767&g));}else {t>>=1;for(var d=0;d<e.length-1;d++){var h=this.__digit(t+d),b=e.__digit(d),m=(32767&h)-(32767&b)-n;n=1&m>>>15;var c=(h>>>15)-(b>>>15)-n;n=1&c>>>15,this.__setDigit(t+d,(32767&c)<<15|32767&m);}var v=this.__digit(t+d),y=e.__digit(d),f=(32767&v)-(32767&y)-n;n=1&f>>>15;var D=0;0==(1&_)&&(D=(v>>>15)-(y>>>15)-n,n=1&D>>>15),this.__setDigit(t+d,(32767&D)<<15|32767&f);}return n}},{key:"__inplaceRightShift",value:function(e){if(0!==e){for(var t,_=this.__digit(0)>>>e,n=this.length-1,l=0;l<n;l++)t=this.__digit(l+1),this.__setDigit(l,1073741823&t<<30-e|_),_=t>>>e;this.__setDigit(n,_);}}},{key:"__digit",value:function(e){return this[e]}},{key:"__unsignedDigit",value:function(e){return this[e]>>>0}},{key:"__setDigit",value:function(e,t){this[e]=0|t;}},{key:"__setDigitGrow",value:function(e,t){this[e]=0|t;}},{key:"__halfDigitLength",value:function(){var e=this.length;return 32767>=this.__unsignedDigit(e-1)?2*e-1:2*e}},{key:"__halfDigit",value:function(e){return 32767&this[e>>>1]>>>15*(1&e)}},{key:"__setHalfDigit",value:function(e,t){var i=e>>>1,_=this.__digit(i),n=1&e?32767&_|t<<15:1073709056&_|32767&t;this.__setDigit(i,n);}}],[{key:"BigInt",value:function(e){var t=Number.isFinite;if("number"==typeof e){if(0===e)return a.__zero();if(a.__isOneDigitInt(e))return 0>e?a.__oneDigit(-e,true):a.__oneDigit(e,false);if(!t(e)||o(e)!==e)throw new RangeError("The number "+e+" cannot be converted to BigInt because it is not an integer");return a.__fromDouble(e)}if("string"==typeof e){var _=a.__fromString(e);if(null===_)throw new SyntaxError("Cannot convert "+e+" to a BigInt");return _}if("boolean"==typeof e)return  true===e?a.__oneDigit(1,false):a.__zero();if("object"===i(e)){if(e.constructor===a)return e;var n=a.__toPrimitive(e);return a.BigInt(n)}throw new TypeError("Cannot convert "+e+" to a BigInt")}},{key:"toNumber",value:function(e){var t=e.length;if(0===t)return 0;if(1===t){var i=e.__unsignedDigit(0);return e.sign?-i:i}var _=e.__digit(t-1),n=a.__clz30(_),l=30*t-n;if(1024<l)return e.sign?-Infinity:1/0;var g=l-1,o=_,u=t-1,s=n+3,r=32===s?0:o<<s;r>>>=12;var d=s-12,h=12<=s?0:o<<20+s,b=20+s;for(0<d&&0<u&&(u--,o=e.__digit(u),r|=o>>>30-d,h=o<<d+2,b=d+2);0<b&&0<u;)u--,o=e.__digit(u),h|=30<=b?o<<b-30:o>>>30-b,b-=30;var m=a.__decideRounding(e,b,u,o);if((1===m||0===m&&1==(1&h))&&(h=h+1>>>0,0===h&&(r++,0!=r>>>20&&(r=0,g++,1023<g))))return e.sign?-Infinity:1/0;var c=e.sign?-2147483648:0;return g=g+1023<<20,a.__kBitConversionInts[1]=c|g|r,a.__kBitConversionInts[0]=h,a.__kBitConversionDouble[0]}},{key:"unaryMinus",value:function(e){if(0===e.length)return e;var t=e.__copy();return t.sign=!e.sign,t}},{key:"bitwiseNot",value:function(e){return e.sign?a.__absoluteSubOne(e).__trim():a.__absoluteAddOne(e,true)}},{key:"exponentiate",value:function(e,t){if(t.sign)throw new RangeError("Exponent must be positive");if(0===t.length)return a.__oneDigit(1,false);if(0===e.length)return e;if(1===e.length&&1===e.__digit(0))return e.sign&&0==(1&t.__digit(0))?a.unaryMinus(e):e;if(1<t.length)throw new RangeError("BigInt too big");var i=t.__unsignedDigit(0);if(1===i)return e;if(i>=a.__kMaxLengthBits)throw new RangeError("BigInt too big");if(1===e.length&&2===e.__digit(0)){var _=1+(0|i/30),n=e.sign&&0!=(1&i),l=new a(_,n);l.__initializeDigits();var g=1<<i%30;return l.__setDigit(_-1,g),l}var o=null,u=e;for(0!=(1&i)&&(o=e),i>>=1;0!==i;i>>=1)u=a.multiply(u,u),0!=(1&i)&&(null===o?o=u:o=a.multiply(o,u));return o}},{key:"multiply",value:function(e,t){if(0===e.length)return e;if(0===t.length)return t;var _=e.length+t.length;30<=e.__clzmsd()+t.__clzmsd()&&_--;var n=new a(_,e.sign!==t.sign);n.__initializeDigits();for(var l=0;l<e.length;l++)a.__multiplyAccumulate(t,e.__digit(l),n,l);return n.__trim()}},{key:"divide",value:function(e,t){if(0===t.length)throw new RangeError("Division by zero");if(0>a.__absoluteCompare(e,t))return a.__zero();var i,_=e.sign!==t.sign,n=t.__unsignedDigit(0);if(1===t.length&&32767>=n){if(1===n)return _===e.sign?e:a.unaryMinus(e);i=a.__absoluteDivSmall(e,n,null);}else i=a.__absoluteDivLarge(e,t,true,false);return i.sign=_,i.__trim()}},{key:"remainder",value:function i(e,t){if(0===t.length)throw new RangeError("Division by zero");if(0>a.__absoluteCompare(e,t))return e;var _=t.__unsignedDigit(0);if(1===t.length&&32767>=_){if(1===_)return a.__zero();var n=a.__absoluteModSmall(e,_);return 0===n?a.__zero():a.__oneDigit(n,e.sign)}var i=a.__absoluteDivLarge(e,t,false,true);return i.sign=e.sign,i.__trim()}},{key:"add",value:function(e,t){var i=e.sign;return i===t.sign?a.__absoluteAdd(e,t,i):0<=a.__absoluteCompare(e,t)?a.__absoluteSub(e,t,i):a.__absoluteSub(t,e,!i)}},{key:"subtract",value:function(e,t){var i=e.sign;return i===t.sign?0<=a.__absoluteCompare(e,t)?a.__absoluteSub(e,t,i):a.__absoluteSub(t,e,!i):a.__absoluteAdd(e,t,i)}},{key:"leftShift",value:function(e,t){return 0===t.length||0===e.length?e:t.sign?a.__rightShiftByAbsolute(e,t):a.__leftShiftByAbsolute(e,t)}},{key:"signedRightShift",value:function(e,t){return 0===t.length||0===e.length?e:t.sign?a.__leftShiftByAbsolute(e,t):a.__rightShiftByAbsolute(e,t)}},{key:"unsignedRightShift",value:function(){throw new TypeError("BigInts have no unsigned right shift; use >> instead")}},{key:"lessThan",value:function(e,t){return 0>a.__compareToBigInt(e,t)}},{key:"lessThanOrEqual",value:function(e,t){return 0>=a.__compareToBigInt(e,t)}},{key:"greaterThan",value:function(e,t){return 0<a.__compareToBigInt(e,t)}},{key:"greaterThanOrEqual",value:function(e,t){return 0<=a.__compareToBigInt(e,t)}},{key:"equal",value:function(e,t){if(e.sign!==t.sign)return  false;if(e.length!==t.length)return  false;for(var _=0;_<e.length;_++)if(e.__digit(_)!==t.__digit(_))return  false;return  true}},{key:"notEqual",value:function(e,t){return !a.equal(e,t)}},{key:"bitwiseAnd",value:function(e,t){if(!e.sign&&!t.sign)return a.__absoluteAnd(e,t).__trim();if(e.sign&&t.sign){var i=n(e.length,t.length)+1,_=a.__absoluteSubOne(e,i),l=a.__absoluteSubOne(t);return _=a.__absoluteOr(_,l,_),a.__absoluteAddOne(_,true,_).__trim()}if(e.sign){var g=[t,e];e=g[0],t=g[1];}return a.__absoluteAndNot(e,a.__absoluteSubOne(t)).__trim()}},{key:"bitwiseXor",value:function(e,t){if(!e.sign&&!t.sign)return a.__absoluteXor(e,t).__trim();if(e.sign&&t.sign){var i=n(e.length,t.length),_=a.__absoluteSubOne(e,i),l=a.__absoluteSubOne(t);return a.__absoluteXor(_,l,_).__trim()}var g=n(e.length,t.length)+1;if(e.sign){var o=[t,e];e=o[0],t=o[1];}var u=a.__absoluteSubOne(t,g);return u=a.__absoluteXor(u,e,u),a.__absoluteAddOne(u,true,u).__trim()}},{key:"bitwiseOr",value:function(e,t){var i=n(e.length,t.length);if(!e.sign&&!t.sign)return a.__absoluteOr(e,t).__trim();if(e.sign&&t.sign){var _=a.__absoluteSubOne(e,i),l=a.__absoluteSubOne(t);return _=a.__absoluteAnd(_,l,_),a.__absoluteAddOne(_,true,_).__trim()}if(e.sign){var g=[t,e];e=g[0],t=g[1];}var o=a.__absoluteSubOne(t,i);return o=a.__absoluteAndNot(o,e,o),a.__absoluteAddOne(o,true,o).__trim()}},{key:"asIntN",value:function(e,t){if(0===t.length)return t;if(e=o(e),0>e)throw new RangeError("Invalid value: not (convertible to) a safe integer");if(0===e)return a.__zero();if(e>=a.__kMaxLengthBits)return t;var _=0|(e+29)/30;if(t.length<_)return t;var l=t.__unsignedDigit(_-1),g=1<<(e-1)%30;if(t.length===_&&l<g)return t;if(!((l&g)===g))return a.__truncateToNBits(e,t);if(!t.sign)return a.__truncateAndSubFromPowerOfTwo(e,t,true);if(0==(l&g-1)){for(var u=_-2;0<=u;u--)if(0!==t.__digit(u))return a.__truncateAndSubFromPowerOfTwo(e,t,false);return t.length===_&&l===g?t:a.__truncateToNBits(e,t)}return a.__truncateAndSubFromPowerOfTwo(e,t,false)}},{key:"asUintN",value:function(e,t){if(0===t.length)return t;if(e=o(e),0>e)throw new RangeError("Invalid value: not (convertible to) a safe integer");if(0===e)return a.__zero();if(t.sign){if(e>a.__kMaxLengthBits)throw new RangeError("BigInt too big");return a.__truncateAndSubFromPowerOfTwo(e,t,false)}if(e>=a.__kMaxLengthBits)return t;var i=0|(e+29)/30;if(t.length<i)return t;var _=e%30;if(t.length==i){if(0===_)return t;var l=t.__digit(i-1);if(0==l>>>_)return t}return a.__truncateToNBits(e,t)}},{key:"ADD",value:function(e,t){if(e=a.__toPrimitive(e),t=a.__toPrimitive(t),"string"==typeof e)return "string"!=typeof t&&(t=t.toString()),e+t;if("string"==typeof t)return e.toString()+t;if(e=a.__toNumeric(e),t=a.__toNumeric(t),a.__isBigInt(e)&&a.__isBigInt(t))return a.add(e,t);if("number"==typeof e&&"number"==typeof t)return e+t;throw new TypeError("Cannot mix BigInt and other types, use explicit conversions")}},{key:"LT",value:function(e,t){return a.__compare(e,t,0)}},{key:"LE",value:function(e,t){return a.__compare(e,t,1)}},{key:"GT",value:function(e,t){return a.__compare(e,t,2)}},{key:"GE",value:function(e,t){return a.__compare(e,t,3)}},{key:"EQ",value:function(e,t){for(;;){if(a.__isBigInt(e))return a.__isBigInt(t)?a.equal(e,t):a.EQ(t,e);if("number"==typeof e){if(a.__isBigInt(t))return a.__equalToNumber(t,e);if("object"!==i(t))return e==t;t=a.__toPrimitive(t);}else if("string"==typeof e){if(a.__isBigInt(t))return e=a.__fromString(e),null!==e&&a.equal(e,t);if("object"!==i(t))return e==t;t=a.__toPrimitive(t);}else if("boolean"==typeof e){if(a.__isBigInt(t))return a.__equalToNumber(t,+e);if("object"!==i(t))return e==t;t=a.__toPrimitive(t);}else if("symbol"===i(e)){if(a.__isBigInt(t))return  false;if("object"!==i(t))return e==t;t=a.__toPrimitive(t);}else if("object"===i(e)){if("object"===i(t)&&t.constructor!==a)return e==t;e=a.__toPrimitive(e);}else return e==t}}},{key:"NE",value:function(e,t){return !a.EQ(e,t)}},{key:"DataViewGetBigInt64",value:function(e,t){var i=!!(2<arguments.length&&void 0!==arguments[2])&&arguments[2];return a.asIntN(64,a.DataViewGetBigUint64(e,t,i))}},{key:"DataViewGetBigUint64",value:function(e,t){var i=!!(2<arguments.length&&void 0!==arguments[2])&&arguments[2],_=i?[4,0]:[0,4],n=v(_,2),g=n[0],o=n[1],l=e.getUint32(t+g,i),u=e.getUint32(t+o,i),s=new a(3,false);return s.__setDigit(0,1073741823&u),s.__setDigit(1,(268435455&l)<<2|u>>>30),s.__setDigit(2,l>>>28),s.__trim()}},{key:"DataViewSetBigInt64",value:function(e,t,i){var _=!!(3<arguments.length&&void 0!==arguments[3])&&arguments[3];a.DataViewSetBigUint64(e,t,i,_);}},{key:"DataViewSetBigUint64",value:function(e,t,i){var _=!!(3<arguments.length&&void 0!==arguments[3])&&arguments[3];i=a.asUintN(64,i);var n=0,g=0;if(0<i.length&&(g=i.__digit(0),1<i.length)){var o=i.__digit(1);g|=o<<30,n=o>>>2,2<i.length&&(n|=i.__digit(2)<<28);}var u=_?[4,0]:[0,4],s=v(u,2),r=s[0],d=s[1];e.setUint32(t+r,n,_),e.setUint32(t+d,g,_);}},{key:"__zero",value:function(){return new a(0,false)}},{key:"__oneDigit",value:function(e,t){var i=new a(1,t);return i.__setDigit(0,e),i}},{key:"__decideRounding",value:function(e,t,i,_){if(0<t)return  -1;var n;if(0>t)n=-t-1;else {if(0===i)return  -1;i--,_=e.__digit(i),n=29;}var l=1<<n;if(0==(_&l))return  -1;if(l-=1,0!=(_&l))return 1;for(;0<i;)if(i--,0!==e.__digit(i))return 1;return 0}},{key:"__fromDouble",value:function(e){a.__kBitConversionDouble[0]=e;var t,i=2047&a.__kBitConversionInts[1]>>>20,_=i-1023,n=(0|_/30)+1,l=new a(n,0>e),g=1048575&a.__kBitConversionInts[1]|1048576,o=a.__kBitConversionInts[0],u=20,s=_%30,r=0;if(s<u){var d=u-s;r=d+32,t=g>>>d,g=g<<32-d|o>>>d,o<<=32-d;}else if(s===u)r=32,t=g,g=o,o=0;else {var h=s-u;r=32-h,t=g<<h|o>>>32-h,g=o<<h,o=0;}l.__setDigit(n-1,t);for(var b=n-2;0<=b;b--)0<r?(r-=30,t=g>>>2,g=g<<30|o>>>2,o<<=30):t=0,l.__setDigit(b,t);return l.__trim()}},{key:"__isWhitespace",value:function(e){return !!(13>=e&&9<=e)||(159>=e?32==e:131071>=e?160==e||5760==e:196607>=e?(e&=131071,10>=e||40==e||41==e||47==e||95==e||4096==e):65279==e)}},{key:"__fromString",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,i=0,_=e.length,n=0;if(n===_)return a.__zero();for(var l=e.charCodeAt(n);a.__isWhitespace(l);){if(++n===_)return a.__zero();l=e.charCodeAt(n);}if(43===l){if(++n===_)return null;l=e.charCodeAt(n),i=1;}else if(45===l){if(++n===_)return null;l=e.charCodeAt(n),i=-1;}if(0===t){if(t=10,48===l){if(++n===_)return a.__zero();if(l=e.charCodeAt(n),88===l||120===l){if(t=16,++n===_)return null;l=e.charCodeAt(n);}else if(79===l||111===l){if(t=8,++n===_)return null;l=e.charCodeAt(n);}else if(66===l||98===l){if(t=2,++n===_)return null;l=e.charCodeAt(n);}}}else if(16===t&&48===l){if(++n===_)return a.__zero();if(l=e.charCodeAt(n),88===l||120===l){if(++n===_)return null;l=e.charCodeAt(n);}}if(0!==i&&10!==t)return null;for(;48===l;){if(++n===_)return a.__zero();l=e.charCodeAt(n);}var g=_-n,o=a.__kMaxBitsPerChar[t],u=a.__kBitsPerCharTableMultiplier-1;if(g>1073741824/o)return null;var s=o*g+u>>>a.__kBitsPerCharTableShift,r=new a(0|(s+29)/30,false),h=10>t?t:10,b=10<t?t-10:0;if(0==(t&t-1)){o>>=a.__kBitsPerCharTableShift;var c=[],v=[],y=false;do{for(var f,D=0,p=0;;){if(f=void 0,l-48>>>0<h)f=l-48;else if((32|l)-97>>>0<b)f=(32|l)-87;else {y=true;break}if(p+=o,D=D<<o|f,++n===_){y=true;break}if(l=e.charCodeAt(n),30<p+o)break}c.push(D),v.push(p);}while(!y);a.__fillFromParts(r,c,v);}else {r.__initializeDigits();var k=false,B=0;do{for(var S,C=0,I=1;;){if(S=void 0,l-48>>>0<h)S=l-48;else if((32|l)-97>>>0<b)S=(32|l)-87;else {k=true;break}var A=I*t;if(1073741823<A)break;if(I=A,C=C*t+S,B++,++n===_){k=true;break}l=e.charCodeAt(n);}u=30*a.__kBitsPerCharTableMultiplier-1;var m=0|(o*B+u>>>a.__kBitsPerCharTableShift)/30;r.__inplaceMultiplyAdd(I,C,m);}while(!k)}if(n!==_){if(!a.__isWhitespace(l))return null;for(n++;n<_;n++)if(l=e.charCodeAt(n),!a.__isWhitespace(l))return null}return r.sign=-1===i,r.__trim()}},{key:"__fillFromParts",value:function(e,t,_){for(var n=0,l=0,g=0,o=t.length-1;0<=o;o--){var a=t[o],u=_[o];l|=a<<g,g+=u,30===g?(e.__setDigit(n++,l),g=0,l=0):30<g&&(e.__setDigit(n++,1073741823&l),g-=30,l=a>>>u-g);}if(0!==l){if(n>=e.length)throw new Error("implementation bug");e.__setDigit(n++,l);}for(;n<e.length;n++)e.__setDigit(n,0);}},{key:"__toStringBasePowerOfTwo",value:function(e,t){var _=e.length,n=t-1;n=(85&n>>>1)+(85&n),n=(51&n>>>2)+(51&n),n=(15&n>>>4)+(15&n);var l=n,g=t-1,o=e.__digit(_-1),u=a.__clz30(o),s=0|(30*_-u+l-1)/l;if(e.sign&&s++,268435456<s)throw new Error("string too long");for(var r=Array(s),d=s-1,h=0,b=0,m=0;m<_-1;m++){var c=e.__digit(m),v=(h|c<<b)&g;r[d--]=a.__kConversionChars[v];var y=l-b;for(h=c>>>y,b=30-y;b>=l;)r[d--]=a.__kConversionChars[h&g],h>>>=l,b-=l;}var f=(h|o<<b)&g;for(r[d--]=a.__kConversionChars[f],h=o>>>l-b;0!==h;)r[d--]=a.__kConversionChars[h&g],h>>>=l;if(e.sign&&(r[d--]="-"),-1!==d)throw new Error("implementation bug");return r.join("")}},{key:"__toStringGeneric",value:function(e,t,_){var n=e.length;if(0===n)return "";if(1===n){var l=e.__unsignedDigit(0).toString(t);return  false===_&&e.sign&&(l="-"+l),l}var g=30*n-a.__clz30(e.__digit(n-1)),o=a.__kMaxBitsPerChar[t],u=o-1,s=g*a.__kBitsPerCharTableMultiplier;s+=u-1,s=0|s/u;var r,d,h=s+1>>1,b=a.exponentiate(a.__oneDigit(t,false),a.__oneDigit(h,false)),m=b.__unsignedDigit(0);if(1===b.length&&32767>=m){r=new a(e.length,false),r.__initializeDigits();for(var c,v=0,y=2*e.length-1;0<=y;y--)c=v<<15|e.__halfDigit(y),r.__setHalfDigit(y,0|c/m),v=0|c%m;d=v.toString(t);}else {var f=a.__absoluteDivLarge(e,b,true,true);r=f.quotient;var D=f.remainder.__trim();d=a.__toStringGeneric(D,t,true);}r.__trim();for(var p=a.__toStringGeneric(r,t,true);d.length<h;)d="0"+d;return  false===_&&e.sign&&(p="-"+p),p+d}},{key:"__unequalSign",value:function(e){return e?-1:1}},{key:"__absoluteGreater",value:function(e){return e?-1:1}},{key:"__absoluteLess",value:function(e){return e?1:-1}},{key:"__compareToBigInt",value:function(e,t){var i=e.sign;if(i!==t.sign)return a.__unequalSign(i);var _=a.__absoluteCompare(e,t);return 0<_?a.__absoluteGreater(i):0>_?a.__absoluteLess(i):0}},{key:"__compareToNumber",value:function(e,i){if(a.__isOneDigitInt(i)){var _=e.sign,n=0>i;if(_!==n)return a.__unequalSign(_);if(0===e.length){if(n)throw new Error("implementation bug");return 0===i?0:-1}if(1<e.length)return a.__absoluteGreater(_);var l=t(i),g=e.__unsignedDigit(0);return g>l?a.__absoluteGreater(_):g<l?a.__absoluteLess(_):0}return a.__compareToDouble(e,i)}},{key:"__compareToDouble",value:function(e,t){if(t!==t)return t;if(t===1/0)return  -1;if(t===-Infinity)return 1;var i=e.sign;if(i!==0>t)return a.__unequalSign(i);if(0===t)throw new Error("implementation bug: should be handled elsewhere");if(0===e.length)return  -1;a.__kBitConversionDouble[0]=t;var _=2047&a.__kBitConversionInts[1]>>>20;if(2047==_)throw new Error("implementation bug: handled elsewhere");var n=_-1023;if(0>n)return a.__absoluteGreater(i);var l=e.length,g=e.__digit(l-1),o=a.__clz30(g),u=30*l-o,s=n+1;if(u<s)return a.__absoluteLess(i);if(u>s)return a.__absoluteGreater(i);var r=1048576|1048575&a.__kBitConversionInts[1],d=a.__kBitConversionInts[0],h=20,b=29-o;if(b!==(0|(u-1)%30))throw new Error("implementation bug");var m,c=0;if(b<h){var v=h-b;c=v+32,m=r>>>v,r=r<<32-v|d>>>v,d<<=32-v;}else if(b===h)c=32,m=r,r=d,d=0;else {var y=b-h;c=32-y,m=r<<y|d>>>32-y,r=d<<y,d=0;}if(g>>>=0,m>>>=0,g>m)return a.__absoluteGreater(i);if(g<m)return a.__absoluteLess(i);for(var f=l-2;0<=f;f--){0<c?(c-=30,m=r>>>2,r=r<<30|d>>>2,d<<=30):m=0;var D=e.__unsignedDigit(f);if(D>m)return a.__absoluteGreater(i);if(D<m)return a.__absoluteLess(i)}if(0!==r||0!==d){if(0===c)throw new Error("implementation bug");return a.__absoluteLess(i)}return 0}},{key:"__equalToNumber",value:function(e,i){return a.__isOneDigitInt(i)?0===i?0===e.length:1===e.length&&e.sign===0>i&&e.__unsignedDigit(0)===t(i):0===a.__compareToDouble(e,i)}},{key:"__comparisonResultToBool",value:function(e,t){return 0===t?0>e:1===t?0>=e:2===t?0<e:3===t?0<=e:void 0}},{key:"__compare",value:function(e,t,i){if(e=a.__toPrimitive(e),t=a.__toPrimitive(t),"string"==typeof e&&"string"==typeof t)switch(i){case 0:return e<t;case 1:return e<=t;case 2:return e>t;case 3:return e>=t;}if(a.__isBigInt(e)&&"string"==typeof t)return t=a.__fromString(t),null!==t&&a.__comparisonResultToBool(a.__compareToBigInt(e,t),i);if("string"==typeof e&&a.__isBigInt(t))return e=a.__fromString(e),null!==e&&a.__comparisonResultToBool(a.__compareToBigInt(e,t),i);if(e=a.__toNumeric(e),t=a.__toNumeric(t),a.__isBigInt(e)){if(a.__isBigInt(t))return a.__comparisonResultToBool(a.__compareToBigInt(e,t),i);if("number"!=typeof t)throw new Error("implementation bug");return a.__comparisonResultToBool(a.__compareToNumber(e,t),i)}if("number"!=typeof e)throw new Error("implementation bug");if(a.__isBigInt(t))return a.__comparisonResultToBool(a.__compareToNumber(t,e),2^i);if("number"!=typeof t)throw new Error("implementation bug");return 0===i?e<t:1===i?e<=t:2===i?e>t:3===i?e>=t:void 0}},{key:"__absoluteAdd",value:function(e,t,_){if(e.length<t.length)return a.__absoluteAdd(t,e,_);if(0===e.length)return e;if(0===t.length)return e.sign===_?e:a.unaryMinus(e);var n=e.length;(0===e.__clzmsd()||t.length===e.length&&0===t.__clzmsd())&&n++;for(var l,g=new a(n,_),o=0,u=0;u<t.length;u++)l=e.__digit(u)+t.__digit(u)+o,o=l>>>30,g.__setDigit(u,1073741823&l);for(;u<e.length;u++){var s=e.__digit(u)+o;o=s>>>30,g.__setDigit(u,1073741823&s);}return u<g.length&&g.__setDigit(u,o),g.__trim()}},{key:"__absoluteSub",value:function(e,t,_){if(0===e.length)return e;if(0===t.length)return e.sign===_?e:a.unaryMinus(e);for(var n,l=new a(e.length,_),g=0,o=0;o<t.length;o++)n=e.__digit(o)-t.__digit(o)-g,g=1&n>>>30,l.__setDigit(o,1073741823&n);for(;o<e.length;o++){var u=e.__digit(o)-g;g=1&u>>>30,l.__setDigit(o,1073741823&u);}return l.__trim()}},{key:"__absoluteAddOne",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length;null===_?_=new a(n,t):_.sign=t;for(var l,g=1,o=0;o<n;o++)l=e.__digit(o)+g,g=l>>>30,_.__setDigit(o,1073741823&l);return 0!==g&&_.__setDigitGrow(n,1),_}},{key:"__absoluteSubOne",value:function(e,t){var _=e.length;t=t||_;for(var n,l=new a(t,false),g=1,o=0;o<_;o++)n=e.__digit(o)-g,g=1&n>>>30,l.__setDigit(o,1073741823&n);if(0!==g)throw new Error("implementation bug");for(var u=_;u<t;u++)l.__setDigit(u,0);return l}},{key:"__absoluteAnd",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length,l=t.length,g=l;if(n<l){g=n;var o=e,u=n;e=t,n=l,t=o,l=u;}var s=g;null===_?_=new a(s,false):s=_.length;for(var r=0;r<g;r++)_.__setDigit(r,e.__digit(r)&t.__digit(r));for(;r<s;r++)_.__setDigit(r,0);return _}},{key:"__absoluteAndNot",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length,l=t.length,g=l;n<l&&(g=n);var o=n;null===_?_=new a(o,false):o=_.length;for(var u=0;u<g;u++)_.__setDigit(u,e.__digit(u)&~t.__digit(u));for(;u<n;u++)_.__setDigit(u,e.__digit(u));for(;u<o;u++)_.__setDigit(u,0);return _}},{key:"__absoluteOr",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length,l=t.length,g=l;if(n<l){g=n;var o=e,u=n;e=t,n=l,t=o,l=u;}var s=n;null===_?_=new a(s,false):s=_.length;for(var r=0;r<g;r++)_.__setDigit(r,e.__digit(r)|t.__digit(r));for(;r<n;r++)_.__setDigit(r,e.__digit(r));for(;r<s;r++)_.__setDigit(r,0);return _}},{key:"__absoluteXor",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=e.length,l=t.length,g=l;if(n<l){g=n;var o=e,u=n;e=t,n=l,t=o,l=u;}var s=n;null===_?_=new a(s,false):s=_.length;for(var r=0;r<g;r++)_.__setDigit(r,e.__digit(r)^t.__digit(r));for(;r<n;r++)_.__setDigit(r,e.__digit(r));for(;r<s;r++)_.__setDigit(r,0);return _}},{key:"__absoluteCompare",value:function(e,t){var _=e.length-t.length;if(0!=_)return _;for(var n=e.length-1;0<=n&&e.__digit(n)===t.__digit(n);)n--;return 0>n?0:e.__unsignedDigit(n)>t.__unsignedDigit(n)?1:-1}},{key:"__multiplyAccumulate",value:function(e,t,_,n){if(0!==t){for(var l=32767&t,g=t>>>15,o=0,u=0,s=0;s<e.length;s++,n++){var r=_.__digit(n),d=e.__digit(s),h=32767&d,b=d>>>15,m=a.__imul(h,l),c=a.__imul(h,g),v=a.__imul(b,l),y=a.__imul(b,g);r+=u+m+o,o=r>>>30,r&=1073741823,r+=((32767&c)<<15)+((32767&v)<<15),o+=r>>>30,u=y+(c>>>15)+(v>>>15),_.__setDigit(n,1073741823&r);}for(;0!==o||0!==u;n++){var f=_.__digit(n);f+=o+u,u=0,o=f>>>30,_.__setDigit(n,1073741823&f);}}}},{key:"__internalMultiplyAdd",value:function(e,t,_,l,g){for(var o=_,u=0,s=0;s<l;s++){var d=e.__digit(s),h=a.__imul(32767&d,t),b=a.__imul(d>>>15,t),m=h+((32767&b)<<15)+u+o;o=m>>>30,u=b>>>15,g.__setDigit(s,1073741823&m);}if(g.length>l)for(g.__setDigit(l++,o+u);l<g.length;)g.__setDigit(l++,0);else if(0!==o+u)throw new Error("implementation bug")}},{key:"__absoluteDivSmall",value:function(e,t){var _=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;null===_&&(_=new a(e.length,false));for(var n=0,l=2*e.length-1;0<=l;l-=2){var g=(n<<15|e.__halfDigit(l))>>>0,o=0|g/t;n=0|g%t,g=(n<<15|e.__halfDigit(l-1))>>>0;var u=0|g/t;n=0|g%t,_.__setDigit(l>>>1,o<<15|u);}return _}},{key:"__absoluteModSmall",value:function(e,t){for(var _,n=0,l=2*e.length-1;0<=l;l--)_=(n<<15|e.__halfDigit(l))>>>0,n=0|_%t;return n}},{key:"__absoluteDivLarge",value:function(e,t,i,_){var l=t.__halfDigitLength(),n=t.length,g=e.__halfDigitLength()-l,o=null;i&&(o=new a(g+2>>>1,false),o.__initializeDigits());var s=new a(l+2>>>1,false);s.__initializeDigits();var r=a.__clz15(t.__halfDigit(l-1));0<r&&(t=a.__specialLeftShift(t,r,0));for(var d=a.__specialLeftShift(e,r,1),u=t.__halfDigit(l-1),h=0,b=g;0<=b;b--){var m=32767,v=d.__halfDigit(b+l);if(v!==u){var y=(v<<15|d.__halfDigit(b+l-1))>>>0;m=0|y/u;for(var f=0|y%u,D=t.__halfDigit(l-2),p=d.__halfDigit(b+l-2);a.__imul(m,D)>>>0>(f<<16|p)>>>0&&(m--,f+=u,!(32767<f)););}a.__internalMultiplyAdd(t,m,0,n,s);var k=d.__inplaceSub(s,b,l+1);0!==k&&(k=d.__inplaceAdd(t,b,l),d.__setHalfDigit(b+l,32767&d.__halfDigit(b+l)+k),m--),i&&(1&b?h=m<<15:o.__setDigit(b>>>1,h|m));}if(_)return d.__inplaceRightShift(r),i?{quotient:o,remainder:d}:d;if(i)return o;throw new Error("unreachable")}},{key:"__clz15",value:function(e){return a.__clz30(e)-15}},{key:"__specialLeftShift",value:function(e,t,_){var l=e.length,n=new a(l+_,false);if(0===t){for(var g=0;g<l;g++)n.__setDigit(g,e.__digit(g));return 0<_&&n.__setDigit(l,0),n}for(var o,u=0,s=0;s<l;s++)o=e.__digit(s),n.__setDigit(s,1073741823&o<<t|u),u=o>>>30-t;return 0<_&&n.__setDigit(l,u),n}},{key:"__leftShiftByAbsolute",value:function(e,t){var _=a.__toShiftAmount(t);if(0>_)throw new RangeError("BigInt too big");var n=0|_/30,l=_%30,g=e.length,o=0!==l&&0!=e.__digit(g-1)>>>30-l,u=g+n+(o?1:0),s=new a(u,e.sign);if(0===l){for(var r=0;r<n;r++)s.__setDigit(r,0);for(;r<u;r++)s.__setDigit(r,e.__digit(r-n));}else {for(var h=0,b=0;b<n;b++)s.__setDigit(b,0);for(var m,c=0;c<g;c++)m=e.__digit(c),s.__setDigit(c+n,1073741823&m<<l|h),h=m>>>30-l;if(o)s.__setDigit(g+n,h);else if(0!==h)throw new Error("implementation bug")}return s.__trim()}},{key:"__rightShiftByAbsolute",value:function(e,t){var _=e.length,n=e.sign,l=a.__toShiftAmount(t);if(0>l)return a.__rightShiftByMaximum(n);var g=0|l/30,o=l%30,u=_-g;if(0>=u)return a.__rightShiftByMaximum(n);var s=false;if(n){if(0!=(e.__digit(g)&(1<<o)-1))s=true;else for(var r=0;r<g;r++)if(0!==e.__digit(r)){s=true;break}}if(s&&0===o){var h=e.__digit(_-1);0==~h&&u++;}var b=new a(u,n);if(0===o){b.__setDigit(u-1,0);for(var m=g;m<_;m++)b.__setDigit(m-g,e.__digit(m));}else {for(var c,v=e.__digit(g)>>>o,y=_-g-1,f=0;f<y;f++)c=e.__digit(f+g+1),b.__setDigit(f,1073741823&c<<30-o|v),v=c>>>o;b.__setDigit(y,v);}return s&&(b=a.__absoluteAddOne(b,true,b)),b.__trim()}},{key:"__rightShiftByMaximum",value:function(e){return e?a.__oneDigit(1,true):a.__zero()}},{key:"__toShiftAmount",value:function(e){if(1<e.length)return  -1;var t=e.__unsignedDigit(0);return t>a.__kMaxLengthBits?-1:t}},{key:"__toPrimitive",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"default";if("object"!==i(e))return e;if(e.constructor===a)return e;if("undefined"!=typeof Symbol&&"symbol"===i(Symbol.toPrimitive)){var _=e[Symbol.toPrimitive];if(_){var n=_(t);if("object"!==i(n))return n;throw new TypeError("Cannot convert object to primitive value")}}var l=e.valueOf;if(l){var g=l.call(e);if("object"!==i(g))return g}var o=e.toString;if(o){var u=o.call(e);if("object"!==i(u))return u}throw new TypeError("Cannot convert object to primitive value")}},{key:"__toNumeric",value:function(e){return a.__isBigInt(e)?e:+e}},{key:"__isBigInt",value:function(e){return "object"===i(e)&&null!==e&&e.constructor===a}},{key:"__truncateToNBits",value:function(e,t){for(var _=0|(e+29)/30,n=new a(_,t.sign),l=_-1,g=0;g<l;g++)n.__setDigit(g,t.__digit(g));var o=t.__digit(l);if(0!=e%30){var u=32-e%30;o=o<<u>>>u;}return n.__setDigit(l,o),n.__trim()}},{key:"__truncateAndSubFromPowerOfTwo",value:function(e,t,_){for(var n=Math.min,l,g=0|(e+29)/30,o=new a(g,_),u=0,s=g-1,d=0,h=n(s,t.length);u<h;u++)l=0-t.__digit(u)-d,d=1&l>>>30,o.__setDigit(u,1073741823&l);for(;u<s;u++)o.__setDigit(u,0|1073741823&-d);var b,m=s<t.length?t.__digit(s):0,c=e%30;if(0===c)b=0-m-d,b&=1073741823;else {var v=32-c;m=m<<v>>>v;var y=1<<32-v;b=y-m-d,b&=y-1;}return o.__setDigit(s,b),o.__trim()}},{key:"__digitPow",value:function(e,t){for(var i=1;0<t;)1&t&&(i*=e),t>>>=1,e*=e;return i}},{key:"__isOneDigitInt",value:function(e){return (1073741823&e)===e}}]),a}(h(Array));return S.__kMaxLength=33554432,S.__kMaxLengthBits=S.__kMaxLength<<5,S.__kMaxBitsPerChar=[0,0,32,51,64,75,83,90,96,102,107,111,115,119,122,126,128,131,134,136,139,141,143,145,147,149,151,153,154,156,158,159,160,162,163,165,166],S.__kBitsPerCharTableShift=5,S.__kBitsPerCharTableMultiplier=1<<S.__kBitsPerCharTableShift,S.__kConversionChars=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"],S.__kBitConversionBuffer=new ArrayBuffer(8),S.__kBitConversionDouble=new Float64Array(S.__kBitConversionBuffer),S.__kBitConversionInts=new Int32Array(S.__kBitConversionBuffer),S.__clz30=t?function(e){return t(e)-2}:function(e){var t=Math.LN2,i=Math.log;return 0===e?30:0|29-(0|i(e>>>0)/t)},S.__imul=e||function(e,t){return 0|e*t},S});
		
	} (jsbiUmd$1));
	return jsbiUmd$1.exports;
}

var jsbiUmdExports = /*@__PURE__*/ requireJsbiUmd();
var e = /*@__PURE__*/getDefaultExportFromCjs(jsbiUmdExports);

const t=e.BigInt(0),n=e.BigInt(1),r=e.BigInt(2),o=e.BigInt(10),i=e.BigInt(24),a=e.BigInt(60),s=e.BigInt(1e3),c=e.BigInt(1e6),d=e.BigInt(1e9),h=e.multiply(e.BigInt(3600),d),u=e.multiply(a,d),l=e.multiply(h,i);function m(t){return "bigint"==typeof t?e.BigInt(t.toString(10)):t}function f(n){return e.equal(e.remainder(n,r),t)}function y(n){return e.lessThan(n,t)?e.unaryMinus(n):n}function p(t,n){return e.lessThan(t,n)?-1:e.greaterThan(t,n)?1:0}function g(t,n){return {quotient:e.divide(t,n),remainder:e.remainder(t,n)}}var w,v;const b="slot-epochNanoSeconds",D="slot-iso-date",T="slot-iso-date-time",M="slot-time",E="slot-calendar",I="slot-date-brand",C="slot-year-month-brand",O="slot-month-day-brand",$="slot-time-zone",Y="slot-years",R="slot-months",S="slot-weeks",j="slot-days",k="slot-hours",N="slot-minutes",x="slot-seconds",L="slot-milliseconds",P="slot-microseconds",U="slot-nanoseconds",B="date",Z="ym",F="md",H="time",z="datetime",A="instant",q="original",W="timezone-canonical",_="timezone-original",J="calendar-id",G="locale",K="options",V=new WeakMap,X=Symbol.for("@@Temporal__GetSlots");(w=globalThis)[X]||(w[X]=function(e){return V.get(e)});const Q=globalThis[X],ee=Symbol.for("@@Temporal__CreateSlots");(v=globalThis)[ee]||(v[ee]=function(e){V.set(e,Object.create(null));});const te=globalThis[ee];function ne(e,...t){if(!e||"object"!=typeof e)return  false;const n=Q(e);return !!n&&t.every((e=>e in n))}function re(e,t){const n=Q(e)?.[t];if(void 0===n)throw new TypeError(`Missing internal slot ${t}`);return n}function oe(e,t,n){const r=Q(e);if(void 0===r)throw new TypeError("Missing slots for the given container");if(r[t])throw new TypeError(`${t} already has set`);r[t]=n;}const ie={};function ae(e,t){Object.defineProperty(e.prototype,Symbol.toStringTag,{value:t,writable:false,enumerable:false,configurable:true});const n=Object.getOwnPropertyNames(e);for(let t=0;t<n.length;t++){const r=n[t],o=Object.getOwnPropertyDescriptor(e,r);o.configurable&&o.enumerable&&(o.enumerable=false,Object.defineProperty(e,r,o));}const r=Object.getOwnPropertyNames(e.prototype);for(let t=0;t<r.length;t++){const n=r[t],o=Object.getOwnPropertyDescriptor(e.prototype,n);o.configurable&&o.enumerable&&(o.enumerable=false,Object.defineProperty(e.prototype,n,o));}se(t,e),se(`${t}.prototype`,e.prototype);}function se(e,t){const n=`%${e}%`;if(void 0!==ie[n])throw new Error(`intrinsic ${e} already exists`);ie[n]=t;}function ce(e){return ie[e]}function de(e,t){let n=e;if(0===n)return {div:n,mod:n};const r=Math.sign(n);n=Math.abs(n);const o=Math.trunc(1+Math.log10(n));if(t>=o)return {div:0*r,mod:r*n};if(0===t)return {div:r*n,mod:0*r};const i=n.toPrecision(o);return {div:r*Number.parseInt(i.slice(0,o-t),10),mod:r*Number.parseInt(i.slice(o-t),10)}}function he(e,t,n){let r=e,o=n;if(0===r)return o;const i=Math.sign(r)||Math.sign(o);r=Math.abs(r),o=Math.abs(o);const a=r.toPrecision(Math.trunc(1+Math.log10(r)));if(0===o)return i*Number.parseInt(a+"0".repeat(t),10);const s=a+o.toPrecision(Math.trunc(1+Math.log10(o))).padStart(t,"0");return i*Number.parseInt(s,10)}function ue(e,t){const n="negative"===t;switch(e){case "ceil":return n?"zero":"infinity";case "floor":return n?"infinity":"zero";case "expand":return "infinity";case "trunc":return "zero";case "halfCeil":return n?"half-zero":"half-infinity";case "halfFloor":return n?"half-infinity":"half-zero";case "halfExpand":return "half-infinity";case "halfTrunc":return "half-zero";case "halfEven":return "half-even"}}function le(e,t,n,r,o){return "zero"===o?e:"infinity"===o?t:n<0?e:n>0?t:"half-zero"===o?e:"half-infinity"===o?t:r?e:t}class TimeDuration{constructor(t){this.totalNs=m(t),this.sec=e.toNumber(e.divide(this.totalNs,d)),this.subsec=e.toNumber(e.remainder(this.totalNs,d));}static validateNew(t,n){if(e.greaterThan(y(t),TimeDuration.MAX))throw new RangeError(`${n} of duration time units cannot exceed ${TimeDuration.MAX} s`);return new TimeDuration(t)}static fromEpochNsDiff(t,n){const r=e.subtract(m(t),m(n));return new TimeDuration(r)}static fromComponents(t,n,r,o,i,a){const l=e.add(e.add(e.add(e.add(e.add(e.BigInt(a),e.multiply(e.BigInt(i),s)),e.multiply(e.BigInt(o),c)),e.multiply(e.BigInt(r),d)),e.multiply(e.BigInt(n),u)),e.multiply(e.BigInt(t),h));return TimeDuration.validateNew(l,"total")}abs(){return new TimeDuration(y(this.totalNs))}add(t){return TimeDuration.validateNew(e.add(this.totalNs,t.totalNs),"sum")}add24HourDays(t){return TimeDuration.validateNew(e.add(this.totalNs,e.multiply(e.BigInt(t),l)),"sum")}addToEpochNs(t){return e.add(m(t),this.totalNs)}cmp(e){return p(this.totalNs,e.totalNs)}divmod(t){const{quotient:n,remainder:r}=g(this.totalNs,e.BigInt(t));return {quotient:e.toNumber(n),remainder:new TimeDuration(r)}}fdiv(n){const r=m(n),i=e.BigInt(r);let{quotient:a,remainder:s}=g(this.totalNs,i);const c=[];let d;const h=(e.lessThan(this.totalNs,t)?-1:1)*Math.sign(e.toNumber(r));for(;!e.equal(s,t)&&c.length<50;)s=e.multiply(s,o),({quotient:d,remainder:s}=g(s,i)),c.push(Math.abs(e.toNumber(d)));return h*Number(y(a).toString()+"."+c.join(""))}isZero(){return e.equal(this.totalNs,t)}round(o,i){const a=m(o);if(e.equal(a,n))return this;const{quotient:s,remainder:c}=g(this.totalNs,a),d=e.lessThan(this.totalNs,t)?"negative":"positive",h=e.multiply(y(s),a),u=e.add(h,a),l=p(y(e.multiply(c,r)),a),w=ue(i,d),v=e.equal(y(this.totalNs),h)?h:le(h,u,l,f(s),w),b="positive"===d?v:e.unaryMinus(v);return TimeDuration.validateNew(b,"rounding")}sign(){return this.cmp(new TimeDuration(t))}subtract(t){return TimeDuration.validateNew(e.subtract(this.totalNs,t.totalNs),"difference")}}TimeDuration.MAX=e.BigInt("9007199254740991999999999"),TimeDuration.ZERO=new TimeDuration(t);const me=/[A-Za-z._][A-Za-z._0-9+-]*/,fe=new RegExp(`(?:${/(?:[+-](?:[01][0-9]|2[0-3])(?::?[0-5][0-9])?)/.source}|(?:${me.source})(?:\\/(?:${me.source}))*)`),ye=/(?:[+-]\d{6}|\d{4})/,pe=/(?:0[1-9]|1[0-2])/,ge=/(?:0[1-9]|[12]\d|3[01])/,we=new RegExp(`(${ye.source})(?:-(${pe.source})-(${ge.source})|(${pe.source})(${ge.source}))`),ve=/(\d{2})(?::(\d{2})(?::(\d{2})(?:[.,](\d{1,9}))?)?|(\d{2})(?:(\d{2})(?:[.,](\d{1,9}))?)?)?/,be=/((?:[+-])(?:[01][0-9]|2[0-3])(?::?(?:[0-5][0-9])(?::?(?:[0-5][0-9])(?:[.,](?:\d{1,9}))?)?)?)/,De=new RegExp(`([zZ])|${be.source}?`),Te=/\[(!)?([a-z_][a-z0-9_-]*)=([A-Za-z0-9]+(?:-[A-Za-z0-9]+)*)\]/g,Me=new RegExp([`^${we.source}`,`(?:(?:[tT]|\\s+)${ve.source}(?:${De.source})?)?`,`(?:\\[!?(${fe.source})\\])?`,`((?:${Te.source})*)$`].join("")),Ee=new RegExp([`^[tT]?${ve.source}`,`(?:${De.source})?`,`(?:\\[!?${fe.source}\\])?`,`((?:${Te.source})*)$`].join("")),Ie=new RegExp(`^(${ye.source})-?(${pe.source})(?:\\[!?${fe.source}\\])?((?:${Te.source})*)$`),Ce=new RegExp(`^(?:--)?(${pe.source})-?(${ge.source})(?:\\[!?${fe.source}\\])?((?:${Te.source})*)$`),Oe=/(\d+)(?:[.,](\d{1,9}))?/,$e=new RegExp(`(?:${Oe.source}H)?(?:${Oe.source}M)?(?:${Oe.source}S)?`),Ye=new RegExp(`^([+-])?P${/(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)W)?(?:(\d+)D)?/.source}(?:T(?!$)${$e.source})?$`,"i"),Re=864e5,Se=1e6*Re,je=6e10,ke=1e8*Re,Ne=xo(ke),xe=e.unaryMinus(Ne),Le=e.add(e.subtract(xe,l),n),Pe=e.subtract(e.add(Ne,l),n),Ue=146097*Re,Be=-271821,Ze=275760,Fe=Date.UTC(1847,0,1),He=["iso8601","hebrew","islamic","islamic-umalqura","islamic-tbla","islamic-civil","islamic-rgsa","islamicc","persian","ethiopic","ethioaa","ethiopic-amete-alem","coptic","chinese","dangi","roc","indian","buddhist","japanese","gregory"],ze=new Set(["ACT","AET","AGT","ART","AST","BET","BST","CAT","CNT","CST","CTT","EAT","ECT","IET","IST","JST","MIT","NET","NST","PLT","PNT","PRT","PST","SST","VST"]);function Ae(e){return "object"==typeof e&&null!==e||"function"==typeof e}function qe(e){if("bigint"==typeof e)throw new TypeError("Cannot convert BigInt to number");return Number(e)}function We(e){if("symbol"==typeof e)throw new TypeError("Cannot convert a Symbol value to a String");return String(e)}function _e(e){const t=qe(e);if(0===t)return 0;if(Number.isNaN(t)||t===1/0||t===-1/0)throw new RangeError("invalid number value");const n=Math.trunc(t);return 0===n?0:n}function Je(e,t){const n=_e(e);if(n<=0){if(void 0!==t)throw new RangeError(`property '${t}' cannot be a a number less than one`);throw new RangeError("Cannot convert a number less than one to a positive integer")}return n}function Ge(e){const t=qe(e);if(Number.isNaN(t))throw new RangeError("not a number");if(t===1/0||t===-1/0)throw new RangeError("infinity is out of range");if(!function(e){if("number"!=typeof e||Number.isNaN(e)||e===1/0||e===-1/0)return  false;const t=Math.abs(e);return Math.floor(t)===t}(t))throw new RangeError(`unsupported fractional value ${e}`);return 0===t?0:t}function Ke(e,t){return String(e).padStart(t,"0")}function Ve(e){if("string"!=typeof e)throw new TypeError(`expected a string, not ${String(e)}`);return e}function Xe(e,t){if(Ae(e)){const t=e?.toString();if("string"==typeof t||"number"==typeof t)return t;throw new TypeError("Cannot convert object to primitive value")}return e}const Qe=["era","eraYear","year","month","monthCode","day","hour","minute","second","millisecond","microsecond","nanosecond","offset","timeZone"],et={era:We,eraYear:_e,year:_e,month:Je,monthCode:function(e){const t=Ve(Xe(e));if(t.length<3||t.length>4||"M"!==t[0]||-1==="0123456789".indexOf(t[1])||-1==="0123456789".indexOf(t[2])||t[1]+t[2]==="00"&&"L"!==t[3]||"L"!==t[3]&&void 0!==t[3])throw new RangeError(`bad month code ${t}; must match M01-M99 or M00L-M99L`);return t},day:Je,hour:_e,minute:_e,second:_e,millisecond:_e,microsecond:_e,nanosecond:_e,offset:function(e){const t=Ve(Xe(e));return sr(t),t},timeZone:Bn},tt={hour:0,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0},nt=[["years","year","date"],["months","month","date"],["weeks","week","date"],["days","day","date"],["hours","hour","time"],["minutes","minute","time"],["seconds","second","time"],["milliseconds","millisecond","time"],["microseconds","microsecond","time"],["nanoseconds","nanosecond","time"]],rt=Object.fromEntries(nt.map((e=>[e[0],e[1]]))),ot=Object.fromEntries(nt.map((([e,t])=>[t,e]))),it=nt.map((([,e])=>e)),at={day:Se,hour:36e11,minute:6e10,second:1e9,millisecond:1e6,microsecond:1e3,nanosecond:1},st=["days","hours","microseconds","milliseconds","minutes","months","nanoseconds","seconds","weeks","years"],ct=Intl.DateTimeFormat,dt=new Map;function ht(e){const t=Ao(e);let n=dt.get(t);return void 0===n&&(n=new ct("en-us",{timeZone:t,hour12:false,era:"short",year:"numeric",month:"numeric",day:"numeric",hour:"numeric",minute:"numeric",second:"numeric"}),dt.set(t,n)),n}function ut(e){return ne(e,b)&&!ne(e,$,E)}function lt(e){return ne(e,Y,R,j,k,N,x,L,P,U)}function mt(e){return ne(e,I)}function ft(e){return ne(e,M)}function yt(e){return ne(e,T)}function pt(e){return ne(e,C)}function gt(e){return ne(e,O)}function wt(e){return ne(e,b,$,E)}function vt(e,t){if(!t(e))throw new TypeError("invalid receiver: method called with the wrong type of this-object")}function bt(e){if(ne(e,E)||ne(e,$))throw new TypeError("with() does not support a calendar or timeZone property");if(ft(e))throw new TypeError("with() does not accept Temporal.PlainTime, use withPlainTime() instead");if(void 0!==e.calendar)throw new TypeError("with() does not support a calendar property");if(void 0!==e.timeZone)throw new TypeError("with() does not support a timeZone property")}function Dt(e,t){return "never"===t||"auto"===t&&"iso8601"===e?"":`[${"critical"===t?"!":""}u-ca=${e}]`}function Tt(e){let t,n,r=false;for(Te.lastIndex=0;n=Te.exec(e);){const{1:o,2:i,3:a}=n;if("u-ca"===i){if(void 0===t)t=a,r="!"===o;else if("!"===o||r)throw new RangeError(`Invalid annotations in ${e}: more than one u-ca present with critical flag`)}else if("!"===o)throw new RangeError(`Unrecognized annotation: !${i}=${a}`)}return t}function Mt(e){const t=Me.exec(e);if(!t)throw new RangeError(`invalid RFC 9557 string: ${e}`);const n=Tt(t[16]);let r=t[1];if("-000000"===r)throw new RangeError(`invalid RFC 9557 string: ${e}`);const o=+r,i=+(t[2]??t[4]??1),a=+(t[3]??t[5]??1),s=void 0!==t[6],c=+(t[6]??0),d=+(t[7]??t[10]??0);let h=+(t[8]??t[11]??0);60===h&&(h=59);const u=(t[9]??t[12]??"")+"000000000",l=+u.slice(0,3),m=+u.slice(3,6),f=+u.slice(6,9);let y,p=false;t[13]?(y=void 0,p=true):t[14]&&(y=t[14]);const g=t[15];return Ur(o,i,a,c,d,h,l,m,f),{year:o,month:i,day:a,time:s?{hour:c,minute:d,second:h,millisecond:l,microsecond:m,nanosecond:f}:"start-of-day",tzAnnotation:g,offset:y,z:p,calendar:n}}function Et(e){const t=Ee.exec(e);let n,r,o,i,a,s,c;if(t){c=Tt(t[10]),n=+(t[1]??0),r=+(t[2]??t[5]??0),o=+(t[3]??t[6]??0),60===o&&(o=59);const e=(t[4]??t[7]??"")+"000000000";if(i=+e.slice(0,3),a=+e.slice(3,6),s=+e.slice(6,9),t[8])throw new RangeError("Z designator not supported for PlainTime")}else {let t,d;if(({time:t,z:d,calendar:c}=Mt(e)),"start-of-day"===t)throw new RangeError(`time is missing in string: ${e}`);if(d)throw new RangeError("Z designator not supported for PlainTime");({hour:n,minute:r,second:o,millisecond:i,microsecond:a,nanosecond:s}=t);}if(Pr(n,r,o,i,a,s),/[tT ][0-9][0-9]/.test(e))return {hour:n,minute:r,second:o,millisecond:i,microsecond:a,nanosecond:s,calendar:c};try{const{month:t,day:n}=Ct(e);xr(1972,t,n);}catch{try{const{year:t,month:n}=It(e);xr(t,n,1);}catch{return {hour:n,minute:r,second:o,millisecond:i,microsecond:a,nanosecond:s,calendar:c}}}throw new RangeError(`invalid RFC 9557 time-only string ${e}; may need a T prefix`)}function It(e){const t=Ie.exec(e);let n,r,o,i;if(t){o=Tt(t[3]);let a=t[1];if("-000000"===a)throw new RangeError(`invalid RFC 9557 string: ${e}`);if(n=+a,r=+t[2],i=1,void 0!==o&&"iso8601"!==o)throw new RangeError("YYYY-MM format is only valid with iso8601 calendar")}else {let t;if(({year:n,month:r,calendar:o,day:i,z:t}=Mt(e)),t)throw new RangeError("Z designator not supported for PlainYearMonth")}return {year:n,month:r,calendar:o,referenceISODay:i}}function Ct(e){const t=Ce.exec(e);let n,r,o,i;if(t){if(o=Tt(t[3]),n=+t[1],r=+t[2],void 0!==o&&"iso8601"!==o)throw new RangeError("MM-DD format is only valid with iso8601 calendar")}else {let t;if(({month:n,day:r,calendar:o,year:i,z:t}=Mt(e)),t)throw new RangeError("Z designator not supported for PlainMonthDay")}return {month:n,day:r,calendar:o,referenceISOYear:i}}const Ot=new RegExp(`^${fe.source}$`,"i"),$t=new RegExp(`^${/([+-])([01][0-9]|2[0-3])(?::?([0-5][0-9])?)?/.source}$`);function Yt(e){const t=Wo.test(e)?"Seconds not allowed in offset time zone":"Invalid time zone";throw new RangeError(`${t}: ${e}`)}function Rt(e){return Ot.test(e)||Yt(e),$t.test(e)?{offsetMinutes:sr(e)/6e10}:{tzName:e}}function St(e,t,n,r){let o=e,i=t,a=n;switch(r){case "reject":xr(o,i,a);break;case "constrain":({year:o,month:i,day:a}=kr(o,i,a));}return {year:o,month:i,day:a}}function jt(e,t,n,r,o,i,a){let s=e,c=t,d=n,h=r,u=o,l=i;switch(a){case "reject":Pr(s,c,d,h,u,l);break;case "constrain":s=jr(s,0,23),c=jr(c,0,59),d=jr(d,0,59),h=jr(h,0,999),u=jr(u,0,999),l=jr(l,0,999);}return {hour:s,minute:c,second:d,millisecond:h,microsecond:u,nanosecond:l}}function kt(e){if(!Ae(e))throw new TypeError("invalid duration-like");const t={years:void 0,months:void 0,weeks:void 0,days:void 0,hours:void 0,minutes:void 0,seconds:void 0,milliseconds:void 0,microseconds:void 0,nanoseconds:void 0};let n=false;for(let r=0;r<st.length;r++){const o=st[r],i=e[o];void 0!==i&&(n=true,t[o]=Ge(i));}if(!n)throw new TypeError("invalid duration-like");return t}function Nt({years:e,months:t,weeks:n,days:r},o,i,a){return {years:e,months:a??t,weeks:i??n,days:o??r}}function xt(e,t){return {isoDate:e,time:t}}function Lt(e){return Ho(e,"overflow",["constrain","reject"],"constrain")}function Pt(e){return Ho(e,"disambiguation",["compatible","earlier","later","reject"],"compatible")}function Ut(e,t){return Ho(e,"roundingMode",["ceil","floor","expand","trunc","halfCeil","halfFloor","halfExpand","halfTrunc","halfEven"],t)}function Bt(e,t){return Ho(e,"offset",["prefer","use","ignore","reject"],t)}function Zt(e){return Ho(e,"calendarName",["auto","always","never","critical"],"auto")}function Ft(e){let t=e.roundingIncrement;if(void 0===t)return 1;const n=_e(t);if(n<1||n>1e9)throw new RangeError(`roundingIncrement must be at least 1 and at most 1e9, not ${t}`);return n}function Ht(e,t,n){const r=n?t:t-1;if(e>r)throw new RangeError(`roundingIncrement must be at least 1 and less than ${r}, not ${e}`);if(t%e!=0)throw new RangeError(`Rounding increment must divide evenly into ${t}`)}function zt(e){const t=e.fractionalSecondDigits;if(void 0===t)return "auto";if("number"!=typeof t){if("auto"!==We(t))throw new RangeError(`fractionalSecondDigits must be 'auto' or 0 through 9, not ${t}`);return "auto"}const n=Math.floor(t);if(!Number.isFinite(n)||n<0||n>9)throw new RangeError(`fractionalSecondDigits must be 'auto' or 0 through 9, not ${t}`);return n}function At(e,t){switch(e){case "minute":return {precision:"minute",unit:"minute",increment:1};case "second":return {precision:0,unit:"second",increment:1};case "millisecond":return {precision:3,unit:"millisecond",increment:1};case "microsecond":return {precision:6,unit:"microsecond",increment:1};case "nanosecond":return {precision:9,unit:"nanosecond",increment:1}}switch(t){case "auto":return {precision:t,unit:"nanosecond",increment:1};case 0:return {precision:t,unit:"second",increment:1};case 1:case 2:case 3:return {precision:t,unit:"millisecond",increment:10**(3-t)};case 4:case 5:case 6:return {precision:t,unit:"microsecond",increment:10**(6-t)};case 7:case 8:case 9:return {precision:t,unit:"nanosecond",increment:10**(9-t)};default:throw new RangeError(`fractionalSecondDigits must be 'auto' or 0 through 9, not ${t}`)}}const qt=Symbol("~required~");function Wt(e,t,n,r,o=[]){let i=[];for(let e=0;e<nt.length;e++){const t=nt[e],r=t[1],o=t[2];"datetime"!==n&&n!==o||i.push(r);}i=i.concat(o);let a=r;a===qt?a=void 0:void 0!==a&&i.push(a);let s=[];s=s.concat(i);for(let e=0;e<i.length;e++){const t=i[e],n=ot[t];void 0!==n&&s.push(n);}let c=Ho(e,t,s,a);if(void 0===c&&r===qt)throw new RangeError(`${t} is required`);return c&&c in rt?rt[c]:c}function _t(e){const t=e.relativeTo;if(void 0===t)return {};let n,r,o,i,a,s="option",c=false;if(Ae(t)){if(wt(t))return {zonedRelativeTo:t};if(mt(t))return {plainRelativeTo:t};if(yt(t))return {plainRelativeTo:pn(re(t,T).isoDate,re(t,E))};o=Nn(t);const e=tn(o,t,["year","month","monthCode","day"],["hour","minute","second","millisecond","microsecond","nanosecond","offset","timeZone"],[]);(({isoDate:n,time:r}=on(o,e,"constrain"))),({offset:a,timeZone:i}=e),void 0===a&&(s="wall");}else {let e,d,h,u,l;if(({year:h,month:u,day:l,time:r,calendar:o,tzAnnotation:e,offset:a,z:d}=Mt(Ve(t))),e)i=Bn(e),d?s="exact":a||(s="wall"),c=true;else if(d)throw new RangeError("Z designator not supported for PlainDate relativeTo; either remove the Z or add a bracketed time zone");o||(o="iso8601"),o=zo(o),n={year:h,month:u,day:l};}return void 0===i?{plainRelativeTo:pn(n,o)}:{zonedRelativeTo:$n(mn(n,r,s,"option"===s?sr(a):0,i,"compatible","reject",c),i,o)}}function Jt(e){return 0!==re(e,Y)?"year":0!==re(e,R)?"month":0!==re(e,S)?"week":0!==re(e,j)?"day":0!==re(e,k)?"hour":0!==re(e,N)?"minute":0!==re(e,x)?"second":0!==re(e,L)?"millisecond":0!==re(e,P)?"microsecond":"nanosecond"}function Gt(e,t){return it.indexOf(e)>it.indexOf(t)?t:e}function Kt(e){return "year"===e||"month"===e||"week"===e}function Vt(e){return Kt(e)||"day"===e?"date":"time"}function Xt(e){return ce("%calendarImpl%")(e)}function Qt(e){return ce("%calendarImpl%")(re(e,E))}function en(e,t,n="date"){const r=Object.create(null),o=Xt(e).isoToDate(t,{year:true,monthCode:true,day:true});return r.monthCode=o.monthCode,"month-day"!==n&&"date"!==n||(r.day=o.day),"year-month"!==n&&"date"!==n||(r.year=o.year),r}function tn(e,t,n,r,o){const i=Xt(e).extraFields(n),a=n.concat(r,i),s=Object.create(null);let c=false;a.sort();for(let e=0;e<a.length;e++){const n=a[e],r=t[n];if(void 0!==r)c=true,s[n]=(0, et[n])(r);else if("partial"!==o){if(o.includes(n))throw new TypeError(`required property '${n}' missing or undefined`);s[n]=tt[n];}}if("partial"===o&&!c)throw new TypeError("no supported properties found");return s}function nn(e,t="complete"){const n=["hour","microsecond","millisecond","minute","nanosecond","second"];let r=false;const o=Object.create(null);for(let i=0;i<n.length;i++){const a=n[i],s=e[a];void 0!==s?(o[a]=_e(s),r=true):"complete"===t&&(o[a]=0);}if(!r)throw new TypeError("invalid time-like");return o}function rn(e,t){if(Ae(e)){if(mt(e))return Lt(Zo(t)),pn(re(e,D),re(e,E));if(wt(e)){const n=zn(re(e,$),re(e,b));return Lt(Zo(t)),pn(n.isoDate,re(e,E))}if(yt(e))return Lt(Zo(t)),pn(re(e,T).isoDate,re(e,E));const n=Nn(e);return pn(Ln(n,tn(n,e,["year","month","monthCode","day"],[],[]),Lt(Zo(t))),n)}let{year:n,month:r,day:o,calendar:i,z:a}=Mt(Ve(e));if(a)throw new RangeError("Z designator not supported for PlainDate");return i||(i="iso8601"),i=zo(i),Lt(Zo(t)),pn({year:n,month:r,day:o},i)}function on(e,t,n){return xt(Ln(e,t,n),jt(t.hour,t.minute,t.second,t.millisecond,t.microsecond,t.nanosecond,n))}function an(e,t){let n,r,o;if(Ae(e)){if(yt(e))return Lt(Zo(t)),wn(re(e,T),re(e,E));if(wt(e)){const n=zn(re(e,$),re(e,b));return Lt(Zo(t)),wn(n,re(e,E))}if(mt(e))return Lt(Zo(t)),wn(xt(re(e,D),{deltaDays:0,hour:0,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0}),re(e,E));o=Nn(e);const i=tn(o,e,["year","month","monthCode","day"],["hour","minute","second","millisecond","microsecond","nanosecond"],[]),a=Lt(Zo(t));({isoDate:n,time:r}=on(o,i,a));}else {let i,a,s,c;if(({year:a,month:s,day:c,time:r,calendar:o,z:i}=Mt(Ve(e))),i)throw new RangeError("Z designator not supported for PlainDateTime");"start-of-day"===r&&(r={deltaDays:0,hour:0,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0}),Ur(a,s,c,r.hour,r.minute,r.second,r.millisecond,r.microsecond,r.nanosecond),o||(o="iso8601"),o=zo(o),Lt(Zo(t)),n={year:a,month:s,day:c};}return wn(xt(n,r),o)}function sn(e){const t=ce("%Temporal.Duration%");if(lt(e))return new t(re(e,Y),re(e,R),re(e,S),re(e,j),re(e,k),re(e,N),re(e,x),re(e,L),re(e,P),re(e,U));if(!Ae(e))return function(e){const{years:t,months:n,weeks:r,days:o,hours:i,minutes:a,seconds:s,milliseconds:c,microseconds:d,nanoseconds:h}=function(e){const t=Ye.exec(e);if(!t)throw new RangeError(`invalid duration: ${e}`);if(t.every(((e,t)=>t<2||void 0===e)))throw new RangeError(`invalid duration: ${e}`);const n="-"===t[1]?-1:1,r=void 0===t[2]?0:_e(t[2])*n,o=void 0===t[3]?0:_e(t[3])*n,i=void 0===t[4]?0:_e(t[4])*n,a=void 0===t[5]?0:_e(t[5])*n,s=void 0===t[6]?0:_e(t[6])*n,c=t[7],d=t[8],h=t[9],u=t[10],l=t[11];let m=0,f=0,y=0;if(void 0!==c){if(d??h??u??l)throw new RangeError("only the smallest unit can be fractional");y=3600*_e((c+"000000000").slice(0,9))*n;}else if(m=void 0===d?0:_e(d)*n,void 0!==h){if(u??l)throw new RangeError("only the smallest unit can be fractional");y=60*_e((h+"000000000").slice(0,9))*n;}else f=void 0===u?0:_e(u)*n,void 0!==l&&(y=_e((l+"000000000").slice(0,9))*n);const p=y%1e3,g=Math.trunc(y/1e3)%1e3,w=Math.trunc(y/1e6)%1e3;return f+=Math.trunc(y/1e9)%60,m+=Math.trunc(y/6e10),zr(r,o,i,a,s,m,f,w,g,p),{years:r,months:o,weeks:i,days:a,hours:s,minutes:m,seconds:f,milliseconds:w,microseconds:g,nanoseconds:p}}(e);return new(ce("%Temporal.Duration%"))(t,n,r,o,i,a,s,c,d,h)}(Ve(e));const n={years:0,months:0,weeks:0,days:0,hours:0,minutes:0,seconds:0,milliseconds:0,microseconds:0,nanoseconds:0};let r=kt(e);for(let e=0;e<st.length;e++){const t=st[e],o=r[t];void 0!==o&&(n[t]=o);}return new t(n.years,n.months,n.weeks,n.days,n.hours,n.minutes,n.seconds,n.milliseconds,n.microseconds,n.nanoseconds)}function cn(e){let t;if(Ae(e)){if(ut(e)||wt(e))return Cn(re(e,b));t=Xe(e);}else t=e;const{year:n,month:r,day:o,time:i,offset:a,z:s}=function(e){const t=Mt(e);if(!t.z&&!t.offset)throw new RangeError("Temporal.Instant requires a time zone offset");return t}(Ve(t)),{hour:c=0,minute:d=0,second:h=0,millisecond:u=0,microsecond:l=0,nanosecond:m=0}="start-of-day"===i?{}:i,f=$r(n,r,o,c,d,h,u,l,m-(s?0:sr(a)));return Kr(f.isoDate),Cn(pr(f))}function dn(e,t){if(Ae(e)){if(gt(e))return Lt(Zo(t)),bn(re(e,D),re(e,E));let n;return ne(e,E)?n=re(e,E):(n=e.calendar,void 0===n&&(n="iso8601"),n=kn(n)),bn(Un(n,tn(n,e,["year","month","monthCode","day"],[],[]),Lt(Zo(t))),n)}let{month:n,day:r,referenceISOYear:o,calendar:i}=Ct(Ve(e));if(void 0===i&&(i="iso8601"),i=zo(i),Lt(Zo(t)),"iso8601"===i)return bn({year:1972,month:n,day:r},i);let a={year:o,month:n,day:r};return Lr(a),a=Un(i,en(i,a,"month-day"),"constrain"),bn(a,i)}function hn(e,t){let n;if(Ae(e)){if(ft(e))return Lt(Zo(t)),Tn(re(e,M));if(yt(e))return Lt(Zo(t)),Tn(re(e,T).time);if(wt(e)){const n=zn(re(e,$),re(e,b));return Lt(Zo(t)),Tn(n.time)}const{hour:r,minute:o,second:i,millisecond:a,microsecond:s,nanosecond:c}=nn(e);n=jt(r,o,i,a,s,c,Lt(Zo(t)));}else n=Et(Ve(e)),Lt(Zo(t));return Tn(n)}function un(e){return void 0===e?{deltaDays:0,hour:0,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0}:re(hn(e),M)}function ln(e,t){if(Ae(e)){if(pt(e))return Lt(Zo(t)),En(re(e,D),re(e,E));const n=Nn(e);return En(Pn(n,tn(n,e,["year","month","monthCode"],[],[]),Lt(Zo(t))),n)}let{year:n,month:r,referenceISODay:o,calendar:i}=It(Ve(e));void 0===i&&(i="iso8601"),i=zo(i),Lt(Zo(t));let a={year:n,month:r,day:o};return Hr(a),a=Pn(i,en(i,a,"year-month"),"constrain"),En(a,i)}function mn(t,n,r,o,i,a,s,c){if("start-of-day"===n)return _n(i,t);const d=xt(t,n);if("wall"===r||"ignore"===s)return An(i,d,a);if("exact"===r||"use"===s){const e=$r(t.year,t.month,t.day,n.hour,n.minute,n.second,n.millisecond,n.microsecond,n.nanosecond-o);Kr(e.isoDate);const r=pr(e);return Fr(r),r}Kr(t);const h=pr(d),u=Wn(i,d);for(let t=0;t<u.length;t++){const n=u[t],r=e.toNumber(e.subtract(h,n)),i=Eo(r,6e10,"halfExpand");if(r===o||c&&i===o)return n}if("reject"===s){const e=Hn(o),t=nr(d,"iso8601","auto");throw new RangeError(`Offset ${e} is invalid for ${t} in ${i}`)}return qn(u,i,d,a)}function fn(e,t){let n,r,o,i,a,s,c,d=false,h="option";if(Ae(e)){if(wt(e)){const n=Zo(t);return Pt(n),Bt(n,"reject"),Lt(n),$n(re(e,b),re(e,$),re(e,E))}a=Nn(e);const d=tn(a,e,["year","month","monthCode","day"],["hour","minute","second","millisecond","microsecond","nanosecond","offset","timeZone"],["timeZone"]);(({offset:i,timeZone:o}=d)),void 0===i&&(h="wall");const u=Zo(t);s=Pt(u),c=Bt(u,"reject");const l=Lt(u);({isoDate:n,time:r}=on(a,d,l));}else {let u,l,m,f,y;(({year:m,month:f,day:y,time:r,tzAnnotation:u,offset:i,z:l,calendar:a}=function(e){const t=Mt(e);if(!t.tzAnnotation)throw new RangeError("Temporal.ZonedDateTime requires a time zone ID in brackets");return t}(Ve(e)))),o=Bn(u),l?h="exact":i||(h="wall"),a||(a="iso8601"),a=zo(a),d=true;const p=Zo(t);s=Pt(p),c=Bt(p,"reject"),Lt(p),n={year:m,month:f,day:y};}let u=0;return "option"===h&&(u=sr(i)),$n(mn(n,r,h,u,o,s,c,d),o,a)}function yn(e,t,n){Lr(t),te(e),oe(e,D,t),oe(e,E,n),oe(e,I,true);}function pn(e,t){const n=ce("%Temporal.PlainDate%"),r=Object.create(n.prototype);return yn(r,e,t),r}function gn(e,t,n){Br(t),te(e),oe(e,T,t),oe(e,E,n);}function wn(e,t){const n=ce("%Temporal.PlainDateTime%"),r=Object.create(n.prototype);return gn(r,e,t),r}function vn(e,t,n){Lr(t),te(e),oe(e,D,t),oe(e,E,n),oe(e,O,true);}function bn(e,t){const n=ce("%Temporal.PlainMonthDay%"),r=Object.create(n.prototype);return vn(r,e,t),r}function Dn(e,t){te(e),oe(e,M,t);}function Tn(e){const t=ce("%Temporal.PlainTime%"),n=Object.create(t.prototype);return Dn(n,e),n}function Mn(e,t,n){Hr(t),te(e),oe(e,D,t),oe(e,E,n),oe(e,C,true);}function En(e,t){const n=ce("%Temporal.PlainYearMonth%"),r=Object.create(n.prototype);return Mn(r,e,t),r}function In(e,t){Fr(t),te(e),oe(e,b,t);}function Cn(e){const t=ce("%Temporal.Instant%"),n=Object.create(t.prototype);return In(n,e),n}function On(e,t,n,r){Fr(t),te(e),oe(e,b,t),oe(e,$,n),oe(e,E,r);}function $n(e,t,n="iso8601"){const r=ce("%Temporal.ZonedDateTime%"),o=Object.create(r.prototype);return On(o,e,t,n),o}function Yn(e){return Qe.filter((t=>void 0!==e[t]))}function Rn(e,t,n){const r=Yn(n),o=Xt(e).fieldKeysToIgnore(r),i=Object.create(null),a=Yn(t);for(let e=0;e<Qe.length;e++){let s;const c=Qe[e];a.includes(c)&&!o.includes(c)&&(s=t[c]),r.includes(c)&&(s=n[c]),void 0!==s&&(i[c]=s);}return i}function Sn(e,t,n,r){const o=Xt(e).dateAdd(t,n,r);return Lr(o),o}function jn(e,t,n,r){return Xt(e).dateUntil(t,n,r)}function kn(e){if(Ae(e)&&ne(e,E))return re(e,E);const t=Ve(e);try{return zo(t)}catch{}let n;try{({calendar:n}=Mt(t));}catch{try{({calendar:n}=Et(t));}catch{try{({calendar:n}=It(t));}catch{({calendar:n}=Ct(t));}}}return n||(n="iso8601"),zo(n)}function Nn(e){if(ne(e,E))return re(e,E);const{calendar:t}=e;return void 0===t?"iso8601":kn(t)}function xn(e,t){return zo(e)===zo(t)}function Ln(e,t,n){const r=Xt(e);r.resolveFields(t,"date");const o=r.dateToISO(t,n);return Lr(o),o}function Pn(e,t,n){const r=Xt(e);r.resolveFields(t,"year-month"),t.day=1;const o=r.dateToISO(t,n);return Hr(o),o}function Un(e,t,n){const r=Xt(e);r.resolveFields(t,"month-day");const o=r.monthDayToISOReferenceDate(t,n);return Lr(o),o}function Bn(e){if(Ae(e)&&wt(e))return re(e,$);const t=Ve(e);if("UTC"===t)return "UTC";const{tzName:n,offsetMinutes:r}=function(e){const{tzAnnotation:t,offset:n,z:r}=function(e){if(Ot.test(e))return {tzAnnotation:e,offset:void 0,z:false};try{const{tzAnnotation:t,offset:n,z:r}=Mt(e);if(r||t||n)return {tzAnnotation:t,offset:n,z:r}}catch{}Yt(e);}(e);return t?Rt(t):r?Rt("UTC"):n?Rt(n):void 0}(t);if(void 0!==r)return mr(r);const o=hr(n);if(!o)throw new RangeError(`Unrecognized time zone ${n}`);return o.identifier}function Zn(e,t){if(e===t)return  true;const n=Rt(e).offsetMinutes,r=Rt(t).offsetMinutes;if(void 0===n&&void 0===r){const n=hr(t);if(!n)return  false;const r=hr(e);return !!r&&r.primaryIdentifier===n.primaryIdentifier}return n===r}function Fn(e,t){const n=Rt(e).offsetMinutes;return void 0!==n?6e10*n:lr(e,t)}function Hn(e){const t=e<0?"-":"+",n=Math.abs(e),r=Math.floor(n/36e11),o=Math.floor(n/6e10)%60,i=Math.floor(n/1e9)%60,a=n%1e9;return `${t}${Vn(r,o,i,a,0===i&&0===a?"minute":"auto")}`}function zn(e,t){const n=Fn(e,t);let{isoDate:{year:r,month:o,day:i},time:{hour:a,minute:s,second:c,millisecond:d,microsecond:h,nanosecond:u}}=gr(t);return $r(r,o,i,a,s,c,d,h,u+n)}function An(e,t,n){return qn(Wn(e,t),e,t,n)}function qn(t,n,r,o){const i=t.length;if(1===i)return t[0];if(i)switch(o){case "compatible":case "earlier":return t[0];case "later":return t[i-1];case "reject":throw new RangeError("multiple instants found")}if("reject"===o)throw new RangeError("multiple instants found");const a=pr(r),s=e.subtract(a,l);Fr(s);const c=Fn(n,s),d=e.add(a,l);Fr(d);const h=Fn(n,d)-c;switch(o){case "earlier":{const e=TimeDuration.fromComponents(0,0,0,0,0,-h),t=fo(r.time,e);return Wn(n,xt(Or(r.isoDate.year,r.isoDate.month,r.isoDate.day+t.deltaDays),t))[0]}case "compatible":case "later":{const e=TimeDuration.fromComponents(0,0,0,0,0,h),t=fo(r.time,e),o=Wn(n,xt(Or(r.isoDate.year,r.isoDate.month,r.isoDate.day+t.deltaDays),t));return o[o.length-1]}}}function Wn(t,n){if("UTC"===t)return Kr(n.isoDate),[pr(n)];const r=Rt(t).offsetMinutes;if(void 0!==r){const e=$r(n.isoDate.year,n.isoDate.month,n.isoDate.day,n.time.hour,n.time.minute-r,n.time.second,n.time.millisecond,n.time.microsecond,n.time.nanosecond);Kr(e.isoDate);const t=pr(e);return Fr(t),[t]}return Kr(n.isoDate),function(t,n){let r=pr(n),o=e.subtract(r,l);e.lessThan(o,xe)&&(o=r);let i=e.add(r,l);e.greaterThan(i,Ne)&&(i=r);const a=lr(t,o),s=lr(t,i),c=(a===s?[a]:[a,s]).map((o=>{const i=e.subtract(r,e.BigInt(o)),a=function(e,t){const{epochMilliseconds:n,time:{millisecond:r,microsecond:o,nanosecond:i}}=gr(t),{year:a,month:s,day:c,hour:d,minute:h,second:u}=br(e,n);return $r(a,s,c,d,h,u,r,o,i)}(t,i);if(0===jo(n,a))return Fr(i),i}));return c.filter((e=>void 0!==e))}(t,n)}function _n(t,n){const r=xt(n,{deltaDays:0,hour:0,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0}),o=Wn(t,r);if(o.length)return o[0];const i=pr(r),a=e.subtract(i,l);return Fr(a),wr(t,a)}function Jn(e){let t;return t=e<0||e>9999?(e<0?"-":"+")+Ke(Math.abs(e),6):Ke(e,4),t}function Gn(e){return Ke(e,2)}function Kn(e,t){let n;if("auto"===t){if(0===e)return "";n=Ke(e,9).replace(/0+$/,"");}else {if(0===t)return "";n=Ke(e,9).slice(0,t);}return `.${n}`}function Vn(e,t,n,r,o){let i=`${Gn(e)}:${Gn(t)}`;return "minute"===o||(i+=`:${Gn(n)}`,i+=Kn(r,o)),i}function Xn(e,t,n){let r=t;void 0===r&&(r="UTC");const o=re(e,b),i=nr(zn(r,o),"iso8601",n,"never");let a="Z";return void 0!==t&&(a=fr(Fn(r,o))),`${i}${a}`}function Qn(e,t){const n=re(e,Y),r=re(e,R),o=re(e,S),i=re(e,j),a=re(e,k),s=re(e,N),c=Mr(e);let d="";0!==n&&(d+=`${Math.abs(n)}Y`),0!==r&&(d+=`${Math.abs(r)}M`),0!==o&&(d+=`${Math.abs(o)}W`),0!==i&&(d+=`${Math.abs(i)}D`);let h="";0!==a&&(h+=`${Math.abs(a)}H`),0!==s&&(h+=`${Math.abs(s)}M`);const u=TimeDuration.fromComponents(0,0,re(e,x),re(e,L),re(e,P),re(e,U));u.isZero()&&!["second","millisecond","microsecond","nanosecond"].includes(Jt(e))&&"auto"===t||(h+=`${Math.abs(u.sec)}${Kn(Math.abs(u.subsec),t)}S`);let l=`${c<0?"-":""}P${d}`;return h&&(l=`${l}T${h}`),l}function er(e,t="auto"){const{year:n,month:r,day:o}=re(e,D);return `${Jn(n)}-${Gn(r)}-${Gn(o)}${Dt(re(e,E),t)}`}function tr({hour:e,minute:t,second:n,millisecond:r,microsecond:o,nanosecond:i},a){return Vn(e,t,n,1e6*r+1e3*o+i,a)}function nr(e,t,n,r="auto"){const{isoDate:{year:o,month:i,day:a},time:{hour:s,minute:c,second:d,millisecond:h,microsecond:u,nanosecond:l}}=e;return `${Jn(o)}-${Gn(i)}-${Gn(a)}T${Vn(s,c,d,1e6*h+1e3*u+l,n)}${Dt(t,r)}`}function rr(e,t="auto"){const{year:n,month:r,day:o}=re(e,D);let i=`${Gn(r)}-${Gn(o)}`;const a=re(e,E);"always"!==t&&"critical"!==t&&"iso8601"===a||(i=`${Jn(n)}-${i}`);const s=Dt(a,t);return s&&(i+=s),i}function or(e,t="auto"){const{year:n,month:r,day:o}=re(e,D);let i=`${Jn(n)}-${Gn(r)}`;const a=re(e,E);"always"!==t&&"critical"!==t&&"iso8601"===a||(i+=`-${Gn(o)}`);const s=Dt(a,t);return s&&(i+=s),i}function ir(e,t,n="auto",r="auto",o="auto",i=void 0){let a=re(e,b);if(i){const{unit:e,increment:t,roundingMode:n}=i;a=Io(a,t,e,n);}const s=re(e,$),c=Fn(s,a);let d=nr(zn(s,a),"iso8601",t,"never");return "never"!==o&&(d+=fr(c)),"never"!==r&&(d+=`[${"critical"===r?"!":""}${s}]`),d+=Dt(re(e,E),n),d}function ar(e){return $t.test(e)}function sr(e){const t=_o.exec(e);if(!t)throw new RangeError(`invalid time zone offset: ${e}; must match ±HH:MM[:SS.SSSSSSSSS]`);return ("-"===t[1]?-1:1)*(1e9*(60*(60*+t[2]+ +(t[3]||0))+ +(t[4]||0))+ +((t[5]||0)+"000000000").slice(0,9))}let cr;const dr=Object.assign(Object.create(null),{"/":true,"-":true,_:true});function hr(e){if(void 0===cr){const e=Intl.supportedValuesOf?.("timeZone");if(e){cr=new Map;for(let t=0;t<e.length;t++){const n=e[t];cr.set(Ao(n),n);}}else cr=null;}const t=Ao(e);let n=cr?.get(t);if(n)return {identifier:n,primaryIdentifier:n};try{n=ht(e).resolvedOptions().timeZone;}catch{return}if("antarctica/south_pole"===t&&(n="Antarctica/McMurdo"),ze.has(e))throw new RangeError(`${e} is a legacy time zone identifier from ICU. Use ${n} instead`);const r=[...t].map(((e,n)=>0===n||dr[t[n-1]]?e.toUpperCase():e)).join("").split("/");if(1===r.length)return "gb-eire"===t?{identifier:"GB-Eire",primaryIdentifier:n}:{identifier:t.length<=3||/[-0-9]/.test(t)?t.toUpperCase():r[0],primaryIdentifier:n};if("Etc"===r[0])return {identifier:`Etc/${["Zulu","Greenwich","Universal"].includes(r[1])?r[1]:r[1].toUpperCase()}`,primaryIdentifier:n};if("Us"===r[0])return {identifier:`US/${r[1]}`,primaryIdentifier:n};const o=new Map([["Act","ACT"],["Lhi","LHI"],["Nsw","NSW"],["Dar_Es_Salaam","Dar_es_Salaam"],["Port_Of_Spain","Port_of_Spain"],["Port-Au-Prince","Port-au-Prince"],["Isle_Of_Man","Isle_of_Man"],["Comodrivadavia","ComodRivadavia"],["Knox_In","Knox_IN"],["Dumontdurville","DumontDUrville"],["Mcmurdo","McMurdo"],["Denoronha","DeNoronha"],["Easterisland","EasterIsland"],["Bajanorte","BajaNorte"],["Bajasur","BajaSur"]]);return r[1]=o.get(r[1])??r[1],r.length>2&&(r[2]=o.get(r[2])??r[2]),{identifier:r.join("/"),primaryIdentifier:n}}function ur(e,t){const{year:n,month:r,day:o,hour:i,minute:a,second:s}=br(e,t);let c=t%1e3;return c<0&&(c+=1e3),1e6*(yr({isoDate:{year:n,month:r,day:o},time:{hour:i,minute:a,second:s,millisecond:c}})-t)}function lr(e,t){return ur(e,No(t,"floor"))}function mr(e){const t=e<0?"-":"+",n=Math.abs(e);return `${t}${Vn(Math.floor(n/60),n%60,0,0,"minute")}`}function fr(e){return mr(Eo(e,je,"halfExpand")/6e10)}function yr({isoDate:{year:e,month:t,day:n},time:{hour:r,minute:o,second:i,millisecond:a}}){const s=e%400,c=(e-s)/400,d=new Date;return d.setUTCHours(r,o,i,a),d.setUTCFullYear(s,t-1,n),d.getTime()+Ue*c}function pr(t){const n=yr(t),r=1e3*t.time.microsecond+t.time.nanosecond;return e.add(xo(n),e.BigInt(r))}function gr(t){let n=No(t,"trunc"),r=e.toNumber(e.remainder(t,c));r<0&&(r+=1e6,n-=1);const o=Math.floor(r/1e3)%1e3,i=r%1e3,a=new Date(n);return {epochMilliseconds:n,isoDate:{year:a.getUTCFullYear(),month:a.getUTCMonth()+1,day:a.getUTCDate()},time:{hour:a.getUTCHours(),minute:a.getUTCMinutes(),second:a.getUTCSeconds(),millisecond:a.getUTCMilliseconds(),microsecond:o,nanosecond:i}}}function wr(e,t){if("UTC"===e)return null;const n=No(t,"floor");if(n<Fe)return wr(e,xo(Fe));const r=Date.now(),o=Math.max(n,r)+366*Re*3;let i=n,a=ur(e,i),s=i,c=a;for(;a===c&&i<o;){if(s=i+2*Re*7,s>ke)return null;c=ur(e,s),a===c&&(i=s);}return a===c?null:xo(Jo((t=>ur(e,t)),i,s,a,c))}function vr(t,n){if("UTC"===t)return null;const r=No(n,"ceil"),o=Date.now(),i=o+366*Re*3;if(r>i){const n=vr(t,xo(i));if(null===n||e.lessThan(n,xo(o)))return n}if("Africa/Casablanca"===t||"Africa/El_Aaiun"===t){const e=Date.UTC(2088,0,1);if(e<r)return vr(t,xo(e))}let a=r-1;if(a<Fe)return null;let s=ur(t,a),c=a,d=s;for(;s===d&&a>Fe;){if(c=a-2*Re*7,c<Fe)return null;d=ur(t,c),s===d&&(a=c);}return s===d?null:xo(Jo((e=>ur(t,e)),c,a,d,s))}function br(e,t){return function(e){const t=e.split(/[^\w]+/);if(7!==t.length)throw new RangeError(`expected 7 parts in "${e}`);const n=+t[0],r=+t[1];let o=+t[2];const i=t[3];if("b"===i[0]||"B"===i[0])o=1-o;else if("a"!==i[0]&&"A"!==i[0])throw new RangeError(`Unknown era ${i} in "${e}`);const a="24"===t[4]?0:+t[4],s=+t[5],c=+t[6];if(!(Number.isFinite(o)&&Number.isFinite(n)&&Number.isFinite(r)&&Number.isFinite(a)&&Number.isFinite(s)&&Number.isFinite(c)))throw new RangeError(`Invalid number in "${e}`);return {year:o,month:n,day:r,hour:a,minute:s,second:c}}(ht(e).format(t))}function Dr(e){return void 0!==e&&!(e%4!=0||e%100==0&&e%400!=0)}function Tr(e,t){return {standard:[31,28,31,30,31,30,31,31,30,31,30,31],leapyear:[31,29,31,30,31,30,31,31,30,31,30,31]}[Dr(e)?"leapyear":"standard"][t-1]}function Mr(e){const t=[re(e,Y),re(e,R),re(e,S),re(e,j),re(e,k),re(e,N),re(e,x),re(e,L),re(e,P),re(e,U)];for(let e=0;e<t.length;e++){const n=t[e];if(0!==n)return n<0?-1:1}return 0}function Er(e){const t=["years","months","weeks","days"];for(let n=0;n<t.length;n++){const r=e[t[n]];if(0!==r)return r<0?-1:1}return 0}function Ir(e){const t=Er(e.date);return 0!==t?t:e.time.sign()}function Cr(e,t){let n=e,r=t;if(!Number.isFinite(n)||!Number.isFinite(r))throw new RangeError("infinity is out of range");return r-=1,n+=Math.floor(r/12),r%=12,r<0&&(r+=12),r+=1,{year:n,month:r}}function Or(e,t,n){let r=e,o=t,i=n;if(!Number.isFinite(i))throw new RangeError("infinity is out of range");({year:r,month:o}=Cr(r,o));const a=146097;if(Math.abs(i)>a){const e=Math.trunc(i/a);r+=400*e,i-=e*a;}let s=0,c=o>2?r:r-1;for(;s=Dr(c)?366:365,i<-s;)r-=1,c-=1,i+=s;for(c+=1;s=Dr(c)?366:365,i>s;)r+=1,c+=1,i-=s;for(;i<1;)(({year:r,month:o}=Cr(r,o-1))),i+=Tr(r,o);for(;i>Tr(r,o);)i-=Tr(r,o),({year:r,month:o}=Cr(r,o+1));return {year:r,month:o,day:i}}function $r(e,t,n,r,o,i,a,s,c){const d=Yr(r,o,i,a,s,c);return xt(Or(e,t,n+d.deltaDays),d)}function Yr(e,t,n,r,o,i){let a,s=e,c=t,d=n,h=r,u=o,l=i;(({div:a,mod:l}=de(l,3))),u+=a,l<0&&(u-=1,l+=1e3),({div:a,mod:u}=de(u,3)),h+=a,u<0&&(h-=1,u+=1e3),d+=Math.trunc(h/1e3),h%=1e3,h<0&&(d-=1,h+=1e3),c+=Math.trunc(d/60),d%=60,d<0&&(c-=1,d+=60),s+=Math.trunc(c/60),c%=60,c<0&&(s-=1,c+=60);let m=Math.trunc(s/24);return s%=24,s<0&&(m-=1,s+=24),m+=0,s+=0,c+=0,d+=0,h+=0,u+=0,l+=0,{deltaDays:m,hour:s,minute:c,second:d,millisecond:h,microsecond:u,nanosecond:l}}function Rr(e,t){const n=Nt(e,0);if(0===Er(n))return e.days;const r=re(t,D),o=Sn(re(t,E),r,n,"constrain"),i=Gr(r.year,r.month-1,r.day),a=Gr(o.year,o.month-1,o.day)-i;return e.days+a}function Sr(e){return new(ce("%Temporal.Duration%"))(-re(e,Y),-re(e,R),-re(e,S),-re(e,j),-re(e,k),-re(e,N),-re(e,x),-re(e,L),-re(e,P),-re(e,U))}function jr(e,t,n){return Math.min(n,Math.max(t,e))}function kr(e,t,n){const r=jr(t,1,12);return {year:e,month:r,day:jr(n,1,Tr(e,r))}}function Nr(e,t,n){if(e<t||e>n)throw new RangeError(`value out of range: ${t} <= ${e} <= ${n}`)}function xr(e,t,n){Nr(t,1,12),Nr(n,1,Tr(e,t));}function Lr(e){Br(xt(e,{deltaDays:0,hour:12,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0}));}function Pr(e,t,n,r,o,i){Nr(e,0,23),Nr(t,0,59),Nr(n,0,59),Nr(r,0,999),Nr(o,0,999),Nr(i,0,999);}function Ur(e,t,n,r,o,i,a,s,c){xr(e,t,n),Pr(r,o,i,a,s,c);}function Br(t){const n=pr(t);(e.lessThan(n,Le)||e.greaterThan(n,Pe))&&Fr(n);}function Zr(e){pr(e);}function Fr(t){if(e.lessThan(t,xe)||e.greaterThan(t,Ne))throw new RangeError("date/time value is outside of supported range")}function Hr({year:e,month:t}){Nr(e,Be,Ze),e===Be?Nr(t,4,12):e===Ze&&Nr(t,1,9);}function zr(e,t,n,r,o,i,a,s,c,d){let h=0;const u=[e,t,n,r,o,i,a,s,c,d];for(let e=0;e<u.length;e++){const t=u[e];if(t===1/0||t===-1/0)throw new RangeError("infinite values not allowed as duration fields");if(0!==t){const e=t<0?-1:1;if(0!==h&&e!==h)throw new RangeError("mixed-sign values not allowed as duration fields");h=e;}}if(Math.abs(e)>=2**32||Math.abs(t)>=2**32||Math.abs(n)>=2**32)throw new RangeError("years, months, and weeks must be < 2³²");const l=de(s,3),m=de(c,6),f=de(d,9),y=de(1e6*l.mod+1e3*m.mod+f.mod,9).div,p=86400*r+3600*o+60*i+a+l.div+m.div+f.div+y;if(!Number.isSafeInteger(p))throw new RangeError("total of duration time units cannot exceed 9007199254740991.999999999 s")}function Ar(e){return {date:{years:re(e,Y),months:re(e,R),weeks:re(e,S),days:re(e,j)},time:TimeDuration.fromComponents(re(e,k),re(e,N),re(e,x),re(e,L),re(e,P),re(e,U))}}function qr(e){const t=TimeDuration.fromComponents(re(e,k),re(e,N),re(e,x),re(e,L),re(e,P),re(e,U)).add24HourDays(re(e,j));return {date:{years:re(e,Y),months:re(e,R),weeks:re(e,S),days:0},time:t}}function Wr(e){const t=qr(e),n=Math.trunc(t.time.sec/86400);return zr(t.date.years,t.date.months,t.date.weeks,n,0,0,0,0,0,0),{...t.date,days:n}}function _r(e,t){const n=e.time.sign();let r=e.time.abs().subsec,o=0,i=0,a=e.time.abs().sec,s=0,c=0,d=0;switch(t){case "year":case "month":case "week":case "day":o=Math.trunc(r/1e3),r%=1e3,i=Math.trunc(o/1e3),o%=1e3,a+=Math.trunc(i/1e3),i%=1e3,s=Math.trunc(a/60),a%=60,c=Math.trunc(s/60),s%=60,d=Math.trunc(c/24),c%=24;break;case "hour":o=Math.trunc(r/1e3),r%=1e3,i=Math.trunc(o/1e3),o%=1e3,a+=Math.trunc(i/1e3),i%=1e3,s=Math.trunc(a/60),a%=60,c=Math.trunc(s/60),s%=60;break;case "minute":o=Math.trunc(r/1e3),r%=1e3,i=Math.trunc(o/1e3),o%=1e3,a+=Math.trunc(i/1e3),i%=1e3,s=Math.trunc(a/60),a%=60;break;case "second":o=Math.trunc(r/1e3),r%=1e3,i=Math.trunc(o/1e3),o%=1e3,a+=Math.trunc(i/1e3),i%=1e3;break;case "millisecond":o=Math.trunc(r/1e3),r%=1e3,i=he(a,3,Math.trunc(o/1e3)),o%=1e3,a=0;break;case "microsecond":o=he(a,6,Math.trunc(r/1e3)),r%=1e3,a=0;break;case "nanosecond":r=he(a,9,r),a=0;}return new(ce("%Temporal.Duration%"))(e.date.years,e.date.months,e.date.weeks,e.date.days+n*d,n*c,n*s,n*a,n*i,n*o,n*r)}function Jr(e,t){return Er(e),t.sign(),{date:e,time:t}}function Gr(e,t,n){return yr({isoDate:{year:e,month:t+1,day:n},time:{hour:0,minute:0,second:0,millisecond:0}})/Re}function Kr({year:e,month:t,day:n}){if(Math.abs(Gr(e,t-1,n))>1e8)throw new RangeError("date/time value is outside the supported range")}function Vr(e,t){const n=t.hour-e.hour,r=t.minute-e.minute,o=t.second-e.second,i=t.millisecond-e.millisecond,a=t.microsecond-e.microsecond,s=t.nanosecond-e.nanosecond;return TimeDuration.fromComponents(n,r,o,i,a,s)}function Xr(e,t,n,r,o){let i=TimeDuration.fromEpochNsDiff(t,e);return i=$o(i,n,r,o),Jr({years:0,months:0,weeks:0,days:0},i)}function Qr(e,t,n,r){Zr(e),Zr(t);let o=Vr(e.time,t.time);const i=o.sign(),a=Ro(e.isoDate,t.isoDate);let s=t.isoDate;a===i&&(s=Or(s.year,s.month,s.day+i),o=o.add24HourDays(-i));const c=Gt("day",r),d=jn(n,e.isoDate,s,c);return r!==c&&(o=o.add24HourDays(d.days),d.days=0),Jr(d,o)}function eo(n,r,o,i,a){const s=e.subtract(r,n);if(e.equal(s,t))return {date:{years:0,months:0,weeks:0,days:0},time:TimeDuration.ZERO};const c=e.lessThan(s,t)?-1:1,d=zn(o,n),h=zn(o,r);let u,l=0,m=1===c?2:1,f=Vr(d.time,h.time);for(f.sign()===-c&&l++;l<=m;l++){u=xt(Or(h.isoDate.year,h.isoDate.month,h.isoDate.day-l*c),d.time);const e=An(o,u,"compatible");if(f=TimeDuration.fromEpochNsDiff(r,e),f.sign()!==-c)break}const y=Gt("day",a);return Jr(jn(i,d.isoDate,u.isoDate,y),f)}function to(t,n,r,o,i,a,s,c,d){let h,u,l,m,f=n;switch(c){case "year":{const e=Eo(f.date.years,s,"trunc");h=e,u=e+s*t,l={years:h,months:0,weeks:0,days:0},m={...l,years:u};break}case "month":{const e=Eo(f.date.months,s,"trunc");h=e,u=e+s*t,l=Nt(f.date,0,0,h),m=Nt(f.date,0,0,u);break}case "week":{const e=Nt(f.date,0,0),n=Sn(a,o.isoDate,e,"constrain"),r=jn(a,n,Or(n.year,n.month,n.day+f.date.days),"week"),i=Eo(f.date.weeks+r.weeks,s,"trunc");h=i,u=i+s*t,l=Nt(f.date,0,h),m=Nt(f.date,0,u);break}case "day":{const e=Eo(f.date.days,s,"trunc");h=e,u=e+s*t,l=Nt(f.date,h),m=Nt(f.date,u);break}}const y=Sn(a,o.isoDate,l,"constrain"),p=Sn(a,o.isoDate,m,"constrain");let g,w;const v=xt(y,o.time),b=xt(p,o.time);i?(g=An(i,v,"compatible"),w=An(i,b,"compatible")):(g=pr(v),w=pr(b));const D=TimeDuration.fromEpochNsDiff(r,g),T=TimeDuration.fromEpochNsDiff(w,g),M=ue(d,t<0?"negative":"positive"),E=D.add(D).abs().subtract(T.abs()).sign(),I=Math.abs(h)/s%2==0,C=D.isZero()?Math.abs(h):D.cmp(T)?le(Math.abs(h),Math.abs(u),E,I,M):Math.abs(u),O=new TimeDuration(e.add(e.multiply(T.totalNs,e.BigInt(h)),e.multiply(D.totalNs,e.BigInt(s*t)))).fdiv(T.totalNs),$=C===Math.abs(u);return f={date:$?m:l,time:TimeDuration.ZERO},{nudgeResult:{duration:f,nudgedEpochNs:$?w:g,didExpandCalendarUnit:$},total:O}}function no(t,n,r,o,i,a,s,c,d){let h=t;const u=Kt(c)||o&&"day"===c,l=Ir(h)<0?-1:1;let m;return u?({nudgeResult:m}=to(l,h,n,r,o,i,s,c,d)):m=o?function(t,n,r,o,i,a,s,c){let d=n;const h=Sn(i,r.isoDate,d.date,"constrain"),u=xt(h,r.time),l=xt(Or(h.year,h.month,h.day+t),r.time),m=An(o,u,"compatible"),f=An(o,l,"compatible"),y=TimeDuration.fromEpochNsDiff(f,m);if(y.sign()!==t)throw new RangeError("time zone returned inconsistent Instants");const p=e.BigInt(at[s]*a);let g=d.time.round(p,c);const w=g.subtract(y),v=w.sign()!==-t;let b,D;return v?(b=t,g=w.round(p,c),D=g.addToEpochNs(f)):(b=0,D=g.addToEpochNs(m)),{duration:Jr(Nt(d.date,d.date.days+b),g),nudgedEpochNs:D,didExpandCalendarUnit:v}}(l,h,r,o,i,s,c,d):function(t,n,r,o,i,a){let s=t;const c=s.time.add24HourDays(s.date.days),d=c.round(e.BigInt(o*at[i]),a),h=d.subtract(c),{quotient:u}=c.divmod(Se),{quotient:l}=d.divmod(Se),m=Math.sign(l-u)===c.sign(),f=h.addToEpochNs(n);let y=0,p=d;return "date"===Vt(r)&&(y=l,p=d.add(TimeDuration.fromComponents(24*-l,0,0,0,0,0))),{duration:{date:Nt(s.date,y),time:p},nudgedEpochNs:f,didExpandCalendarUnit:m}}(h,n,a,s,c,d),h=m.duration,m.didExpandCalendarUnit&&"week"!==c&&(h=function(e,t,n,r,o,i,a,s){let c=t;if(s===a)return c;const d=it.indexOf(a);for(let t=it.indexOf(s)-1;t>=d;t--){const s=it[t];if("week"===s&&"week"!==a)continue;let d;switch(s){case "year":d={years:c.date.years+e,months:0,weeks:0,days:0};break;case "month":{const t=c.date.months+e;d=Nt(c.date,0,0,t);break}case "week":{const t=c.date.weeks+e;d=Nt(c.date,0,t);break}}const h=xt(Sn(i,r.isoDate,d,"constrain"),r.time);let u;if(u=o?An(o,h,"compatible"):pr(h),p(n,u)===-e)break;c={date:d,time:TimeDuration.ZERO};}return c}(l,h,m.nudgedEpochNs,r,o,i,a,Gt(c,"day"))),h}function ro(e,t,n,r,o,i){return Kt(i)||r&&"day"===i?to(Ir(e)<0?-1:1,e,t,n,r,o,1,i,"trunc").total:Yo(e.time.add24HourDays(e.date.days),i)}function oo(e,t,n,r,o,i,a){if(0==jo(e,t))return {date:{years:0,months:0,weeks:0,days:0},time:TimeDuration.ZERO};Br(e),Br(t);const s=Qr(e,t,n,r);return "nanosecond"===i&&1===o?s:no(s,pr(t),e,null,n,r,o,i,a)}function io(e,t,n,r,o,i,a,s){if("time"===Vt(o))return Xr(e,t,i,a,s);const c=eo(e,t,n,r,o);return "nanosecond"===a&&1===i?c:no(c,t,zn(n,e),n,r,o,i,a,s)}function ao(e,t,n,r,o,i){const a=nt.reduce(((e,t)=>{const o=t[0],i=t[1],a=t[2];return "datetime"!==n&&a!==n||r.includes(i)||e.push(i,o),e}),[]);let s=Wt(t,"largestUnit",n,"auto");if(r.includes(s))throw new RangeError(`largestUnit must be one of ${a.join(", ")}, not ${s}`);const c=Ft(t);let d=Ut(t,"trunc");"since"===e&&(d=function(e){switch(e){case "ceil":return "floor";case "floor":return "ceil";case "halfCeil":return "halfFloor";case "halfFloor":return "halfCeil";default:return e}}(d));const h=Wt(t,"smallestUnit",n,o);if(r.includes(h))throw new RangeError(`smallestUnit must be one of ${a.join(", ")}, not ${h}`);const u=Gt(i,h);if("auto"===s&&(s=u),Gt(s,h)!==s)throw new RangeError(`largestUnit ${s} cannot be smaller than smallestUnit ${h}`);const l={hour:24,minute:60,second:60,millisecond:1e3,microsecond:1e3,nanosecond:1e3}[h];return void 0!==l&&Ht(c,l,false),{largestUnit:s,roundingIncrement:c,roundingMode:d,smallestUnit:h}}function so(e,t,n,r){const o=cn(n),i=ao(e,Zo(r),"time",[],"nanosecond","second");let a=_r(Xr(re(t,b),re(o,b),i.roundingIncrement,i.smallestUnit,i.roundingMode),i.largestUnit);return "since"===e&&(a=Sr(a)),a}function co(e,t,n,r){const o=rn(n),i=re(t,E),a=re(o,E);if(!xn(i,a))throw new RangeError(`cannot compute difference between dates of ${i} and ${a} calendars`);const s=ao(e,Zo(r),"date",[],"day","day"),c=ce("%Temporal.Duration%"),d=re(t,D),h=re(o,D);if(0===Ro(d,h))return new c;let u={date:jn(i,d,h,s.largestUnit),time:TimeDuration.ZERO};if("day"!==s.smallestUnit||1!==s.roundingIncrement){const e=xt(d,{deltaDays:0,hour:0,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0});u=no(u,pr(xt(h,{deltaDays:0,hour:0,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0})),e,null,i,s.largestUnit,s.roundingIncrement,s.smallestUnit,s.roundingMode);}let l=_r(u,"day");return "since"===e&&(l=Sr(l)),l}function ho(e,t,n,r){const o=an(n),i=re(t,E),a=re(o,E);if(!xn(i,a))throw new RangeError(`cannot compute difference between dates of ${i} and ${a} calendars`);const s=ao(e,Zo(r),"datetime",[],"nanosecond","day"),c=ce("%Temporal.Duration%"),d=re(t,T),h=re(o,T);if(0===jo(d,h))return new c;let u=_r(oo(d,h,i,s.largestUnit,s.roundingIncrement,s.smallestUnit,s.roundingMode),s.largestUnit);return "since"===e&&(u=Sr(u)),u}function uo(e,t,n,r){const o=hn(n),i=ao(e,Zo(r),"time",[],"nanosecond","hour");let a=Vr(re(t,M),re(o,M));a=$o(a,i.roundingIncrement,i.smallestUnit,i.roundingMode);let s=_r(Jr({years:0,months:0,weeks:0,days:0},a),i.largestUnit);return "since"===e&&(s=Sr(s)),s}function lo(e,t,n,r){const o=ln(n),i=re(t,E),a=re(o,E);if(!xn(i,a))throw new RangeError(`cannot compute difference between months of ${i} and ${a} calendars`);const s=ao(e,Zo(r),"date",["week","day"],"month","year"),c=ce("%Temporal.Duration%");if(0==Ro(re(t,D),re(o,D)))return new c;const d=en(i,re(t,D),"year-month");d.day=1;const h=Ln(i,d,"constrain"),u=en(i,re(o,D),"year-month");u.day=1;const l=Ln(i,u,"constrain");let m={date:Nt(jn(i,h,l,s.largestUnit),0,0),time:TimeDuration.ZERO};if("month"!==s.smallestUnit||1!==s.roundingIncrement){const e=xt(h,{deltaDays:0,hour:0,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0});m=no(m,pr(xt(l,{deltaDays:0,hour:0,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0})),e,null,i,s.largestUnit,s.roundingIncrement,s.smallestUnit,s.roundingMode);}let f=_r(m,"day");return "since"===e&&(f=Sr(f)),f}function mo(t,n,r,o){const i=fn(r),a=re(n,E),s=re(i,E);if(!xn(a,s))throw new RangeError(`cannot compute difference between dates of ${a} and ${s} calendars`);const c=ao(t,Zo(o),"datetime",[],"nanosecond","hour"),d=re(n,b),h=re(i,b),u=ce("%Temporal.Duration%");let l;if("date"!==Vt(c.largestUnit))l=_r(Xr(d,h,c.roundingIncrement,c.smallestUnit,c.roundingMode),c.largestUnit);else {const t=re(n,$);if(!Zn(t,re(i,$)))throw new RangeError("When calculating difference between time zones, largestUnit must be 'hours' or smaller because day lengths can vary between time zones due to DST or time zone offset changes.");if(e.equal(d,h))return new u;l=_r(io(d,h,t,a,c.largestUnit,c.roundingIncrement,c.smallestUnit,c.roundingMode),"hour");}return "since"===t&&(l=Sr(l)),l}function fo({hour:e,minute:t,second:n,millisecond:r,microsecond:o,nanosecond:i},a){let s=n,c=i;return s+=a.sec,c+=a.subsec,Yr(e,t,s,r,o,c)}function yo(e,t){const n=t.addToEpochNs(e);return Fr(n),n}function po(e,t,n,r,o="constrain"){if(0===Er(r.date))return yo(e,r.time);const i=zn(t,e);return yo(An(t,xt(Sn(n,i.isoDate,r.date,o),i.time),"compatible"),r.time)}function go(e,t,n){let r=sn(n);"subtract"===e&&(r=Sr(r));const o=Gt(Jt(t),Jt(r));if(Kt(o))throw new RangeError("For years, months, or weeks arithmetic, use date arithmetic relative to a starting point");const i=qr(t),a=qr(r);return _r(Jr({years:0,months:0,weeks:0,days:0},i.time.add(a.time)),o)}function wo(e,t,n){let r=sn(n);"subtract"===e&&(r=Sr(r));const o=Jt(r);if("date"===Vt(o))throw new RangeError(`Duration field ${o} not supported by Temporal.Instant. Try Temporal.ZonedDateTime instead.`);const i=qr(r);return Cn(yo(re(t,b),i.time))}function vo(e,t,n,r){const o=re(t,E);let i=sn(n);"subtract"===e&&(i=Sr(i));const a=Wr(i),s=Lt(Zo(r));return pn(Sn(o,re(t,D),a,s),o)}function bo(e,t,n,r){let o=sn(n);"subtract"===e&&(o=Sr(o));const i=Lt(Zo(r)),a=re(t,E),s=qr(o),c=re(t,T),d=fo(c.time,s.time),h=Nt(s.date,d.deltaDays);return zr(h.years,h.months,h.weeks,h.days,0,0,0,0,0,0),wn(xt(Sn(a,c.isoDate,h,i),d),a)}function Do(e,t,n){let r=sn(n);"subtract"===e&&(r=Sr(r));const o=qr(r),{hour:i,minute:a,second:s,millisecond:c,microsecond:d,nanosecond:h}=fo(re(t,M),o.time);return Tn(jt(i,a,s,c,d,h,"reject"))}function To(e,t,n,r){let o=sn(n);"subtract"===e&&(o=Sr(o));const i=Lt(Zo(r)),a=Mr(o),s=re(t,E),c=en(s,re(t,D),"year-month");c.day=1;let d=Ln(s,c,"constrain");if(a<0){const e=Sn(s,d,{months:1},"constrain");d=Or(e.year,e.month,e.day-1);}const h=Wr(o);return Lr(d),En(Pn(s,en(s,Sn(s,d,h,i),"year-month"),i),s)}function Mo(e,t,n,r){let o=sn(n);"subtract"===e&&(o=Sr(o));const i=Lt(Zo(r)),a=re(t,$),s=re(t,E),c=Ar(o);return $n(po(re(t,b),a,s,c,i),a,s)}function Eo(e,t,n){const r=Math.trunc(e/t),o=e%t,i=e<0?"negative":"positive",a=Math.abs(r),s=a+1,c=Bo(Math.abs(2*o)-t),d=a%2==0,h=ue(n,i),u=0===o?a:le(a,s,c,d,h);return t*("positive"===i?u:-u)}function Io(o,i,a,s){const c=at[a]*i;return function(o,i,a){const s=m(o),c=m(i),d=e.divide(s,c),h=e.remainder(s,c),u=ue(a,"positive");let l,g;e.lessThan(s,t)?(l=e.subtract(d,n),g=d):(l=d,g=e.add(d,n));const w=p(y(e.multiply(h,r)),c)*(e.lessThan(s,t)?-1:1)+0,v=e.equal(h,t)?d:le(l,g,w,f(l),u);return e.multiply(v,c)}(o,e.BigInt(c),s)}function Co(e,t,n,r){Zr(e);const{year:o,month:i,day:a}=e.isoDate,s=Oo(e.time,t,n,r);return xt(Or(o,i,a+s.deltaDays),s)}function Oo({hour:e,minute:t,second:n,millisecond:r,microsecond:o,nanosecond:i},a,s,c){let d;switch(s){case "day":case "hour":d=1e3*(1e3*(1e3*(60*(60*e+t)+n)+r)+o)+i;break;case "minute":d=1e3*(1e3*(1e3*(60*t+n)+r)+o)+i;break;case "second":d=1e3*(1e3*(1e3*n+r)+o)+i;break;case "millisecond":d=1e3*(1e3*r+o)+i;break;case "microsecond":d=1e3*o+i;break;case "nanosecond":d=i;}const h=at[s],u=Eo(d,h*a,c)/h;switch(s){case "day":return {deltaDays:u,hour:0,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0};case "hour":return Yr(u,0,0,0,0,0);case "minute":return Yr(e,u,0,0,0,0);case "second":return Yr(e,t,u,0,0,0);case "millisecond":return Yr(e,t,n,u,0,0);case "microsecond":return Yr(e,t,n,r,u,0);case "nanosecond":return Yr(e,t,n,r,o,u);default:throw new Error(`Invalid unit ${s}`)}}function $o(t,n,r,o){const i=at[r];return t.round(e.BigInt(i*n),o)}function Yo(t,n){const r=at[n];return t.fdiv(e.BigInt(r))}function Ro(e,t){return e.year!==t.year?Bo(e.year-t.year):e.month!==t.month?Bo(e.month-t.month):e.day!==t.day?Bo(e.day-t.day):0}function So(e,t){return e.hour!==t.hour?Bo(e.hour-t.hour):e.minute!==t.minute?Bo(e.minute-t.minute):e.second!==t.second?Bo(e.second-t.second):e.millisecond!==t.millisecond?Bo(e.millisecond-t.millisecond):e.microsecond!==t.microsecond?Bo(e.microsecond-t.microsecond):e.nanosecond!==t.nanosecond?Bo(e.nanosecond-t.nanosecond):0}function jo(e,t){const n=Ro(e.isoDate,t.isoDate);return 0!==n?n:So(e.time,t.time)}function ko(e){const t=Lo(e);return void 0!==globalThis.BigInt?globalThis.BigInt(t.toString(10)):t}function No(t,n){const r=m(t),{quotient:o,remainder:i}=g(r,c);let a=e.toNumber(o);return "floor"===n&&e.toNumber(i)<0&&(a-=1),"ceil"===n&&e.toNumber(i)>0&&(a+=1),a}function xo(t){if(!Number.isInteger(t))throw new RangeError("epoch milliseconds must be an integer");return e.multiply(e.BigInt(t),c)}function Lo(t){let n=t;if("object"==typeof t){const e=t[Symbol.toPrimitive];e&&"function"==typeof e&&(n=e.call(t,"number"));}if("number"==typeof n)throw new TypeError("cannot convert number to bigint");return "bigint"==typeof n?e.BigInt(n.toString(10)):e.BigInt(n)}const Po=(()=>{let t=e.BigInt(Date.now()%1e6);return ()=>{const n=Date.now(),r=e.BigInt(n),o=e.add(xo(n),t);return t=e.remainder(r,c),e.greaterThan(o,Ne)?Ne:e.lessThan(o,xe)?xe:o}})();function Uo(){return (new Intl.DateTimeFormat).resolvedOptions().timeZone}function Bo(e){return e<0?-1:e>0?1:e}function Zo(e){if(void 0===e)return Object.create(null);if(Ae(e)&&null!==e)return e;throw new TypeError("Options parameter must be an object, not "+(null===e?"null":typeof e))}function Fo(e,t){const n=Object.create(null);return n[e]=t,n}function Ho(e,t,n,r){let o=e[t];if(void 0!==o){if(o=We(o),!n.includes(o))throw new RangeError(`${t} must be one of ${n.join(", ")}, not ${o}`);return o}if(r===qt)throw new RangeError(`${t} option is required`);return r}function zo(e){const t=Ao(e);if(!He.includes(Ao(t)))throw new RangeError(`invalid calendar identifier ${t}`);switch(t){case "ethiopic-amete-alem":return "ethioaa";case "islamicc":return "islamic-civil"}return t}function Ao(e){let t="";for(let n=0;n<e.length;n++){const r=e.charCodeAt(n);t+=r>=65&&r<=90?String.fromCharCode(r+32):String.fromCharCode(r);}return t}function qo(e){throw new TypeError(`Do not use built-in arithmetic operators with Temporal objects. When comparing, use ${"PlainMonthDay"===e?"Temporal.PlainDate.compare(obj1.toPlainDate(year), obj2.toPlainDate(year))":`Temporal.${e}.compare(obj1, obj2)`}, not obj1 > obj2. When coercing to strings, use \`\${obj}\` or String(obj), not '' + obj. When coercing to numbers, use properties or methods of the object, not \`+obj\`. When concatenating with strings, use \`\${str}\${obj}\` or str.concat(obj), not str + obj. In React, coerce to a string before rendering a Temporal object.`)}const Wo=new RegExp(`^${be.source}$`),_o=new RegExp(`^${/([+-])([01][0-9]|2[0-3])(?::?([0-5][0-9])(?::?([0-5][0-9])(?:[.,](\d{1,9}))?)?)?/.source}$`);function Jo(e,t,n,r=e(t),o=e(n)){let i=t,a=n,s=r,c=o;for(;a-i>1;){let t=Math.trunc((i+a)/2);const n=e(t);n===s?(i=t,s=n):n===c&&(a=t,c=n);}return a}function Go(e){return [...e]}function Ko(e,t){if("gregory"!==e&&"iso8601"!==e)return;const n=Xo[e];let r=t.year;const{dayOfWeek:o,dayOfYear:i,daysInYear:a}=n.isoToDate(t,{dayOfWeek:true,dayOfYear:true,daysInYear:true}),s=n.getFirstDayOfWeek(),c=n.getMinimalDaysInFirstWeek();let d=(o+7-s)%7,h=(o-i+7001-s)%7,u=Math.floor((i-1+h)/7);if(7-h>=c&&++u,0==u)u=function(e,t,n,r){let o=(r-e-n+1)%7;o<0&&(o+=7);let i=Math.floor((n+o-1)/7);return 7-o>=t&&++i,i}(s,c,i+n.isoToDate(n.dateAdd(t,{years:-1},"constrain"),{daysInYear:true}).daysInYear,o),r--;else if(i>=a-5){let e=(d+a-i)%7;e<0&&(e+=7),6-e>=c&&i+7-d>a&&(u=1,r++);}return {week:u,year:r}}function Vo(e,t,n,r,o){if(t!==o.year){if(e*(t-o.year)>0)return  true}else if(n!==o.month){if(e*(n-o.month)>0)return  true}else if(r!==o.day&&e*(r-o.day)>0)return  true;return  false}const Xo={};function Qo(e){if(!e.startsWith("M"))throw new RangeError(`Invalid month code: ${e}.  Month codes must start with M.`);const t=+e.slice(1);if(Number.isNaN(t))throw new RangeError(`Invalid month code: ${e}`);return t}function ei(e,t=false){return `M${`${e}`.padStart(2,"0")}${t?"L":""}`}function ti(e,t=void 0,n=12){let{month:r,monthCode:o}=e;if(void 0===o){if(void 0===r)throw new TypeError("Either month or monthCode are required");"reject"===t&&Nr(r,1,n),"constrain"===t&&(r=jr(r,1,n)),o=ei(r);}else {const e=Qo(o);if(o!==ei(e))throw new RangeError(`Invalid month code: ${o}`);if(void 0!==r&&r!==e)throw new RangeError(`monthCode ${o} and month ${r} must match if both are present`);if(r=e,r<1||r>n)throw new RangeError(`Invalid monthCode: ${o}`)}return {...e,month:r,monthCode:o}}Xo.iso8601={resolveFields(e,t){if(("date"===t||"year-month"===t)&&void 0===e.year)throw new TypeError("year is required");if(("date"===t||"month-day"===t)&&void 0===e.day)throw new TypeError("day is required");Object.assign(e,ti(e));},dateToISO:(e,t)=>St(e.year,e.month,e.day,t),monthDayToISOReferenceDate(e,t){const{month:n,day:r}=St(e.year??1972,e.month,e.day,t);return {month:n,day:r,year:1972}},extraFields:()=>[],fieldKeysToIgnore(e){const t=new Set;for(let n=0;n<e.length;n++){const r=e[n];t.add(r),"month"===r?t.add("monthCode"):"monthCode"===r&&t.add("month");}return Go(t)},dateAdd(e,{years:t=0,months:n=0,weeks:r=0,days:o=0},i){let{year:a,month:s,day:c}=e;return a+=t,s+=n,({year:a,month:s}=Cr(a,s)),({year:a,month:s,day:c}=St(a,s,c,i)),c+=o+7*r,Or(a,s,c)},dateUntil(e,t,n){const r=-Ro(e,t);if(0===r)return {years:0,months:0,weeks:0,days:0};let o,i=0,a=0;if("year"===n||"month"===n){let s=t.year-e.year;for(0!==s&&(s-=r);!Vo(r,e.year+s,e.month,e.day,t);)i=s,s+=r;let c=r;for(o=Cr(e.year+i,e.month+c);!Vo(r,o.year,o.month,e.day,t);)a=c,c+=r,o=Cr(o.year,o.month+r);"month"===n&&(a+=12*i,i=0);}o=Cr(e.year+i,e.month+a);const s=kr(o.year,o.month,e.day);let c=0,d=Gr(t.year,t.month-1,t.day)-Gr(s.year,s.month-1,s.day);return "week"===n&&(c=Math.trunc(d/7),d%=7),{years:i,months:a,weeks:c,days:d}},isoToDate({year:e,month:t,day:n},r){const o={era:void 0,eraYear:void 0,year:e,month:t,day:n,daysInWeek:7,monthsInYear:12};if(r.monthCode&&(o.monthCode=ei(t)),r.dayOfWeek){const r=t+(t<3?10:-2),i=e-(t<3?1:0),a=Math.floor(i/100),s=i-100*a,c=(n+Math.floor(2.6*r-.2)+(s+Math.floor(s/4))+(Math.floor(a/4)-2*a))%7;o.dayOfWeek=c+(c<=0?7:0);}if(r.dayOfYear){let r=n;for(let n=t-1;n>0;n--)r+=Tr(e,n);o.dayOfYear=r;}return r.weekOfYear&&(o.weekOfYear=Ko("iso8601",{year:e,month:t,day:n})),r.daysInMonth&&(o.daysInMonth=Tr(e,t)),(r.daysInYear||r.inLeapYear)&&(o.inLeapYear=Dr(e),o.daysInYear=o.inLeapYear?366:365),o},getFirstDayOfWeek:()=>1,getMinimalDaysInFirstWeek:()=>4};class OneObjectCache{constructor(e){if(this.map=new Map,this.calls=0,this.hits=0,this.misses=0,void 0!==e){let t=0;for(const n of e.map.entries()){if(++t>OneObjectCache.MAX_CACHE_ENTRIES)break;this.map.set(...n);}}}get(e){const t=this.map.get(e);return t&&(this.hits++,this.report()),this.calls++,t}set(e,t){this.map.set(e,t),this.misses++,this.report();}report(){}setObject(e){if(OneObjectCache.objectMap.get(e))throw new RangeError("object already cached");OneObjectCache.objectMap.set(e,this),this.report();}static getCacheForObject(e){let t=OneObjectCache.objectMap.get(e);return t||(t=new OneObjectCache,OneObjectCache.objectMap.set(e,t)),t}}function ni({isoYear:e,isoMonth:t,isoDay:n}){return `${Jn(e)}-${Gn(t)}-${Gn(n)}T00:00Z`}function ri(e,t){return {years:e.year-t.year,months:e.month-t.month,days:e.day-t.day}}OneObjectCache.objectMap=new WeakMap,OneObjectCache.MAX_CACHE_ENTRIES=1e3;class HelperBase{constructor(){this.eras=[],this.hasEra=false,this.erasBeginMidYear=false;}getFormatter(){return void 0===this.formatter&&(this.formatter=new Intl.DateTimeFormat(`en-US-u-ca-${this.id}`,{day:"numeric",month:"numeric",year:"numeric",era:"short",timeZone:"UTC"})),this.formatter}getCalendarParts(e){let t=this.getFormatter(),n=new Date(e);if("-271821-04-19T00:00Z"===e){const e=t.resolvedOptions();t=new Intl.DateTimeFormat(e.locale,{...e,timeZone:"Etc/GMT+1"}),n=new Date("-271821-04-20T00:00Z");}try{return t.formatToParts(n)}catch(t){throw new RangeError(`Invalid ISO date: ${e}`)}}isoToCalendarDate(e,t){const{year:n,month:r,day:o}=e,i=JSON.stringify({func:"isoToCalendarDate",isoYear:n,isoMonth:r,isoDay:o,id:this.id}),a=t.get(i);if(a)return a;const s=ni({isoYear:n,isoMonth:r,isoDay:o}),c=this.getCalendarParts(s),d={};for(let e=0;e<c.length;e++){const{type:t,value:n}=c[e];if("year"!==t&&"relatedYear"!==t||(this.hasEra?d.eraYear=+n:d.year=+n),"month"===t){const e=/^([0-9]*)(.*?)$/.exec(n);if(!e||3!=e.length||!e[1]&&!e[2])throw new RangeError(`Unexpected month: ${n}`);if(d.month=e[1]?+e[1]:1,d.month<1)throw new RangeError(`Invalid month ${n} from ${s}[u-ca-${this.id}] (probably due to https://bugs.chromium.org/p/v8/issues/detail?id=10527)`);if(d.month>13)throw new RangeError(`Invalid month ${n} from ${s}[u-ca-${this.id}] (probably due to https://bugs.chromium.org/p/v8/issues/detail?id=10529)`);e[2]&&(d.monthExtra=e[2]);}"day"===t&&(d.day=+n),this.hasEra&&"era"===t&&null!=n&&""!==n&&(d.era=n.split(" (")[0].normalize("NFD").replace(/[^-0-9 \p{L}]/gu,"").replace(/ /g,"-").toLowerCase());}if(this.hasEra&&void 0===d.eraYear)throw new RangeError(`Intl.DateTimeFormat.formatToParts lacks relatedYear in ${this.id} calendar. Try Node 14+ or modern browsers.`);if(this.hasEra){const e=this.eras.find((e=>d.era===e.genericName));e&&(d.era=e.code);}if(this.reviseIntlEra){const{era:t,eraYear:n}=this.reviseIntlEra(d,e);d.era=t,d.eraYear=n;}this.checkIcuBugs&&this.checkIcuBugs(e);const h=this.adjustCalendarDate(d,t,"constrain",true);if(void 0===h.year)throw new RangeError(`Missing year converting ${JSON.stringify(e)}`);if(void 0===h.month)throw new RangeError(`Missing month converting ${JSON.stringify(e)}`);if(void 0===h.day)throw new RangeError(`Missing day converting ${JSON.stringify(e)}`);return t.set(i,h),["constrain","reject"].forEach((n=>{const r=JSON.stringify({func:"calendarToIsoDate",year:h.year,month:h.month,day:h.day,overflow:n,id:this.id});t.set(r,e);})),h}validateCalendarDate(e){const{month:t,year:n,day:r,eraYear:o,monthCode:i,monthExtra:a}=e;if(void 0!==a)throw new RangeError("Unexpected `monthExtra` value");if(void 0===n&&void 0===o)throw new TypeError("year or eraYear is required");if(void 0===t&&void 0===i)throw new TypeError("month or monthCode is required");if(void 0===r)throw new RangeError("Missing day");if(void 0!==i){if("string"!=typeof i)throw new RangeError("monthCode must be a string, not "+typeof i);if(!/^M([01]?\d)(L?)$/.test(i))throw new RangeError(`Invalid monthCode: ${i}`)}if(this.hasEra&&void 0===e.era!=(void 0===e.eraYear))throw new TypeError("properties era and eraYear must be provided together")}adjustCalendarDate(e,t=void 0,n="constrain",r=false){if("lunisolar"===this.calendarType)throw new RangeError("Override required for lunisolar calendars");let o=e;this.validateCalendarDate(o);const i=this.monthsInYear(o,t);let{month:a,monthCode:s}=o;return ({month:a,monthCode:s}=ti(o,n,i)),{...o,month:a,monthCode:s}}regulateMonthDayNaive(e,t,n){const r=this.monthsInYear(e,n);let{month:o,day:i}=e;return "reject"===t?(Nr(o,1,r),Nr(i,1,this.maximumMonthLength(e))):(o=jr(o,1,r),i=jr(i,1,this.maximumMonthLength({...e,month:o}))),{...e,month:o,day:i}}calendarToIsoDate(e,t="constrain",n){const r=e;let o=this.adjustCalendarDate(e,n,t,false);o=this.regulateMonthDayNaive(o,t,n);const{year:i,month:a,day:s}=o,c=JSON.stringify({func:"calendarToIsoDate",year:i,month:a,day:s,overflow:t,id:this.id});let d,h=n.get(c);if(h)return h;if(void 0!==r.year&&void 0!==r.month&&void 0!==r.day&&(r.year!==o.year||r.month!==o.month||r.day!==o.day)&&(d=JSON.stringify({func:"calendarToIsoDate",year:r.year,month:r.month,day:r.day,overflow:t,id:this.id}),h=n.get(d),h))return h;let u=this.estimateIsoDate({year:i,month:a,day:s});const l=e=>{let r=this.addDaysIso(u,e);if(o.day>this.minimumMonthLength(o)){let e=this.isoToCalendarDate(r,n);for(;e.month!==a||e.year!==i;){if("reject"===t)throw new RangeError(`day ${s} does not exist in month ${a} of year ${i}`);r=this.addDaysIso(r,-1),e=this.isoToCalendarDate(r,n);}}return r};let m=0,f=this.isoToCalendarDate(u,n),y=ri(o,f);if(0!==y.years||0!==y.months||0!==y.days){const e=365*y.years+30*y.months+y.days;u=this.addDaysIso(u,e),f=this.isoToCalendarDate(u,n),y=ri(o,f),0===y.years&&0===y.months?u=l(y.days):m=this.compareCalendarDates(o,f);}let p=8;for(;m;){u=this.addDaysIso(u,m*p);const e=f;f=this.isoToCalendarDate(u,n);const i=m;if(m=this.compareCalendarDates(o,f),m)if(y=ri(o,f),0===y.years&&0===y.months)u=l(y.days),m=0;else if(i&&m!==i)if(p>1)p/=2;else {if("reject"===t)throw new RangeError(`Can't find ISO date from calendar date: ${JSON.stringify({...r})}`);this.compareCalendarDates(f,e)>0&&(u=this.addDaysIso(u,-1)),m=0;}}if(n.set(c,u),d&&n.set(d,u),void 0===o.year||void 0===o.month||void 0===o.day||void 0===o.monthCode||this.hasEra&&(void 0===o.era||void 0===o.eraYear))throw new RangeError("Unexpected missing property");return u}compareCalendarDates(e,t){return e.year!==t.year?Bo(e.year-t.year):e.month!==t.month?Bo(e.month-t.month):e.day!==t.day?Bo(e.day-t.day):0}regulateDate(e,t="constrain",n){const r=this.calendarToIsoDate(e,t,n);return this.isoToCalendarDate(r,n)}addDaysIso(e,t){return Or(e.year,e.month,e.day+t)}addDaysCalendar(e,t,n){const r=this.calendarToIsoDate(e,"constrain",n),o=this.addDaysIso(r,t);return this.isoToCalendarDate(o,n)}addMonthsCalendar(e,t,n,r){let o=e;const{day:i}=o;for(let e=0,n=Math.abs(t);e<n;e++){const{month:e}=o,n=o,a=t<0?-Math.max(i,this.daysInPreviousMonth(o,r)):this.daysInMonth(o,r),s=this.calendarToIsoDate(o,"constrain",r);let c=this.addDaysIso(s,a);if(o=this.isoToCalendarDate(c,r),t>0){const t=this.monthsInYear(n,r);for(;o.month-1!=e%t;)c=this.addDaysIso(c,-1),o=this.isoToCalendarDate(c,r);}o.day!==i&&(o=this.regulateDate({...o,day:i},"constrain",r));}if("reject"===n&&o.day!==i)throw new RangeError(`Day ${i} does not exist in resulting calendar month`);return o}addCalendar(e,{years:t=0,months:n=0,weeks:r=0,days:o=0},i,a){const{year:s,day:c,monthCode:d}=e,h=this.adjustCalendarDate({year:s+t,monthCode:d,day:c},a),u=this.addMonthsCalendar(h,n,i,a),l=o+7*r;return this.addDaysCalendar(u,l,a)}untilCalendar(e,t,n,r){let o=0,i=0,a=0,s=0;switch(n){case "day":o=this.calendarDaysUntil(e,t,r);break;case "week":{const n=this.calendarDaysUntil(e,t,r);o=n%7,i=(n-o)/7;break}case "month":case "year":{const i=this.compareCalendarDates(t,e);if(!i)return {years:0,months:0,weeks:0,days:0};const c=t.year-e.year,d=t.day-e.day;if("year"===n&&c){let n=0;t.monthCode>e.monthCode&&(n=1),t.monthCode<e.monthCode&&(n=-1),n||(n=Math.sign(d)),s=n*i<0?c-i:c;}let h,u=s?this.addCalendar(e,{years:s},"constrain",r):e;do{a+=i,h=u,u=this.addMonthsCalendar(h,i,"constrain",r),u.day!==e.day&&(u=this.regulateDate({...u,day:e.day},"constrain",r));}while(this.compareCalendarDates(t,u)*i>=0);a-=i,o=this.calendarDaysUntil(h,t,r);break}}return {years:s,months:a,weeks:i,days:o}}daysInMonth(e,t){const{day:n}=e,r=this.maximumMonthLength(e),o=this.minimumMonthLength(e);if(o===r)return o;const i=n<=r-o?r:o,a=this.calendarToIsoDate(e,"constrain",t),s=this.addDaysIso(a,i),c=this.isoToCalendarDate(s,t),d=this.addDaysIso(s,-c.day);return this.isoToCalendarDate(d,t).day}daysInPreviousMonth(e,t){const{day:n,month:r,year:o}=e;let i={year:r>1?o:o-1,month:r,day:1};const a=r>1?r-1:this.monthsInYear(i,t);i={...i,month:a};const s=this.minimumMonthLength(i),c=this.maximumMonthLength(i);if(s===c)return c;const d=this.calendarToIsoDate(e,"constrain",t),h=this.addDaysIso(d,-n);return this.isoToCalendarDate(h,t).day}startOfCalendarYear(e){return {year:e.year,month:1,monthCode:"M01",day:1}}startOfCalendarMonth(e){return {year:e.year,month:e.month,day:1}}calendarDaysUntil(e,t,n){const r=this.calendarToIsoDate(e,"constrain",n),o=this.calendarToIsoDate(t,"constrain",n);return Gr(o.year,o.month-1,o.day)-Gr(r.year,r.month-1,r.day)}monthDaySearchStartYear(e,t){return 1972}monthDayFromFields(e,t,n){let r,o,i,a,s,{era:c,eraYear:d,year:h,month:u,monthCode:l,day:m}=e;if(void 0!==u&&void 0===h&&(!this.hasEra||void 0===c||void 0===d))throw new TypeError("when month is present, year (or era and eraYear) are required");(void 0===l||void 0!==h||this.hasEra&&void 0!==d)&&({monthCode:l,day:m}=this.isoToCalendarDate(this.calendarToIsoDate(e,t,n),n));const f={year:this.monthDaySearchStartYear(l,m),month:12,day:31},y=this.isoToCalendarDate(f,n),p=y.monthCode>l||y.monthCode===l&&y.day>=m?y.year:y.year-1;for(let e=0;e<20;e++){const c=this.adjustCalendarDate({day:m,monthCode:l,year:p-e},n),d=this.calendarToIsoDate(c,"constrain",n),h=this.isoToCalendarDate(d,n);if(({year:r,month:o,day:i}=d),h.monthCode===l&&h.day===m)return {month:o,day:i,year:r};if("constrain"===t){const e=this.maxLengthOfMonthCodeInAnyYear(h.monthCode);if(h.monthCode===l&&h.day===e&&m>e)return {month:o,day:i,year:r};(void 0===a||h.monthCode===a.monthCode&&h.day>a.day)&&(a=h,s=d);}}if("constrain"===t&&void 0!==s)return s;throw new RangeError(`No recent ${this.id} year with monthCode ${l} and day ${m}`)}getFirstDayOfWeek(){}getMinimalDaysInFirstWeek(){}}class HebrewHelper extends HelperBase{constructor(){super(...arguments),this.id="hebrew",this.calendarType="lunisolar",this.months={Tishri:{leap:1,regular:1,monthCode:"M01",days:30},Heshvan:{leap:2,regular:2,monthCode:"M02",days:{min:29,max:30}},Kislev:{leap:3,regular:3,monthCode:"M03",days:{min:29,max:30}},Tevet:{leap:4,regular:4,monthCode:"M04",days:29},Shevat:{leap:5,regular:5,monthCode:"M05",days:30},Adar:{leap:void 0,regular:6,monthCode:"M06",days:29},"Adar I":{leap:6,regular:void 0,monthCode:"M05L",days:30},"Adar II":{leap:7,regular:void 0,monthCode:"M06",days:29},Nisan:{leap:8,regular:7,monthCode:"M07",days:30},Iyar:{leap:9,regular:8,monthCode:"M08",days:29},Sivan:{leap:10,regular:9,monthCode:"M09",days:30},Tamuz:{leap:11,regular:10,monthCode:"M10",days:29},Av:{leap:12,regular:11,monthCode:"M11",days:30},Elul:{leap:13,regular:12,monthCode:"M12",days:29}};}inLeapYear(e){const{year:t}=e;return (7*t+1)%19<7}monthsInYear(e){return this.inLeapYear(e)?13:12}minimumMonthLength(e){return this.minMaxMonthLength(e,"min")}maximumMonthLength(e){return this.minMaxMonthLength(e,"max")}minMaxMonthLength(e,t){const{month:n,year:r}=e,o=this.getMonthCode(r,n),i=Object.entries(this.months).find((e=>e[1].monthCode===o));if(void 0===i)throw new RangeError(`unmatched Hebrew month: ${n}`);const a=i[1].days;return "number"==typeof a?a:a[t]}maxLengthOfMonthCodeInAnyYear(e){return ["M04","M06","M08","M10","M12"].includes(e)?29:30}estimateIsoDate(e){const{year:t}=e;return {year:t-3760,month:1,day:1}}getMonthCode(e,t){return this.inLeapYear({year:e})?6===t?ei(5,true):ei(t<6?t:t-1):ei(t)}adjustCalendarDate(e,t,n="constrain",r=false){let{year:o,month:i,monthCode:a,day:s,monthExtra:c}=e;if(void 0===o)throw new TypeError("Missing property: year");if(r){if(c){const e=this.months[c];if(!e)throw new RangeError(`Unrecognized month from formatToParts: ${c}`);i=this.inLeapYear({year:o})?e.leap:e.regular;}return a=this.getMonthCode(o,i),{year:o,month:i,day:s,monthCode:a}}if(this.validateCalendarDate(e),void 0===i)if(a.endsWith("L")){if("M05L"!==a)throw new RangeError(`Hebrew leap month must have monthCode M05L, not ${a}`);if(i=6,!this.inLeapYear({year:o})){if("reject"===n)throw new RangeError(`Hebrew monthCode M05L is invalid in year ${o} which is not a leap year`);i=6,a="M06";}}else {i=Qo(a),this.inLeapYear({year:o})&&i>=6&&i++;const e=this.monthsInYear({year:o});if(i<1||i>e)throw new RangeError(`Invalid monthCode: ${a}`)}else if("reject"===n?(Nr(i,1,this.monthsInYear({year:o})),Nr(s,1,this.maximumMonthLength({year:o,month:i}))):(i=jr(i,1,this.monthsInYear({year:o})),s=jr(s,1,this.maximumMonthLength({year:o,month:i}))),void 0===a)a=this.getMonthCode(o,i);else if(this.getMonthCode(o,i)!==a)throw new RangeError(`monthCode ${a} doesn't correspond to month ${i} in Hebrew year ${o}`);return {...e,day:s,month:i,monthCode:a,year:o}}}class IslamicBaseHelper extends HelperBase{constructor(){super(...arguments),this.calendarType="lunar",this.DAYS_PER_ISLAMIC_YEAR=354+11/30,this.DAYS_PER_ISO_YEAR=365.2425;}inLeapYear(e,t){const n={year:e.year,month:1,monthCode:"M01",day:1},r={year:e.year+1,month:1,monthCode:"M01",day:1};return 355===this.calendarDaysUntil(n,r,t)}monthsInYear(){return 12}minimumMonthLength(){return 29}maximumMonthLength(){return 30}maxLengthOfMonthCodeInAnyYear(){return 30}estimateIsoDate(e){const{year:t}=this.adjustCalendarDate(e);return {year:Math.floor(t*this.DAYS_PER_ISLAMIC_YEAR/this.DAYS_PER_ISO_YEAR)+622,month:1,day:1}}}class IslamicHelper extends IslamicBaseHelper{constructor(){super(...arguments),this.id="islamic";}}class IslamicUmalquraHelper extends IslamicBaseHelper{constructor(){super(...arguments),this.id="islamic-umalqura";}}class IslamicTblaHelper extends IslamicBaseHelper{constructor(){super(...arguments),this.id="islamic-tbla";}}class IslamicCivilHelper extends IslamicBaseHelper{constructor(){super(...arguments),this.id="islamic-civil";}}class IslamicRgsaHelper extends IslamicBaseHelper{constructor(){super(...arguments),this.id="islamic-rgsa";}}class IslamicCcHelper extends IslamicBaseHelper{constructor(){super(...arguments),this.id="islamicc";}}class PersianHelper extends HelperBase{constructor(){super(...arguments),this.id="persian",this.calendarType="solar";}inLeapYear(e,t){return 30===this.daysInMonth({year:e.year,month:12,day:1},t)}monthsInYear(){return 12}minimumMonthLength(e){const{month:t}=e;return 12===t?29:t<=6?31:30}maximumMonthLength(e){const{month:t}=e;return 12===t?30:t<=6?31:30}maxLengthOfMonthCodeInAnyYear(e){return Qo(e)<=6?31:30}estimateIsoDate(e){const{year:t}=this.adjustCalendarDate(e);return {year:t+621,month:1,day:1}}}class IndianHelper extends HelperBase{constructor(){super(...arguments),this.id="indian",this.calendarType="solar",this.months={1:{length:30,month:3,day:22,leap:{length:31,month:3,day:21}},2:{length:31,month:4,day:21},3:{length:31,month:5,day:22},4:{length:31,month:6,day:22},5:{length:31,month:7,day:23},6:{length:31,month:8,day:23},7:{length:30,month:9,day:23},8:{length:30,month:10,day:23},9:{length:30,month:11,day:22},10:{length:30,month:12,day:22},11:{length:30,month:1,nextYear:true,day:21},12:{length:30,month:2,nextYear:true,day:20}},this.vulnerableToBceBug="10/11/-79 Saka"!==new Date("0000-01-01T00:00Z").toLocaleDateString("en-US-u-ca-indian",{timeZone:"UTC"});}inLeapYear(e){return oi(e.year+78)}monthsInYear(){return 12}minimumMonthLength(e){return this.getMonthInfo(e).length}maximumMonthLength(e){return this.getMonthInfo(e).length}maxLengthOfMonthCodeInAnyYear(e){const t=Qo(e);let n=this.months[t];return n=n.leap??n,n.length}getMonthInfo(e){const{month:t}=e;let n=this.months[t];if(void 0===n)throw new RangeError(`Invalid month: ${t}`);return this.inLeapYear(e)&&n.leap&&(n=n.leap),n}estimateIsoDate(e){const t=this.adjustCalendarDate(e),n=this.getMonthInfo(t);return Or(t.year+78+(n.nextYear?1:0),n.month,n.day+t.day-1)}checkIcuBugs(e){if(this.vulnerableToBceBug&&e.year<1)throw new RangeError(`calendar '${this.id}' is broken for ISO dates before 0001-01-01 (see https://bugs.chromium.org/p/v8/issues/detail?id=10529)`)}}function oi(e){return e%4==0&&(e%100!=0||e%400==0)}class GregorianBaseHelperFixedEpoch extends HelperBase{constructor(e,t){super(),this.calendarType="solar",this.id=e,this.isoEpoch=t;}inLeapYear(e){const{year:t}=this.estimateIsoDate({month:1,day:1,year:e.year});return oi(t)}monthsInYear(){return 12}minimumMonthLength(e){const{month:t}=e;return 2===t?this.inLeapYear(e)?29:28:[4,6,9,11].indexOf(t)>=0?30:31}maximumMonthLength(e){return this.minimumMonthLength(e)}maxLengthOfMonthCodeInAnyYear(e){return [31,29,31,30,31,30,31,31,30,31,30,31][Qo(e)-1]}estimateIsoDate(e){const t=this.adjustCalendarDate(e);return St(t.year+this.isoEpoch.year,t.month+this.isoEpoch.month,t.day+this.isoEpoch.day,"constrain")}}class GregorianBaseHelper extends HelperBase{constructor(e,t){super(),this.hasEra=true,this.calendarType="solar",this.id=e;const{eras:n,anchorEra:r}=function(e){let t,n=e;if(0===n.length)throw new RangeError("Invalid era data: eras are required");if(1===n.length&&n[0].reverseOf)throw new RangeError("Invalid era data: anchor era cannot count years backwards");if(1===n.length&&!n[0].code)throw new RangeError("Invalid era data: at least one named era is required");if(n.filter((e=>null!=e.reverseOf)).length>1)throw new RangeError("Invalid era data: only one era can count years backwards");n.forEach((e=>{if(e.isAnchor||!e.anchorEpoch&&!e.reverseOf){if(t)throw new RangeError("Invalid era data: cannot have multiple anchor eras");t=e,e.anchorEpoch={year:e.hasYearZero?0:1};}else if(!e.code)throw new RangeError("If era name is blank, it must be the anchor era")})),n=n.filter((e=>e.code)),n.forEach((e=>{const{reverseOf:t}=e;if(t){const r=n.find((e=>e.code===t));if(void 0===r)throw new RangeError(`Invalid era data: unmatched reverseOf era: ${t}`);e.reverseOf=r,e.anchorEpoch=r.anchorEpoch,e.isoEpoch=r.isoEpoch;} void 0===e.anchorEpoch.month&&(e.anchorEpoch.month=1),void 0===e.anchorEpoch.day&&(e.anchorEpoch.day=1);})),n.sort(((e,t)=>{if(e.reverseOf)return 1;if(t.reverseOf)return  -1;if(!e.isoEpoch||!t.isoEpoch)throw new RangeError("Invalid era data: missing ISO epoch");return t.isoEpoch.year-e.isoEpoch.year}));const r=n[n.length-1].reverseOf;if(r&&r!==n[n.length-2])throw new RangeError("Invalid era data: invalid reverse-sign era");return n.forEach(((e,t)=>{e.genericName="era"+(n.length-1-t);})),{eras:n,anchorEra:t||n[0]}}(t);this.anchorEra=r,this.eras=n;}inLeapYear(e){const{year:t}=this.estimateIsoDate({month:1,day:1,year:e.year});return oi(t)}monthsInYear(){return 12}minimumMonthLength(e){const{month:t}=e;return 2===t?this.inLeapYear(e)?29:28:[4,6,9,11].indexOf(t)>=0?30:31}maximumMonthLength(e){return this.minimumMonthLength(e)}maxLengthOfMonthCodeInAnyYear(e){return [31,29,31,30,31,30,31,31,30,31,30,31][Qo(e)-1]}completeEraYear(e){const t=(t,n,r)=>{const o=e[t];if(null!=o&&o!=n&&!(r||[]).includes(o)){const e=r?.[0];throw new RangeError(`Input ${t} ${o} doesn't match calculated value ${e?`${n} (also called ${e})`:n}`)}},n=t=>{let n;const r={...e,year:t},o=this.eras.find(((e,o)=>{if(o===this.eras.length-1){if(e.reverseOf){if(t>0)throw new RangeError(`Signed year ${t} is invalid for era ${e.code}`);return n=e.anchorEpoch.year-t,true}return n=t-e.anchorEpoch.year+(e.hasYearZero?0:1),true}return this.compareCalendarDates(r,e.anchorEpoch)>=0&&(n=t-e.anchorEpoch.year+(e.hasYearZero?0:1),true)}));if(!o)throw new RangeError(`Year ${t} was not matched by any era`);return {eraYear:n,era:o.code,eraNames:o.names}};let{year:r,eraYear:o,era:i}=e;if(null!=r){const e=n(r);(({eraYear:o,era:i}=e)),t("era",i,e?.eraNames),t("eraYear",o);}else {if(null==o)throw new RangeError("Either year or eraYear and era are required");{if(void 0===i)throw new RangeError("era and eraYear must be provided together");const e=this.eras.find((({code:e,names:t=[]})=>e===i||t.includes(i)));if(!e)throw new RangeError(`Era ${i} (ISO year ${o}) was not matched by any era`);r=e.reverseOf?e.anchorEpoch.year-o:o+e.anchorEpoch.year-(e.hasYearZero?0:1),t("year",r),({eraYear:o,era:i}=n(r));}}return {...e,year:r,eraYear:o,era:i}}adjustCalendarDate(e,t,n="constrain"){let r=e;const{month:o,monthCode:i}=r;return void 0===o&&(r={...r,month:Qo(i)}),this.validateCalendarDate(r),r=this.completeEraYear(r),super.adjustCalendarDate(r,t,n)}estimateIsoDate(e){const t=this.adjustCalendarDate(e),{year:n,month:r,day:o}=t,{anchorEra:i}=this;return St(n+i.isoEpoch.year-(i.hasYearZero?0:1),r,o,"constrain")}}class SameMonthDayAsGregorianBaseHelper extends GregorianBaseHelper{constructor(e,t){super(e,t);}isoToCalendarDate(e){const{year:t,month:n,day:r}=e,o=ei(n),i=t-this.anchorEra.isoEpoch.year+1;return this.completeEraYear({year:i,month:n,monthCode:o,day:r})}}const ii={inLeapYear(e){const{year:t}=e;return (t+1)%4==0},monthsInYear:()=>13,minimumMonthLength(e){const{month:t}=e;return 13===t?this.inLeapYear(e)?6:5:30},maximumMonthLength(e){return this.minimumMonthLength(e)},maxLengthOfMonthCodeInAnyYear:e=>"M13"===e?6:30};class OrthodoxBaseHelperFixedEpoch extends GregorianBaseHelperFixedEpoch{constructor(e,t){super(e,t),this.inLeapYear=ii.inLeapYear,this.monthsInYear=ii.monthsInYear,this.minimumMonthLength=ii.minimumMonthLength,this.maximumMonthLength=ii.maximumMonthLength,this.maxLengthOfMonthCodeInAnyYear=ii.maxLengthOfMonthCodeInAnyYear;}}class OrthodoxBaseHelper extends GregorianBaseHelper{constructor(e,t){super(e,t),this.inLeapYear=ii.inLeapYear,this.monthsInYear=ii.monthsInYear,this.minimumMonthLength=ii.minimumMonthLength,this.maximumMonthLength=ii.maximumMonthLength,this.maxLengthOfMonthCodeInAnyYear=ii.maxLengthOfMonthCodeInAnyYear;}}class EthioaaHelper extends OrthodoxBaseHelperFixedEpoch{constructor(){super("ethioaa",{year:-5492,month:7,day:17});}}class CopticHelper extends OrthodoxBaseHelper{constructor(){super("coptic",[{code:"coptic",isoEpoch:{year:284,month:8,day:29}},{code:"coptic-inverse",reverseOf:"coptic"}]);}}class EthiopicHelper extends OrthodoxBaseHelper{constructor(){super("ethiopic",[{code:"ethioaa",names:["ethiopic-amete-alem","mundi"],isoEpoch:{year:-5492,month:7,day:17}},{code:"ethiopic",names:["incar"],isoEpoch:{year:8,month:8,day:27},anchorEpoch:{year:5501}}]);}}class RocHelper extends SameMonthDayAsGregorianBaseHelper{constructor(){super("roc",[{code:"roc",names:["minguo"],isoEpoch:{year:1912,month:1,day:1}},{code:"roc-inverse",names:["before-roc"],reverseOf:"roc"}]);}}class BuddhistHelper extends GregorianBaseHelperFixedEpoch{constructor(){super("buddhist",{year:-543,month:1,day:1});}}class GregoryHelper extends SameMonthDayAsGregorianBaseHelper{constructor(){super("gregory",[{code:"gregory",names:["ad","ce"],isoEpoch:{year:1,month:1,day:1}},{code:"gregory-inverse",names:["be","bce"],reverseOf:"gregory"}]);}reviseIntlEra(e){let{era:t,eraYear:n}=e;return "b"===t&&(t="gregory-inverse"),"a"===t&&(t="gregory"),{era:t,eraYear:n}}getFirstDayOfWeek(){return 1}getMinimalDaysInFirstWeek(){return 1}}class JapaneseHelper extends SameMonthDayAsGregorianBaseHelper{constructor(){super("japanese",[{code:"reiwa",isoEpoch:{year:2019,month:5,day:1},anchorEpoch:{year:2019,month:5,day:1}},{code:"heisei",isoEpoch:{year:1989,month:1,day:8},anchorEpoch:{year:1989,month:1,day:8}},{code:"showa",isoEpoch:{year:1926,month:12,day:25},anchorEpoch:{year:1926,month:12,day:25}},{code:"taisho",isoEpoch:{year:1912,month:7,day:30},anchorEpoch:{year:1912,month:7,day:30}},{code:"meiji",isoEpoch:{year:1868,month:9,day:8},anchorEpoch:{year:1868,month:9,day:8}},{code:"japanese",names:["japanese","gregory","ad","ce"],isoEpoch:{year:1,month:1,day:1}},{code:"japanese-inverse",names:["japanese-inverse","gregory-inverse","bc","bce"],reverseOf:"japanese"}]),this.erasBeginMidYear=true;}reviseIntlEra(e,t){const{era:n,eraYear:r}=e,{year:o}=t;return this.eras.find((e=>e.code===n))?{era:n,eraYear:r}:o<1?{era:"japanese-inverse",eraYear:1-o}:{era:"japanese",eraYear:o}}}class ChineseBaseHelper extends HelperBase{constructor(){super(...arguments),this.calendarType="lunisolar";}inLeapYear(e,t){const n=this.getMonthList(e.year,t);return 13===Object.entries(n).length}monthsInYear(e,t){return this.inLeapYear(e,t)?13:12}minimumMonthLength(){return 29}maximumMonthLength(){return 30}maxLengthOfMonthCodeInAnyYear(e){return ["M01L","M09L","M10L","M11L","M12L"].includes(e)?29:30}monthDaySearchStartYear(e,t){const n={M01L:[1651,1651],M02L:[1947,1765],M03L:[1966,1955],M04L:[1963,1944],M05L:[1971,1952],M06L:[1960,1941],M07L:[1968,1938],M08L:[1957,1718],M09L:[1832,1832],M10L:[1870,1870],M11L:[1814,1814],M12L:[1890,1890]}[e]??[1972,1972];return t<30?n[0]:n[1]}getMonthList(e,t){if(void 0===e)throw new TypeError("Missing year");const n=JSON.stringify({func:"getMonthList",calendarYear:e,id:this.id}),r=t.get(n);if(r)return r;const o=this.getFormatter(),i=(e,t)=>{const n=ni({isoYear:e,isoMonth:2,isoDay:1}),r=new Date(n);r.setUTCDate(t+1);const i=o.formatToParts(r),a=i.find((e=>"month"===e.type)).value,s=+i.find((e=>"day"===e.type)).value,c=i.find((e=>"relatedYear"===e.type));let d;if(void 0===c)throw new RangeError(`Intl.DateTimeFormat.formatToParts lacks relatedYear in ${this.id} calendar. Try Node 14+ or modern browsers.`);return d=+c.value,{calendarMonthString:a,calendarDay:s,calendarYearToVerify:d}};let a=17,{calendarMonthString:s,calendarDay:c,calendarYearToVerify:d}=i(e,a);"1"!==s&&(a+=29,({calendarMonthString:s,calendarDay:c}=i(e,a))),a-=c-5;const h={};let u,l,m=1,f=false;do{(({calendarMonthString:s,calendarDay:c,calendarYearToVerify:d}=i(e,a))),u&&(h[l].daysInMonth=u+30-c),d!==e?f=true:(h[s]={monthIndex:m++},a+=30),u=c,l=s;}while(!f);return h[l].daysInMonth=u+30-c,t.set(n,h),h}estimateIsoDate(e){const{year:t,month:n}=e;return {year:t,month:n>=12?12:n+1,day:1}}adjustCalendarDate(e,t,n="constrain",r=false){let{year:o,month:i,monthExtra:a,day:s,monthCode:c}=e;if(void 0===o)throw new TypeError("Missing property: year");if(r){if(a&&"bis"!==a)throw new RangeError(`Unexpected leap month suffix: ${a}`);const e=ei(i,void 0!==a),n=`${i}${a||""}`,r=this.getMonthList(o,t)[n];if(void 0===r)throw new RangeError(`Unmatched month ${n} in Chinese year ${o}`);return i=r.monthIndex,{year:o,month:i,day:s,monthCode:e}}if(this.validateCalendarDate(e),void 0===i){const e=this.getMonthList(o,t);let r=c.replace(/^M|L$/g,(e=>"L"===e?"bis":""));"0"===r[0]&&(r=r.slice(1));let a=e[r];if(i=a&&a.monthIndex,void 0===i&&c.endsWith("L")&&"M13L"!=c&&"constrain"===n){const t=+c.replace(/^M0?|L$/g,"");a=e[t],a&&(i=a.monthIndex,c=ei(t));}if(void 0===i)throw new RangeError(`Unmatched month ${c} in Chinese year ${o}`)}else if(void 0===c){const e=this.getMonthList(o,t),r=Object.entries(e),a=r.length;"reject"===n?(Nr(i,1,a),Nr(s,1,this.maximumMonthLength())):(i=jr(i,1,a),s=jr(s,1,this.maximumMonthLength()));const d=r.find((e=>e[1].monthIndex===i));if(void 0===d)throw new RangeError(`Invalid month ${i} in Chinese year ${o}`);c=ei(+d[0].replace("bis",""),-1!==d[0].indexOf("bis"));}else {const e=this.getMonthList(o,t);let n=c.replace(/^M|L$/g,(e=>"L"===e?"bis":""));"0"===n[0]&&(n=n.slice(1));const r=e[n];if(!r)throw new RangeError(`Unmatched monthCode ${c} in Chinese year ${o}`);if(i!==r.monthIndex)throw new RangeError(`monthCode ${c} doesn't correspond to month ${i} in Chinese year ${o}`)}return {...e,year:o,month:i,monthCode:c,day:s}}}class ChineseHelper extends ChineseBaseHelper{constructor(){super(...arguments),this.id="chinese";}}class DangiHelper extends ChineseBaseHelper{constructor(){super(...arguments),this.id="dangi";}}class NonIsoCalendar{constructor(e){this.helper=e;}extraFields(e){return this.helper.hasEra&&e.includes("year")?["era","eraYear"]:[]}resolveFields(e){if("lunisolar"!==this.helper.calendarType){const t=new OneObjectCache;ti(e,void 0,this.helper.monthsInYear({year:e.year??1972},t));}}dateToISO(e,t){const n=new OneObjectCache,r=this.helper.calendarToIsoDate(e,t,n);return n.setObject(r),r}monthDayToISOReferenceDate(e,t){const n=new OneObjectCache,r=this.helper.monthDayFromFields(e,t,n);return n.setObject(r),r}fieldKeysToIgnore(e){const t=new Set;for(let n=0;n<e.length;n++){const r=e[n];switch(t.add(r),r){case "era":t.add("eraYear"),t.add("year");break;case "eraYear":t.add("era"),t.add("year");break;case "year":t.add("era"),t.add("eraYear");break;case "month":t.add("monthCode"),this.helper.erasBeginMidYear&&(t.add("era"),t.add("eraYear"));break;case "monthCode":t.add("month"),this.helper.erasBeginMidYear&&(t.add("era"),t.add("eraYear"));break;case "day":this.helper.erasBeginMidYear&&(t.add("era"),t.add("eraYear"));}}return Go(t)}dateAdd(e,{years:t,months:n,weeks:r,days:o},i){const a=OneObjectCache.getCacheForObject(e),s=this.helper.isoToCalendarDate(e,a),c=this.helper.addCalendar(s,{years:t,months:n,weeks:r,days:o},i,a),d=this.helper.calendarToIsoDate(c,"constrain",a);return OneObjectCache.getCacheForObject(d)||new OneObjectCache(a).setObject(d),d}dateUntil(e,t,n){const r=OneObjectCache.getCacheForObject(e),o=OneObjectCache.getCacheForObject(t),i=this.helper.isoToCalendarDate(e,r),a=this.helper.isoToCalendarDate(t,o);return this.helper.untilCalendar(i,a,n,r)}isoToDate(e,t){const n=OneObjectCache.getCacheForObject(e),r=this.helper.isoToCalendarDate(e,n);if(t.dayOfWeek&&(r.dayOfWeek=Xo.iso8601.isoToDate(e,{dayOfWeek:true}).dayOfWeek),t.dayOfYear){const e=this.helper.startOfCalendarYear(r),t=this.helper.calendarDaysUntil(e,r,n);r.dayOfYear=t+1;}if(t.weekOfYear&&(r.weekOfYear=Ko(this.helper.id,e)),r.daysInWeek=7,t.daysInMonth&&(r.daysInMonth=this.helper.daysInMonth(r,n)),t.daysInYear){const e=this.helper.startOfCalendarYear(r),t=this.helper.addCalendar(e,{years:1},"constrain",n);r.daysInYear=this.helper.calendarDaysUntil(e,t,n);}return t.monthsInYear&&(r.monthsInYear=this.helper.monthsInYear(r,n)),t.inLeapYear&&(r.inLeapYear=this.helper.inLeapYear(r,n)),r}getFirstDayOfWeek(){return this.helper.getFirstDayOfWeek()}getMinimalDaysInFirstWeek(){return this.helper.getMinimalDaysInFirstWeek()}}for(const e of [HebrewHelper,PersianHelper,EthiopicHelper,EthioaaHelper,CopticHelper,ChineseHelper,DangiHelper,RocHelper,IndianHelper,BuddhistHelper,GregoryHelper,JapaneseHelper,IslamicHelper,IslamicUmalquraHelper,IslamicTblaHelper,IslamicCivilHelper,IslamicRgsaHelper,IslamicCcHelper]){const t=new e;Xo[t.id]=new NonIsoCalendar(t);}se("calendarImpl",(function(e){return Xo[e]}));const ai=Intl.DateTimeFormat;function si(e,t){let n=re(e,t);return "function"==typeof n&&(n=new ai(re(e,G),n(re(e,K))),function(e,t,n){const r=Q(e);if(void 0===r)throw new TypeError("Missing slots for the given container");if(void 0===r[t])throw new TypeError(`tried to reset ${t} which was not set`);r[t]=n;}(e,t,n)),n}function ci(e){return ne(e,q)}class DateTimeFormatImpl{constructor(e=void 0,t=void 0){!function(e,t,n){const r=void 0!==n;let o;if(r){const e=["localeMatcher","calendar","numberingSystem","hour12","hourCycle","timeZone","weekday","era","year","month","day","dayPeriod","hour","minute","second","fractionalSecondDigits","timeZoneName","formatMatcher","dateStyle","timeStyle"];o=function(e){if(null==e)throw new TypeError(`Expected object not ${e}`);return Object(e)}(n);const t=Object.create(null);for(let n=0;n<e.length;n++){const r=e[n];Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r]);}o=t;}else o=Object.create(null);const i=new ai(t,o),a=i.resolvedOptions();if(te(e),r){const t=Object.assign(Object.create(null),a);for(const e in t)Object.prototype.hasOwnProperty.call(o,e)||delete t[e];t.hour12=o.hour12,t.hourCycle=o.hourCycle,oe(e,K,t);}else oe(e,K,o);oe(e,G,a.locale),oe(e,q,i),oe(e,W,a.timeZone),oe(e,J,a.calendar),oe(e,B,vi),oe(e,Z,gi),oe(e,F,wi),oe(e,H,pi),oe(e,z,bi),oe(e,A,Di);const s=r?o.timeZone:void 0;if(void 0===s)oe(e,_,a.timeZone);else {const t=We(s);if(t.startsWith("−"))throw new RangeError("Unicode minus (U+2212) is not supported in time zone offsets");oe(e,_,Bn(t));}}(this,e,t);}get format(){vt(this,ci);const e=ui.bind(this);return Object.defineProperties(e,{length:{value:1,enumerable:false,writable:false,configurable:true},name:{value:"",enumerable:false,writable:false,configurable:true}}),e}formatRange(e,t){return vt(this,ci),mi.call(this,e,t)}formatToParts(e,...t){return vt(this,ci),li.call(this,e,...t)}formatRangeToParts(e,t){return vt(this,ci),fi.call(this,e,t)}resolvedOptions(){return vt(this,ci),hi.call(this)}}"formatToParts"in ai.prototype||delete DateTimeFormatImpl.prototype.formatToParts,"formatRangeToParts"in ai.prototype||delete DateTimeFormatImpl.prototype.formatRangeToParts;const di=function(e=void 0,t=void 0){return new DateTimeFormatImpl(e,t)};function hi(){const e=re(this,q).resolvedOptions();return e.timeZone=re(this,_),e}function ui(e,...t){let n,r,o=$i(e,this);return o.formatter?(n=o.formatter,r=[No(o.epochNs,"floor")]):(n=re(this,q),r=[e,...t]),n.format(...r)}function li(e,...t){let n,r,o=$i(e,this);return o.formatter?(n=o.formatter,r=[No(o.epochNs,"floor")]):(n=re(this,q),r=[e,...t]),n.formatToParts(...r)}function mi(e,t){if(void 0===e||void 0===t)throw new TypeError("Intl.DateTimeFormat.formatRange requires two values");const n=Ci(e),r=Ci(t);let o,i=[n,r];if(Ii(n)!==Ii(r))throw new TypeError("Intl.DateTimeFormat.formatRange accepts two values of the same type");if(Ii(n)){if(!Oi(n,r))throw new TypeError("Intl.DateTimeFormat.formatRange accepts two values of the same type");const{epochNs:e,formatter:t}=$i(n,this),{epochNs:a}=$i(r,this);t&&(o=t,i=[No(e,"floor"),No(a,"floor")]);}return o||(o=re(this,q)),o.formatRange(...i)}function fi(e,t){if(void 0===e||void 0===t)throw new TypeError("Intl.DateTimeFormat.formatRange requires two values");const n=Ci(e),r=Ci(t);let o,i=[n,r];if(Ii(n)!==Ii(r))throw new TypeError("Intl.DateTimeFormat.formatRangeToParts accepts two values of the same type");if(Ii(n)){if(!Oi(n,r))throw new TypeError("Intl.DateTimeFormat.formatRangeToParts accepts two values of the same type");const{epochNs:e,formatter:t}=$i(n,this),{epochNs:a}=$i(r,this);t&&(o=t,i=[No(e,"floor"),No(a,"floor")]);}return o||(o=re(this,q)),o.formatRangeToParts(...i)}function yi(e={},t={}){const n=Object.assign({},e),r=["year","month","day","hour","minute","second","weekday","dayPeriod","timeZoneName","dateStyle","timeStyle"];for(let e=0;e<r.length;e++){const o=r[e];n[o]=o in t?t[o]:n[o],false!==n[o]&&void 0!==n[o]||delete n[o];}return n}function pi(e){const t=yi(e,{year:false,month:false,day:false,weekday:false,timeZoneName:false,dateStyle:false});if("long"!==t.timeStyle&&"full"!==t.timeStyle||(delete t.timeStyle,Object.assign(t,{hour:"numeric",minute:"2-digit",second:"2-digit"})),!Mi(t)){if(Ei(e))throw new TypeError(`cannot format Temporal.PlainTime with options [${Object.keys(e)}]`);Object.assign(t,{hour:"numeric",minute:"numeric",second:"numeric"});}return t}function gi(e){const t={short:{year:"2-digit",month:"numeric"},medium:{year:"numeric",month:"short"},long:{year:"numeric",month:"long"},full:{year:"numeric",month:"long"}},n=yi(e,{day:false,hour:false,minute:false,second:false,weekday:false,dayPeriod:false,timeZoneName:false,timeStyle:false});if("dateStyle"in n&&n.dateStyle){const e=n.dateStyle;delete n.dateStyle,Object.assign(n,t[e]);}if(!("year"in n||"month"in n||"era"in n)){if(Ei(e))throw new TypeError(`cannot format PlainYearMonth with options [${Object.keys(e)}]`);Object.assign(n,{year:"numeric",month:"numeric"});}return n}function wi(e){const t={short:{month:"numeric",day:"numeric"},medium:{month:"short",day:"numeric"},long:{month:"long",day:"numeric"},full:{month:"long",day:"numeric"}},n=yi(e,{year:false,hour:false,minute:false,second:false,weekday:false,dayPeriod:false,timeZoneName:false,timeStyle:false});if("dateStyle"in n&&n.dateStyle){const e=n.dateStyle;delete n.dateStyle,Object.assign(n,t[e]);}if(!("month"in n)&&!("day"in n)){if(Ei(e))throw new TypeError(`cannot format PlainMonthDay with options [${Object.keys(e)}]`);Object.assign(n,{month:"numeric",day:"numeric"});}return n}function vi(e){const t=yi(e,{hour:false,minute:false,second:false,dayPeriod:false,timeZoneName:false,timeStyle:false});if(!Ti(t)){if(Ei(e))throw new TypeError(`cannot format PlainDate with options [${Object.keys(e)}]`);Object.assign(t,{year:"numeric",month:"numeric",day:"numeric"});}return t}function bi(e){const t=yi(e,{timeZoneName:false});if(("long"===t.timeStyle||"full"===t.timeStyle)&&(delete t.timeStyle,Object.assign(t,{hour:"numeric",minute:"2-digit",second:"2-digit"}),t.dateStyle)){const e={short:{year:"numeric",month:"numeric",day:"numeric"},medium:{year:"numeric",month:"short",day:"numeric"},long:{year:"numeric",month:"long",day:"numeric"},full:{year:"numeric",month:"long",day:"numeric",weekday:"long"}};Object.assign(t,e[t.dateStyle]),delete t.dateStyle;}if(!Mi(t)&&!Ti(t)){if(Ei(e))throw new TypeError(`cannot format PlainDateTime with options [${Object.keys(e)}]`);Object.assign(t,{year:"numeric",month:"numeric",day:"numeric",hour:"numeric",minute:"numeric",second:"numeric"});}return t}function Di(e){let t=e;return Mi(t)||Ti(t)||(t=Object.assign({},t,{year:"numeric",month:"numeric",day:"numeric",hour:"numeric",minute:"numeric",second:"numeric"})),t}function Ti(e){return "year"in e||"month"in e||"day"in e||"weekday"in e||"dateStyle"in e||"era"in e}function Mi(e){return "hour"in e||"minute"in e||"second"in e||"timeStyle"in e||"dayPeriod"in e||"fractionalSecondDigits"in e}function Ei(e){return Ti(e)||Mi(e)||"dateStyle"in e||"timeStyle"in e||"timeZoneName"in e}function Ii(e){return mt(e)||ft(e)||yt(e)||wt(e)||pt(e)||gt(e)||ut(e)}function Ci(e){return Ii(e)?e:qe(e)}function Oi(e,t){return !(!Ii(e)||!Ii(t)||ft(e)&&!ft(t)||mt(e)&&!mt(t)||yt(e)&&!yt(t)||wt(e)&&!wt(t)||pt(e)&&!pt(t)||gt(e)&&!gt(t)||ut(e)&&!ut(t))}function $i(e,t){if(ft(e)){const n={isoDate:{year:1970,month:1,day:1},time:re(e,M)};return {epochNs:An(re(t,W),n,"compatible"),formatter:si(t,H)}}if(pt(e)){const n=re(e,E),r=re(t,J);if(n!==r)throw new RangeError(`cannot format PlainYearMonth with calendar ${n} in locale with calendar ${r}`);const o=xt(re(e,D),{deltaDays:0,hour:12,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0});return {epochNs:An(re(t,W),o,"compatible"),formatter:si(t,Z)}}if(gt(e)){const n=re(e,E),r=re(t,J);if(n!==r)throw new RangeError(`cannot format PlainMonthDay with calendar ${n} in locale with calendar ${r}`);const o=xt(re(e,D),{deltaDays:0,hour:12,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0});return {epochNs:An(re(t,W),o,"compatible"),formatter:si(t,F)}}if(mt(e)){const n=re(e,E),r=re(t,J);if("iso8601"!==n&&n!==r)throw new RangeError(`cannot format PlainDate with calendar ${n} in locale with calendar ${r}`);const o=xt(re(e,D),{deltaDays:0,hour:12,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0});return {epochNs:An(re(t,W),o,"compatible"),formatter:si(t,B)}}if(yt(e)){const n=re(e,E),r=re(t,J);if("iso8601"!==n&&n!==r)throw new RangeError(`cannot format PlainDateTime with calendar ${n} in locale with calendar ${r}`);const o=re(e,T);return {epochNs:An(re(t,W),o,"compatible"),formatter:si(t,z)}}if(wt(e))throw new TypeError("Temporal.ZonedDateTime not supported in DateTimeFormat methods. Use toLocaleString() instead.");return ut(e)?{epochNs:re(e,b),formatter:si(t,A)}:{}}function Yi(e){const t=Object.create(null);return t.years=re(e,Y),t.months=re(e,R),t.weeks=re(e,S),t.days=re(e,j),t.hours=re(e,k),t.minutes=re(e,N),t.seconds=re(e,x),t.milliseconds=re(e,L),t.microseconds=re(e,P),t.nanoseconds=re(e,U),t}DateTimeFormatImpl.prototype.constructor=di,Object.defineProperty(di,"prototype",{value:DateTimeFormatImpl.prototype,writable:false,enumerable:false,configurable:false}),di.supportedLocalesOf=ai.supportedLocalesOf,ae(di,"Intl.DateTimeFormat");const{format:Ri,formatToParts:Si}=Intl.DurationFormat?.prototype??Object.create(null);function ji(e){Intl.DurationFormat.prototype.resolvedOptions.call(this);const t=Yi(sn(e));return Ri.call(this,t)}Intl.DurationFormat?.prototype&&(Intl.DurationFormat.prototype.format=ji,Intl.DurationFormat.prototype.formatToParts=function(e){Intl.DurationFormat.prototype.resolvedOptions.call(this);const t=Yi(sn(e));return Si.call(this,t)});class Instant{constructor(e){if(arguments.length<1)throw new TypeError("missing argument: epochNanoseconds is required");In(this,Lo(e));}get epochMilliseconds(){return vt(this,ut),No(re(this,b),"floor")}get epochNanoseconds(){return vt(this,ut),ko(e.BigInt(re(this,b)))}add(e){return vt(this,ut),wo("add",this,e)}subtract(e){return vt(this,ut),wo("subtract",this,e)}until(e,t=void 0){return vt(this,ut),so("until",this,e,t)}since(e,t=void 0){return vt(this,ut),so("since",this,e,t)}round(e){if(vt(this,ut),void 0===e)throw new TypeError("options parameter is required");const t="string"==typeof e?Fo("smallestUnit",e):Zo(e),n=Ft(t),r=Ut(t,"halfExpand"),o=Wt(t,"smallestUnit","time",qt);return Ht(n,{hour:24,minute:1440,second:86400,millisecond:864e5,microsecond:864e8,nanosecond:864e11}[o],true),Cn(Io(re(this,b),n,o,r))}equals(t){vt(this,ut);const n=cn(t),r=re(this,b),o=re(n,b);return e.equal(e.BigInt(r),e.BigInt(o))}toString(e=void 0){vt(this,ut);const t=Zo(e),n=zt(t),r=Ut(t,"trunc"),o=Wt(t,"smallestUnit","time",void 0);if("hour"===o)throw new RangeError('smallestUnit must be a time unit other than "hour"');let i=t.timeZone;void 0!==i&&(i=Bn(i));const{precision:a,unit:s,increment:c}=At(o,n);return Xn(Cn(Io(re(this,b),c,s,r)),i,a)}toJSON(){return vt(this,ut),Xn(this,void 0,"auto")}toLocaleString(e=void 0,t=void 0){return vt(this,ut),new di(e,t).format(this)}valueOf(){qo("Instant");}toZonedDateTimeISO(e){vt(this,ut);const t=Bn(e);return $n(re(this,b),t,"iso8601")}static fromEpochMilliseconds(e){return Cn(xo(qe(e)))}static fromEpochNanoseconds(e){return Cn(Lo(e))}static from(e){return cn(e)}static compare(t,n){const r=cn(t),o=cn(n),i=re(r,b),a=re(o,b);return e.lessThan(i,a)?-1:e.greaterThan(i,a)?1:0}}ae(Instant,"Temporal.Instant");class PlainDate{constructor(e,t,n,r="iso8601"){const o=_e(e),i=_e(t),a=_e(n),s=zo(void 0===r?"iso8601":Ve(r));xr(o,i,a),yn(this,{year:o,month:i,day:a},s);}get calendarId(){return vt(this,mt),re(this,E)}get era(){return Ni(this,"era")}get eraYear(){return Ni(this,"eraYear")}get year(){return Ni(this,"year")}get month(){return Ni(this,"month")}get monthCode(){return Ni(this,"monthCode")}get day(){return Ni(this,"day")}get dayOfWeek(){return Ni(this,"dayOfWeek")}get dayOfYear(){return Ni(this,"dayOfYear")}get weekOfYear(){return Ni(this,"weekOfYear")?.week}get yearOfWeek(){return Ni(this,"weekOfYear")?.year}get daysInWeek(){return Ni(this,"daysInWeek")}get daysInMonth(){return Ni(this,"daysInMonth")}get daysInYear(){return Ni(this,"daysInYear")}get monthsInYear(){return Ni(this,"monthsInYear")}get inLeapYear(){return Ni(this,"inLeapYear")}with(e,t=void 0){if(vt(this,mt),!Ae(e))throw new TypeError("invalid argument");bt(e);const n=re(this,E);let r=en(n,re(this,D));return r=Rn(n,r,tn(n,e,["year","month","monthCode","day"],[],"partial")),pn(Ln(n,r,Lt(Zo(t))),n)}withCalendar(e){vt(this,mt);const t=kn(e);return pn(re(this,D),t)}add(e,t=void 0){return vt(this,mt),vo("add",this,e,t)}subtract(e,t=void 0){return vt(this,mt),vo("subtract",this,e,t)}until(e,t=void 0){return vt(this,mt),co("until",this,e,t)}since(e,t=void 0){return vt(this,mt),co("since",this,e,t)}equals(e){vt(this,mt);const t=rn(e);return 0===Ro(re(this,D),re(t,D))&&xn(re(this,E),re(t,E))}toString(e=void 0){return vt(this,mt),er(this,Zt(Zo(e)))}toJSON(){return vt(this,mt),er(this)}toLocaleString(e=void 0,t=void 0){return vt(this,mt),new di(e,t).format(this)}valueOf(){qo("PlainDate");}toPlainDateTime(e=void 0){vt(this,mt);const t=un(e);return wn(xt(re(this,D),t),re(this,E))}toZonedDateTime(e){let t,n;if(vt(this,mt),Ae(e)){const r=e.timeZone;void 0===r?t=Bn(e):(t=Bn(r),n=e.plainTime);}else t=Bn(e);const r=re(this,D);let o;return void 0===n?o=_n(t,r):(n=hn(n),o=An(t,xt(r,re(n,M)),"compatible")),$n(o,t,re(this,E))}toPlainYearMonth(){vt(this,mt);const e=re(this,E);return En(Pn(e,en(e,re(this,D)),"constrain"),e)}toPlainMonthDay(){vt(this,mt);const e=re(this,E);return bn(Un(e,en(e,re(this,D)),"constrain"),e)}static from(e,t=void 0){return rn(e,t)}static compare(e,t){const n=rn(e),r=rn(t);return Ro(re(n,D),re(r,D))}}function Ni(e,t){vt(e,mt);const n=re(e,D);return Qt(e).isoToDate(n,{[t]:true})[t]}ae(PlainDate,"Temporal.PlainDate");class PlainDateTime{constructor(e,t,n,r=0,o=0,i=0,a=0,s=0,c=0,d="iso8601"){const h=_e(e),u=_e(t),l=_e(n),m=void 0===r?0:_e(r),f=void 0===o?0:_e(o),y=void 0===i?0:_e(i),p=void 0===a?0:_e(a),g=void 0===s?0:_e(s),w=void 0===c?0:_e(c),v=zo(void 0===d?"iso8601":Ve(d));Ur(h,u,l,m,f,y,p,g,w),gn(this,{isoDate:{year:h,month:u,day:l},time:{hour:m,minute:f,second:y,millisecond:p,microsecond:g,nanosecond:w}},v);}get calendarId(){return vt(this,yt),re(this,E)}get year(){return xi(this,"year")}get month(){return xi(this,"month")}get monthCode(){return xi(this,"monthCode")}get day(){return xi(this,"day")}get hour(){return Li(this,"hour")}get minute(){return Li(this,"minute")}get second(){return Li(this,"second")}get millisecond(){return Li(this,"millisecond")}get microsecond(){return Li(this,"microsecond")}get nanosecond(){return Li(this,"nanosecond")}get era(){return xi(this,"era")}get eraYear(){return xi(this,"eraYear")}get dayOfWeek(){return xi(this,"dayOfWeek")}get dayOfYear(){return xi(this,"dayOfYear")}get weekOfYear(){return xi(this,"weekOfYear")?.week}get yearOfWeek(){return xi(this,"weekOfYear")?.year}get daysInWeek(){return xi(this,"daysInWeek")}get daysInYear(){return xi(this,"daysInYear")}get daysInMonth(){return xi(this,"daysInMonth")}get monthsInYear(){return xi(this,"monthsInYear")}get inLeapYear(){return xi(this,"inLeapYear")}with(e,t=void 0){if(vt(this,yt),!Ae(e))throw new TypeError("invalid argument");bt(e);const n=re(this,E),r=re(this,T);let o={...en(n,r.isoDate),...r.time};return o=Rn(n,o,tn(n,e,["year","month","monthCode","day"],["hour","minute","second","millisecond","microsecond","nanosecond"],"partial")),wn(on(n,o,Lt(Zo(t))),n)}withPlainTime(e=void 0){vt(this,yt);const t=un(e);return wn(xt(re(this,T).isoDate,t),re(this,E))}withCalendar(e){vt(this,yt);const t=kn(e);return wn(re(this,T),t)}add(e,t=void 0){return vt(this,yt),bo("add",this,e,t)}subtract(e,t=void 0){return vt(this,yt),bo("subtract",this,e,t)}until(e,t=void 0){return vt(this,yt),ho("until",this,e,t)}since(e,t=void 0){return vt(this,yt),ho("since",this,e,t)}round(e){if(vt(this,yt),void 0===e)throw new TypeError("options parameter is required");const t="string"==typeof e?Fo("smallestUnit",e):Zo(e),n=Ft(t),r=Ut(t,"halfExpand"),o=Wt(t,"smallestUnit","time",qt,["day"]),i={day:1,hour:24,minute:60,second:60,millisecond:1e3,microsecond:1e3,nanosecond:1e3}[o];Ht(n,i,1===i);const a=re(this,T);return wn(1===n&&"nanosecond"===o?a:Co(a,n,o,r),re(this,E))}equals(e){vt(this,yt);const t=an(e);return 0===jo(re(this,T),re(t,T))&&xn(re(this,E),re(t,E))}toString(e=void 0){vt(this,yt);const t=Zo(e),n=Zt(t),r=zt(t),o=Ut(t,"trunc"),i=Wt(t,"smallestUnit","time",void 0);if("hour"===i)throw new RangeError('smallestUnit must be a time unit other than "hour"');const{precision:a,unit:s,increment:c}=At(i,r),d=Co(re(this,T),c,s,o);return Br(d),nr(d,re(this,E),a,n)}toJSON(){return vt(this,yt),nr(re(this,T),re(this,E),"auto")}toLocaleString(e=void 0,t=void 0){return vt(this,yt),new di(e,t).format(this)}valueOf(){qo("PlainDateTime");}toZonedDateTime(e,t=void 0){vt(this,yt);const n=Bn(e),r=Pt(Zo(t));return $n(An(n,re(this,T),r),n,re(this,E))}toPlainDate(){return vt(this,yt),pn(re(this,T).isoDate,re(this,E))}toPlainTime(){return vt(this,yt),Tn(re(this,T).time)}static from(e,t=void 0){return an(e,t)}static compare(e,t){const n=an(e),r=an(t);return jo(re(n,T),re(r,T))}}function xi(e,t){vt(e,yt);const n=re(e,T).isoDate;return Qt(e).isoToDate(n,{[t]:true})[t]}function Li(e,t){return vt(e,yt),re(e,T).time[t]}ae(PlainDateTime,"Temporal.PlainDateTime");class Duration{constructor(e=0,t=0,n=0,r=0,o=0,i=0,a=0,s=0,c=0,d=0){const h=void 0===e?0:Ge(e),u=void 0===t?0:Ge(t),l=void 0===n?0:Ge(n),m=void 0===r?0:Ge(r),f=void 0===o?0:Ge(o),y=void 0===i?0:Ge(i),p=void 0===a?0:Ge(a),g=void 0===s?0:Ge(s),w=void 0===c?0:Ge(c),v=void 0===d?0:Ge(d);zr(h,u,l,m,f,y,p,g,w,v),te(this),oe(this,Y,h),oe(this,R,u),oe(this,S,l),oe(this,j,m),oe(this,k,f),oe(this,N,y),oe(this,x,p),oe(this,L,g),oe(this,P,w),oe(this,U,v);}get years(){return vt(this,lt),re(this,Y)}get months(){return vt(this,lt),re(this,R)}get weeks(){return vt(this,lt),re(this,S)}get days(){return vt(this,lt),re(this,j)}get hours(){return vt(this,lt),re(this,k)}get minutes(){return vt(this,lt),re(this,N)}get seconds(){return vt(this,lt),re(this,x)}get milliseconds(){return vt(this,lt),re(this,L)}get microseconds(){return vt(this,lt),re(this,P)}get nanoseconds(){return vt(this,lt),re(this,U)}get sign(){return vt(this,lt),Mr(this)}get blank(){return vt(this,lt),0===Mr(this)}with(e){vt(this,lt);const t=kt(e),{years:n=re(this,Y),months:r=re(this,R),weeks:o=re(this,S),days:i=re(this,j),hours:a=re(this,k),minutes:s=re(this,N),seconds:c=re(this,x),milliseconds:d=re(this,L),microseconds:h=re(this,P),nanoseconds:u=re(this,U)}=t;return new Duration(n,r,o,i,a,s,c,d,h,u)}negated(){return vt(this,lt),Sr(this)}abs(){return vt(this,lt),new Duration(Math.abs(re(this,Y)),Math.abs(re(this,R)),Math.abs(re(this,S)),Math.abs(re(this,j)),Math.abs(re(this,k)),Math.abs(re(this,N)),Math.abs(re(this,x)),Math.abs(re(this,L)),Math.abs(re(this,P)),Math.abs(re(this,U)))}add(e){return vt(this,lt),go("add",this,e)}subtract(e){return vt(this,lt),go("subtract",this,e)}round(e){if(vt(this,lt),void 0===e)throw new TypeError("options parameter is required");const t=Jt(this),n="string"==typeof e?Fo("smallestUnit",e):Zo(e);let r=Wt(n,"largestUnit","datetime",void 0,["auto"]),{plainRelativeTo:o,zonedRelativeTo:i}=_t(n);const a=Ft(n),s=Ut(n,"halfExpand");let c=Wt(n,"smallestUnit","datetime",void 0),d=true;c||(d=false,c="nanosecond");const h=Gt(t,c);let u=true;if(r||(u=false,r=h),"auto"===r&&(r=h),!d&&!u)throw new RangeError("at least one of smallestUnit or largestUnit is required");if(Gt(r,c)!==r)throw new RangeError(`largestUnit ${r} cannot be smaller than smallestUnit ${c}`);const l={hour:24,minute:60,second:60,millisecond:1e3,microsecond:1e3,nanosecond:1e3}[c];if(void 0!==l&&Ht(a,l,false),a>1&&"date"===Vt(c)&&r!==c)throw new RangeError("For calendar units with roundingIncrement > 1, use largestUnit = smallestUnit");if(i){let e=Ar(this);const t=re(i,$),n=re(i,E),o=re(i,b);return e=io(o,po(o,t,n,e),t,n,r,a,c,s),"date"===Vt(r)&&(r="hour"),_r(e,r)}if(o){let e=qr(this);const t=fo({hour:0,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0},e.time),n=re(o,D),i=re(o,E),d=Sn(i,n,Nt(e.date,t.deltaDays),"constrain");return e=oo(xt(n,{deltaDays:0,hour:0,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0}),xt(d,t),i,r,a,c,s),_r(e,r)}if(Kt(t))throw new RangeError(`a starting point is required for ${t}s balancing`);if(Kt(r))throw new RangeError(`a starting point is required for ${r}s balancing`);let m=qr(this);if("day"===c){const{quotient:e,remainder:t}=m.time.divmod(Se);let n=m.date.days+e+Yo(t,"day");n=Eo(n,a,s),m=Jr({years:0,months:0,weeks:0,days:n},TimeDuration.ZERO);}else m=Jr({years:0,months:0,weeks:0,days:0},$o(m.time,a,c,s));return _r(m,r)}total(t){if(vt(this,lt),void 0===t)throw new TypeError("options argument is required");const n="string"==typeof t?Fo("unit",t):Zo(t);let{plainRelativeTo:r,zonedRelativeTo:o}=_t(n);const i=Wt(n,"unit","datetime",qt);if(o){const e=Ar(this),t=re(o,$),n=re(o,E),r=re(o,b);return function(e,t,n,r,o){return "time"===Vt(o)?Yo(TimeDuration.fromEpochNsDiff(t,e),o):ro(eo(e,t,n,r,o),t,zn(n,e),n,r,o)}(r,po(r,t,n,e),t,n,i)}if(r){const t=qr(this);let n=fo({hour:0,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0},t.time);const o=re(r,D),a=re(r,E),s=Sn(a,o,Nt(t.date,n.deltaDays),"constrain");return function(t,n,r,o){if(0==jo(t,n))return 0;Br(t),Br(n);const i=Qr(t,n,r,o);return "nanosecond"===o?e.toNumber(i.time.totalNs):ro(i,pr(n),t,null,r,o)}(xt(o,{deltaDays:0,hour:0,minute:0,second:0,millisecond:0,microsecond:0,nanosecond:0}),xt(s,n),a,i)}const a=Jt(this);if(Kt(a))throw new RangeError(`a starting point is required for ${a}s total`);if(Kt(i))throw new RangeError(`a starting point is required for ${i}s total`);return Yo(qr(this).time,i)}toString(e=void 0){vt(this,lt);const t=Zo(e),n=zt(t),r=Ut(t,"trunc"),o=Wt(t,"smallestUnit","time",void 0);if("hour"===o||"minute"===o)throw new RangeError('smallestUnit must be a time unit other than "hours" or "minutes"');const{precision:i,unit:a,increment:s}=At(o,n);if("nanosecond"===a&&1===s)return Qn(this,i);const c=Jt(this);let d=Ar(this);const h=$o(d.time,s,a,r);return d=Jr(d.date,h),Qn(_r(d,Gt(c,"second")),i)}toJSON(){return vt(this,lt),Qn(this,"auto")}toLocaleString(e=void 0,t=void 0){if(vt(this,lt),"function"==typeof Intl.DurationFormat){const n=new Intl.DurationFormat(e,t);return ji.call(n,this)}return console.warn("Temporal.Duration.prototype.toLocaleString() requires Intl.DurationFormat."),Qn(this,"auto")}valueOf(){qo("Duration");}static from(e){return sn(e)}static compare(t,n,r=void 0){const o=sn(t),i=sn(n),a=Zo(r),{plainRelativeTo:s,zonedRelativeTo:c}=_t(a);if(re(o,Y)===re(i,Y)&&re(o,R)===re(i,R)&&re(o,S)===re(i,S)&&re(o,j)===re(i,j)&&re(o,k)===re(i,k)&&re(o,N)===re(i,N)&&re(o,x)===re(i,x)&&re(o,L)===re(i,L)&&re(o,P)===re(i,P)&&re(o,U)===re(i,U))return 0;const d=Jt(o),h=Jt(i),u=Ar(o),l=Ar(i);if(c&&("date"===Vt(d)||"date"===Vt(h))){const t=re(c,$),n=re(c,E),r=re(c,b),o=po(r,t,n,u),i=po(r,t,n,l);return Bo(e.toNumber(e.subtract(o,i)))}let m=u.date.days,f=l.date.days;if(Kt(d)||Kt(h)){if(!s)throw new RangeError("A starting point is required for years, months, or weeks comparison");m=Rr(u.date,s),f=Rr(l.date,s);}const y=u.time.add24HourDays(m),p=l.time.add24HourDays(f);return y.cmp(p)}}ae(Duration,"Temporal.Duration");class PlainMonthDay{constructor(e,t,n="iso8601",r=1972){const o=_e(e),i=_e(t),a=zo(void 0===n?"iso8601":Ve(n)),s=_e(r);xr(s,o,i),vn(this,{year:s,month:o,day:i},a);}get monthCode(){return Pi(this,"monthCode")}get day(){return Pi(this,"day")}get calendarId(){return vt(this,gt),re(this,E)}with(e,t=void 0){if(vt(this,gt),!Ae(e))throw new TypeError("invalid argument");bt(e);const n=re(this,E);let r=en(n,re(this,D),"month-day");return r=Rn(n,r,tn(n,e,["year","month","monthCode","day"],[],"partial")),bn(Un(n,r,Lt(Zo(t))),n)}equals(e){vt(this,gt);const t=dn(e);return 0===Ro(re(this,D),re(t,D))&&xn(re(this,E),re(t,E))}toString(e=void 0){return vt(this,gt),rr(this,Zt(Zo(e)))}toJSON(){return vt(this,gt),rr(this)}toLocaleString(e=void 0,t=void 0){return vt(this,gt),new di(e,t).format(this)}valueOf(){qo("PlainMonthDay");}toPlainDate(e){if(vt(this,gt),!Ae(e))throw new TypeError("argument should be an object");const t=re(this,E);return pn(Ln(t,Rn(t,en(t,re(this,D),"month-day"),tn(t,e,["year"],[],[])),"constrain"),t)}static from(e,t=void 0){return dn(e,t)}}function Pi(e,t){vt(e,gt);const n=re(e,D);return Qt(e).isoToDate(n,{[t]:true})[t]}function Ui(e){return zn(e,Po())}ae(PlainMonthDay,"Temporal.PlainMonthDay");const Bi={instant:()=>Cn(Po()),plainDateTimeISO:(e=Uo())=>wn(Ui(Bn(e)),"iso8601"),plainDateISO:(e=Uo())=>pn(Ui(Bn(e)).isoDate,"iso8601"),plainTimeISO:(e=Uo())=>Tn(Ui(Bn(e)).time),timeZoneId:()=>Uo(),zonedDateTimeISO:(e=Uo())=>{const t=Bn(e);return $n(Po(),t,"iso8601")},[Symbol.toStringTag]:"Temporal.Now"};Object.defineProperty(Bi,Symbol.toStringTag,{value:"Temporal.Now",writable:false,enumerable:false,configurable:true});class PlainTime{constructor(e=0,t=0,n=0,r=0,o=0,i=0){const a=void 0===e?0:_e(e),s=void 0===t?0:_e(t),c=void 0===n?0:_e(n),d=void 0===r?0:_e(r),h=void 0===o?0:_e(o),u=void 0===i?0:_e(i);Pr(a,s,c,d,h,u),Dn(this,{hour:a,minute:s,second:c,millisecond:d,microsecond:h,nanosecond:u});}get hour(){return vt(this,ft),re(this,M).hour}get minute(){return vt(this,ft),re(this,M).minute}get second(){return vt(this,ft),re(this,M).second}get millisecond(){return vt(this,ft),re(this,M).millisecond}get microsecond(){return vt(this,ft),re(this,M).microsecond}get nanosecond(){return vt(this,ft),re(this,M).nanosecond}with(e,t=void 0){if(vt(this,ft),!Ae(e))throw new TypeError("invalid argument");bt(e);const n=nn(e,"partial"),r=nn(this);let{hour:o,minute:i,second:a,millisecond:s,microsecond:c,nanosecond:d}=Object.assign(r,n);const h=Lt(Zo(t));return ({hour:o,minute:i,second:a,millisecond:s,microsecond:c,nanosecond:d}=jt(o,i,a,s,c,d,h)),new PlainTime(o,i,a,s,c,d)}add(e){return vt(this,ft),Do("add",this,e)}subtract(e){return vt(this,ft),Do("subtract",this,e)}until(e,t=void 0){return vt(this,ft),uo("until",this,e,t)}since(e,t=void 0){return vt(this,ft),uo("since",this,e,t)}round(e){if(vt(this,ft),void 0===e)throw new TypeError("options parameter is required");const t="string"==typeof e?Fo("smallestUnit",e):Zo(e),n=Ft(t),r=Ut(t,"halfExpand"),o=Wt(t,"smallestUnit","time",qt);return Ht(n,{hour:24,minute:60,second:60,millisecond:1e3,microsecond:1e3,nanosecond:1e3}[o],false),Tn(Oo(re(this,M),n,o,r))}equals(e){vt(this,ft);const t=hn(e);return 0===So(re(this,M),re(t,M))}toString(e=void 0){vt(this,ft);const t=Zo(e),n=zt(t),r=Ut(t,"trunc"),o=Wt(t,"smallestUnit","time",void 0);if("hour"===o)throw new RangeError('smallestUnit must be a time unit other than "hour"');const{precision:i,unit:a,increment:s}=At(o,n);return tr(Oo(re(this,M),s,a,r),i)}toJSON(){return vt(this,ft),tr(re(this,M),"auto")}toLocaleString(e=void 0,t=void 0){return vt(this,ft),new di(e,t).format(this)}valueOf(){qo("PlainTime");}static from(e,t=void 0){return hn(e,t)}static compare(e,t){const n=hn(e),r=hn(t);return So(re(n,M),re(r,M))}}ae(PlainTime,"Temporal.PlainTime");class PlainYearMonth{constructor(e,t,n="iso8601",r=1){const o=_e(e),i=_e(t),a=zo(void 0===n?"iso8601":Ve(n)),s=_e(r);xr(o,i,s),Mn(this,{year:o,month:i,day:s},a);}get year(){return Zi(this,"year")}get month(){return Zi(this,"month")}get monthCode(){return Zi(this,"monthCode")}get calendarId(){return vt(this,pt),re(this,E)}get era(){return Zi(this,"era")}get eraYear(){return Zi(this,"eraYear")}get daysInMonth(){return Zi(this,"daysInMonth")}get daysInYear(){return Zi(this,"daysInYear")}get monthsInYear(){return Zi(this,"monthsInYear")}get inLeapYear(){return Zi(this,"inLeapYear")}with(e,t=void 0){if(vt(this,pt),!Ae(e))throw new TypeError("invalid argument");bt(e);const n=re(this,E);let r=en(n,re(this,D),"year-month");return r=Rn(n,r,tn(n,e,["year","month","monthCode"],[],"partial")),En(Pn(n,r,Lt(Zo(t))),n)}add(e,t=void 0){return vt(this,pt),To("add",this,e,t)}subtract(e,t=void 0){return vt(this,pt),To("subtract",this,e,t)}until(e,t=void 0){return vt(this,pt),lo("until",this,e,t)}since(e,t=void 0){return vt(this,pt),lo("since",this,e,t)}equals(e){vt(this,pt);const t=ln(e);return 0===Ro(re(this,D),re(t,D))&&xn(re(this,E),re(t,E))}toString(e=void 0){return vt(this,pt),or(this,Zt(Zo(e)))}toJSON(){return vt(this,pt),or(this)}toLocaleString(e=void 0,t=void 0){return vt(this,pt),new di(e,t).format(this)}valueOf(){qo("PlainYearMonth");}toPlainDate(e){if(vt(this,pt),!Ae(e))throw new TypeError("argument should be an object");const t=re(this,E);return pn(Ln(t,Rn(t,en(t,re(this,D),"year-month"),tn(t,e,["day"],[],[])),"constrain"),t)}static from(e,t=void 0){return ln(e,t)}static compare(e,t){const n=ln(e),r=ln(t);return Ro(re(n,D),re(r,D))}}function Zi(e,t){vt(e,pt);const n=re(e,D);return Qt(e).isoToDate(n,{[t]:true})[t]}ae(PlainYearMonth,"Temporal.PlainYearMonth");const Fi=di.prototype.resolvedOptions;class ZonedDateTime{constructor(e,t,n="iso8601"){if(arguments.length<1)throw new TypeError("missing argument: epochNanoseconds is required");const r=Lo(e);let o=Ve(t);const{tzName:i,offsetMinutes:a}=Rt(o);if(void 0===a){const e=hr(i);if(!e)throw new RangeError(`unknown time zone ${i}`);o=e.identifier;}else o=mr(a);On(this,r,o,zo(void 0===n?"iso8601":Ve(n)));}get calendarId(){return vt(this,wt),re(this,E)}get timeZoneId(){return vt(this,wt),re(this,$)}get year(){return zi(this,"year")}get month(){return zi(this,"month")}get monthCode(){return zi(this,"monthCode")}get day(){return zi(this,"day")}get hour(){return Ai(this,"hour")}get minute(){return Ai(this,"minute")}get second(){return Ai(this,"second")}get millisecond(){return Ai(this,"millisecond")}get microsecond(){return Ai(this,"microsecond")}get nanosecond(){return Ai(this,"nanosecond")}get era(){return zi(this,"era")}get eraYear(){return zi(this,"eraYear")}get epochMilliseconds(){return vt(this,wt),No(re(this,b),"floor")}get epochNanoseconds(){return vt(this,wt),ko(re(this,b))}get dayOfWeek(){return zi(this,"dayOfWeek")}get dayOfYear(){return zi(this,"dayOfYear")}get weekOfYear(){return zi(this,"weekOfYear")?.week}get yearOfWeek(){return zi(this,"weekOfYear")?.year}get hoursInDay(){vt(this,wt);const e=re(this,$),t=Hi(this).isoDate,n=Or(t.year,t.month,t.day+1),r=_n(e,t),o=_n(e,n);return Yo(TimeDuration.fromEpochNsDiff(o,r),"hour")}get daysInWeek(){return zi(this,"daysInWeek")}get daysInMonth(){return zi(this,"daysInMonth")}get daysInYear(){return zi(this,"daysInYear")}get monthsInYear(){return zi(this,"monthsInYear")}get inLeapYear(){return zi(this,"inLeapYear")}get offset(){return vt(this,wt),Hn(Fn(re(this,$),re(this,b)))}get offsetNanoseconds(){return vt(this,wt),Fn(re(this,$),re(this,b))}with(e,t=void 0){if(vt(this,wt),!Ae(e))throw new TypeError("invalid zoned-date-time-like");bt(e);const n=re(this,E),r=re(this,$),o=Fn(r,re(this,b)),i=Hi(this);let a={...en(n,i.isoDate),...i.time,offset:Hn(o)};a=Rn(n,a,tn(n,e,["year","month","monthCode","day"],["hour","minute","second","millisecond","microsecond","nanosecond","offset"],"partial"));const s=Zo(t),c=Pt(s),d=Bt(s,"prefer"),h=on(n,a,Lt(s)),u=sr(a.offset);return $n(mn(h.isoDate,h.time,"option",u,r,c,d,false),r,n)}withPlainTime(e=void 0){vt(this,wt);const t=re(this,$),n=re(this,E),r=Hi(this).isoDate;let o;return o=void 0===e?_n(t,r):An(t,xt(r,re(hn(e),M)),"compatible"),$n(o,t,n)}withTimeZone(e){vt(this,wt);const t=Bn(e);return $n(re(this,b),t,re(this,E))}withCalendar(e){vt(this,wt);const t=kn(e);return $n(re(this,b),re(this,$),t)}add(e,t=void 0){return vt(this,wt),Mo("add",this,e,t)}subtract(e,t=void 0){return vt(this,wt),Mo("subtract",this,e,t)}until(e,t=void 0){return vt(this,wt),mo("until",this,e,t)}since(e,t=void 0){return vt(this,wt),mo("since",this,e,t)}round(t){if(vt(this,wt),void 0===t)throw new TypeError("options parameter is required");const n="string"==typeof t?Fo("smallestUnit",t):Zo(t),r=Ft(n),o=Ut(n,"halfExpand"),i=Wt(n,"smallestUnit","time",qt,["day"]),a={day:1,hour:24,minute:60,second:60,millisecond:1e3,microsecond:1e3,nanosecond:1e3}[i];if(Ht(r,a,1===a),"nanosecond"===i&&1===r)return $n(re(this,b),re(this,$),re(this,E));const s=re(this,$),c=re(this,b),d=Hi(this);let h;if("day"===i){const t=d.isoDate,n=Or(t.year,t.month,t.day+1),r=_n(s,t),i=_n(s,n),a=e.subtract(i,r);h=TimeDuration.fromEpochNsDiff(c,r).round(a,o).addToEpochNs(r);}else {const e=Co(d,r,i,o),t=Fn(s,c);h=mn(e.isoDate,e.time,"option",t,s,"compatible","prefer",false);}return $n(h,s,re(this,E))}equals(t){vt(this,wt);const n=fn(t),r=re(this,b),o=re(n,b);return !!e.equal(e.BigInt(r),e.BigInt(o))&&!!Zn(re(this,$),re(n,$))&&xn(re(this,E),re(n,E))}toString(e=void 0){vt(this,wt);const t=Zo(e),n=Zt(t),r=zt(t),o=function(e){return Ho(e,"offset",["auto","never"],"auto")}(t),i=Ut(t,"trunc"),a=Wt(t,"smallestUnit","time",void 0);if("hour"===a)throw new RangeError('smallestUnit must be a time unit other than "hour"');const s=function(e){return Ho(e,"timeZoneName",["auto","never","critical"],"auto")}(t),{precision:c,unit:d,increment:h}=At(a,r);return ir(this,c,n,s,o,{unit:d,increment:h,roundingMode:i})}toLocaleString(e=void 0,t=void 0){vt(this,wt);const n=Zo(t),r=Object.create(null);if(function(e,t,n,r){if(null==t)return;const o=Reflect.ownKeys(t);for(let i=0;i<o.length;i++){const a=o[i];if(!n.some((e=>Object.is(e,a)))&&Object.prototype.propertyIsEnumerable.call(t,a)){const n=t[a];e[a]=n;}}}(r,n,["timeZone"]),void 0!==n.timeZone)throw new TypeError("ZonedDateTime toLocaleString does not accept a timeZone option");if(void 0===r.year&&void 0===r.month&&void 0===r.day&&void 0===r.era&&void 0===r.weekday&&void 0===r.dateStyle&&void 0===r.hour&&void 0===r.minute&&void 0===r.second&&void 0===r.fractionalSecondDigits&&void 0===r.timeStyle&&void 0===r.dayPeriod&&void 0===r.timeZoneName&&(r.timeZoneName="short"),r.timeZone=re(this,$),ar(r.timeZone))throw new RangeError("toLocaleString does not currently support offset time zones");const o=new di(e,r),i=Fi.call(o).calendar,a=re(this,E);if("iso8601"!==a&&"iso8601"!==i&&!xn(i,a))throw new RangeError(`cannot format ZonedDateTime with calendar ${a} in locale with calendar ${i}`);return o.format(Cn(re(this,b)))}toJSON(){return vt(this,wt),ir(this,"auto")}valueOf(){qo("ZonedDateTime");}startOfDay(){vt(this,wt);const e=re(this,$);return $n(_n(e,Hi(this).isoDate),e,re(this,E))}getTimeZoneTransition(e){vt(this,wt);const t=re(this,$);if(void 0===e)throw new TypeError("options parameter is required");const n=Ho("string"==typeof e?Fo("direction",e):Zo(e),"direction",["next","previous"],qt);if(void 0===n)throw new TypeError("direction option is required");if(ar(t)||"UTC"===t)return null;const r=re(this,b),o="next"===n?wr(t,r):vr(t,r);return null===o?null:$n(o,t,re(this,E))}toInstant(){return vt(this,wt),Cn(re(this,b))}toPlainDate(){return vt(this,wt),pn(Hi(this).isoDate,re(this,E))}toPlainTime(){return vt(this,wt),Tn(Hi(this).time)}toPlainDateTime(){return vt(this,wt),wn(Hi(this),re(this,E))}static from(e,t=void 0){return fn(e,t)}static compare(t,n){const r=fn(t),o=fn(n),i=re(r,b),a=re(o,b);return e.lessThan(e.BigInt(i),e.BigInt(a))?-1:e.greaterThan(e.BigInt(i),e.BigInt(a))?1:0}}function Hi(e){return zn(re(e,$),re(e,b))}function zi(e,t){vt(e,wt);const n=Hi(e).isoDate;return Qt(e).isoToDate(n,{[t]:true})[t]}function Ai(e,t){return vt(e,wt),Hi(e).time[t]}ae(ZonedDateTime,"Temporal.ZonedDateTime");var qi=Object.freeze({__proto__:null,Duration,Instant,Now:Bi,PlainDate,PlainDateTime,PlainMonthDay,PlainTime,PlainYearMonth,ZonedDateTime});const _i=[Instant,PlainDate,PlainDateTime,Duration,PlainMonthDay,PlainTime,PlainYearMonth,ZonedDateTime];for(const e of _i){const t=Object.getOwnPropertyDescriptor(e,"prototype");(t.configurable||t.enumerable||t.writable)&&(t.configurable=false,t.enumerable=false,t.writable=false,Object.defineProperty(e,"prototype",t));}

var NodeType;
(function (NodeType) {
    NodeType["BlankNode"] = "BlankNode";
    NodeType["IRI"] = "NamedNode";
    NodeType["Literal"] = "Literal";
    NodeType["Undefined"] = "Undefined";
})(NodeType || (NodeType = {}));
var XSDNS;
(function (XSDNS) {
    XSDNS["Boolean"] = "http://www.w3.org/2001/XMLSchema#boolean";
    XSDNS["Integer"] = "http://www.w3.org/2001/XMLSchema#integer";
    XSDNS["NonNegativeInteger"] = "http://www.w3.org/2001/XMLSchema#nonNegativeInteger";
    XSDNS["NonPositiveInteger"] = "http://www.w3.org/2001/XMLSchema#nonPositiveInteger";
    XSDNS["NegativeInteger"] = "http://www.w3.org/2001/XMLSchema#negativeInteger";
    XSDNS["PositiveInteger"] = "http://www.w3.org/2001/XMLSchema#positiveInteger";
    XSDNS["DateTime"] = "http://www.w3.org/2001/XMLSchema#dateTime";
    XSDNS["Double"] = "http://www.w3.org/2001/XMLSchema#double";
})(XSDNS || (XSDNS = {}));
const canonicalDouble = (v) => v.toExponential(15).replace(/(\d)0*e\+?/, '$1E');

function getGraphName(q) {
    if (!q.graph.value) {
        return MerklizationConstants.DEFAULT_GRAPH_NODE_NAME;
    }
    if (q.graph.termType !== 'BlankNode') {
        throw new Error('graph node is not of BlankNode type');
    }
    return q.graph.value;
}
const sortArr = (arr) => {
    return arr.sort((a, b) => {
        if (a < b) {
            return -1;
        }
        if (a > b) {
            return 1;
        }
        return 0;
    });
};
const byteEncoder = new TextEncoder();
const validateValue = (val) => {
    switch (typeof val) {
        case 'boolean':
        case 'string':
        case 'bigint':
        case 'number':
            return;
        case 'object':
            if (val instanceof qi.Instant) {
                return;
            }
    }
    throw new Error(`unexpected value type ${typeof val}, expected boolean | number | Temporal.Instant | string`);
};
const minMaxFromPrime = (prime) => {
    const max = prime / 2n;
    const min = max - prime + 1n;
    return { min, max };
};
// return included minimum and included maximum values for integers by XSD type
function minMaxByXSDType(xsdType, prime) {
    switch (xsdType) {
        case XSDNS.PositiveInteger:
            return { min: 1n, max: prime - 1n };
        case XSDNS.NonNegativeInteger:
            return { min: 0n, max: prime - 1n };
        case XSDNS.Integer:
            return minMaxFromPrime(prime);
        case XSDNS.NegativeInteger:
            return { min: minMaxFromPrime(prime).min, max: -1n };
        case XSDNS.NonPositiveInteger:
            return { min: minMaxFromPrime(prime).min, max: 0n };
        default:
            throw new Error(`unsupported XSD type: ${xsdType}`);
    }
}
const convertStringToXsdValue = (dataType, valueStr, maxFieldValue) => {
    switch (dataType) {
        case XSDNS.Boolean:
            switch (valueStr) {
                case 'false':
                case '0':
                    return false;
                case 'true':
                case '1':
                    return true;
                default:
                    throw new Error('incorrect boolean value');
            }
        case XSDNS.Integer:
        case XSDNS.NonNegativeInteger:
        case XSDNS.NonPositiveInteger:
        case XSDNS.NegativeInteger:
        case XSDNS.PositiveInteger:
            const int = BigInt(valueStr);
            const { min, max } = minMaxByXSDType(dataType, maxFieldValue);
            if (int > max) {
                throw new Error(`integer exceeds maximum value: ${int}`);
            }
            if (int < min) {
                throw new Error(`integer is below minimum value: ${int}`);
            }
            return int;
        case XSDNS.DateTime: {
            if (isNaN(Date.parse(valueStr))) {
                throw new Error(`error: error parsing time string ${valueStr}`);
            }
            const dateRegEx = /^\d{4}-\d{2}-\d{2}$/;
            if (dateRegEx.test(valueStr)) {
                return qi.Instant.from(new Date(valueStr).toISOString());
            }
            return qi.Instant.from(valueStr);
        }
        case XSDNS.Double:
            return canonicalDouble(parseFloat(valueStr));
        default:
            return valueStr;
    }
};
const convertAnyToString = (v, datatype) => {
    const isDoubleType = datatype === XSDNS.Double;
    switch (typeof v) {
        case 'string':
            return isDoubleType ? canonicalDouble(parseFloat(v)) : v;
        case 'boolean':
            return `${v}`;
        case 'number': {
            return isDoubleType ? canonicalDouble(v) : `${v}`;
        }
        default:
            throw new Error('unsupported type');
    }
};

const bytesEncoder = new TextEncoder();
class MtValue {
    value;
    h;
    constructor(value, h = DEFAULT_HASHER) {
        this.value = value;
        this.h = h;
    }
    isString() {
        return typeof this.value === 'string';
    }
    asString() {
        if (!this.isString()) {
            throw MerklizationConstants.ERRORS.MT_VALUE_INCORRECT_TYPE;
        }
        return this.value.toString();
    }
    isTime() {
        return this.value instanceof qi.Instant;
    }
    asTime() {
        if (!this.isTime()) {
            throw MerklizationConstants.ERRORS.MT_VALUE_INCORRECT_TYPE;
        }
        return this.value;
    }
    isNumber() {
        return typeof this.value === 'number';
    }
    asNumber() {
        if (!this.isNumber()) {
            throw MerklizationConstants.ERRORS.MT_VALUE_INCORRECT_TYPE;
        }
        return this.value;
    }
    isBool() {
        return typeof this.value === 'boolean';
    }
    asBool() {
        if (!this.isBool()) {
            throw MerklizationConstants.ERRORS.MT_VALUE_INCORRECT_TYPE;
        }
        return this.value;
    }
    mtEntry() {
        return MtValue.mkValueMtEntry(this.h, this.value);
    }
    isBigInt() {
        return typeof this.value === 'bigint';
    }
    asBigInt() {
        if (!this.isBigInt()) {
            throw MerklizationConstants.ERRORS.MT_VALUE_INCORRECT_TYPE;
        }
        return this.value;
    }
    static mkValueMtEntry = (h, v) => {
        switch (typeof v) {
            case 'number':
                return MtValue.mkValueInt(h, v);
            case 'string':
                return MtValue.mkValueString(h, v);
            case 'boolean':
                return MtValue.mkValueBool(h, v);
            case 'bigint':
                return MtValue.mkValueBigInt(h, v);
            default: {
                if (v instanceof qi.Instant) {
                    return MtValue.mkValueTime(h, v);
                }
                throw new Error(`error: unexpected type ${typeof v}`);
            }
        }
    };
    static async mkValueInt(h, v) {
        if (v >= 0) {
            return BigInt(v);
        }
        return h.prime() + BigInt(v);
    }
    static mkValueUInt = (h, v) => {
        return BigInt.asUintN(64, v);
    };
    static mkValueBool = (h, v) => {
        if (v) {
            return h.hash([BigInt.asIntN(64, BigInt(1))]);
        }
        return h.hash([BigInt.asIntN(64, BigInt(0))]);
    };
    static mkValueString = (h, v) => {
        return h.hashBytes(bytesEncoder.encode(v));
    };
    static mkValueTime = async (h, v) => {
        // convert unixTimeStamp from ms -> ns as in go implementation
        return this.mkValueInt(h, v.epochNanoseconds);
    };
    static mkValueBigInt = async (h, v) => {
        const prime = h.prime();
        if (v >= prime) {
            throw new Error(`value is too big: ${v}`);
        }
        if (v < 0n) {
            const { min } = minMaxFromPrime(prime);
            if (v < min) {
                throw new Error(`value is too small: ${v}`);
            }
            return v + prime;
        }
        return v;
    };
}

var lib = {};

/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */

var IdentifierIssuer_1;
var hasRequiredIdentifierIssuer;

function requireIdentifierIssuer () {
	if (hasRequiredIdentifierIssuer) return IdentifierIssuer_1;
	hasRequiredIdentifierIssuer = 1;

	IdentifierIssuer_1 = class IdentifierIssuer {
	  /**
	   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique
	   * identifiers, keeping track of any previously issued identifiers.
	   *
	   * @param prefix the prefix to use ('<prefix><counter>').
	   * @param existing an existing Map to use.
	   * @param counter the counter to use.
	   */
	  constructor(prefix, existing = new Map(), counter = 0) {
	    this.prefix = prefix;
	    this._existing = existing;
	    this.counter = counter;
	  }

	  /**
	   * Copies this IdentifierIssuer.
	   *
	   * @return a copy of this IdentifierIssuer.
	   */
	  clone() {
	    const {prefix, _existing, counter} = this;
	    return new IdentifierIssuer(prefix, new Map(_existing), counter);
	  }

	  /**
	   * Gets the new identifier for the given old identifier, where if no old
	   * identifier is given a new identifier will be generated.
	   *
	   * @param [old] the old identifier to get the new identifier for.
	   *
	   * @return the new identifier.
	   */
	  getId(old) {
	    // return existing old identifier
	    const existing = old && this._existing.get(old);
	    if(existing) {
	      return existing;
	    }

	    // get next identifier
	    const identifier = this.prefix + this.counter;
	    this.counter++;

	    // save mapping
	    if(old) {
	      this._existing.set(old, identifier);
	    }

	    return identifier;
	  }

	  /**
	   * Returns true if the given old identifer has already been assigned a new
	   * identifier.
	   *
	   * @param old the old identifier to check.
	   *
	   * @return true if the old identifier has been assigned a new identifier,
	   *   false if not.
	   */
	  hasId(old) {
	    return this._existing.has(old);
	  }

	  /**
	   * Returns all of the IDs that have been issued new IDs in the order in
	   * which they were issued new IDs.
	   *
	   * @return the list of old IDs that has been issued new IDs in order.
	   */
	  getOldIds() {
	    return [...this._existing.keys()];
	  }
	};
	return IdentifierIssuer_1;
}

/*!
 * Copyright (c) 2016-2022 Digital Bazaar, Inc. All rights reserved.
 */

var MessageDigestBrowser;
var hasRequiredMessageDigestBrowser;

function requireMessageDigestBrowser () {
	if (hasRequiredMessageDigestBrowser) return MessageDigestBrowser;
	hasRequiredMessageDigestBrowser = 1;

	const crypto = self.crypto || self.msCrypto;

	MessageDigestBrowser = class MessageDigest {
	  /**
	   * Creates a new MessageDigest.
	   *
	   * @param algorithm the algorithm to use.
	   */
	  constructor(algorithm) {
	    // check if crypto.subtle is available
	    // check is here rather than top-level to only fail if class is used
	    if(!(crypto && crypto.subtle)) {
	      throw new Error('crypto.subtle not found.');
	    }
	    if(algorithm === 'sha256') {
	      this.algorithm = {name: 'SHA-256'};
	    } else if(algorithm === 'sha1') {
	      this.algorithm = {name: 'SHA-1'};
	    } else {
	      throw new Error(`Unsupported algorithm "${algorithm}".`);
	    }
	    this._content = '';
	  }

	  update(msg) {
	    this._content += msg;
	  }

	  async digest() {
	    const data = new TextEncoder().encode(this._content);
	    const buffer = new Uint8Array(
	      await crypto.subtle.digest(this.algorithm, data));
	    // return digest in hex
	    let hex = '';
	    for(let i = 0; i < buffer.length; ++i) {
	      hex += buffer[i].toString(16).padStart(2, '0');
	    }
	    return hex;
	  }
	};
	return MessageDigestBrowser;
}

/*!
 * Copyright (c) 2016-2022 Digital Bazaar, Inc. All rights reserved.
 */

var Permuter_1;
var hasRequiredPermuter;

function requirePermuter () {
	if (hasRequiredPermuter) return Permuter_1;
	hasRequiredPermuter = 1;

	Permuter_1 = class Permuter {
	  /**
	   * A Permuter iterates over all possible permutations of the given array
	   * of elements.
	   *
	   * @param list the array of elements to iterate over.
	   */
	  constructor(list) {
	    // original array
	    this.current = list.sort();
	    // indicates whether there are more permutations
	    this.done = false;
	    // directional info for permutation algorithm
	    this.dir = new Map();
	    for(let i = 0; i < list.length; ++i) {
	      this.dir.set(list[i], true);
	    }
	  }

	  /**
	   * Returns true if there is another permutation.
	   *
	   * @return true if there is another permutation, false if not.
	   */
	  hasNext() {
	    return !this.done;
	  }

	  /**
	   * Gets the next permutation. Call hasNext() to ensure there is another one
	   * first.
	   *
	   * @return the next permutation.
	   */
	  next() {
	    // copy current permutation to return it
	    const {current, dir} = this;
	    const rval = current.slice();

	    /* Calculate the next permutation using the Steinhaus-Johnson-Trotter
	     permutation algorithm. */

	    // get largest mobile element k
	    // (mobile: element is greater than the one it is looking at)
	    let k = null;
	    let pos = 0;
	    const length = current.length;
	    for(let i = 0; i < length; ++i) {
	      const element = current[i];
	      const left = dir.get(element);
	      if((k === null || element > k) &&
	        ((left && i > 0 && element > current[i - 1]) ||
	        (!left && i < (length - 1) && element > current[i + 1]))) {
	        k = element;
	        pos = i;
	      }
	    }

	    // no more permutations
	    if(k === null) {
	      this.done = true;
	    } else {
	      // swap k and the element it is looking at
	      const swap = dir.get(k) ? pos - 1 : pos + 1;
	      current[pos] = current[swap];
	      current[swap] = k;

	      // reverse the direction of all elements larger than k
	      for(const element of current) {
	        if(element > k) {
	          dir.set(element, !dir.get(element));
	        }
	      }
	    }

	    return rval;
	  }
	};
	return Permuter_1;
}

/*!
 * Copyright (c) 2016-2022 Digital Bazaar, Inc. All rights reserved.
 */

var NQuads_1;
var hasRequiredNQuads$1;

function requireNQuads$1 () {
	if (hasRequiredNQuads$1) return NQuads_1;
	hasRequiredNQuads$1 = 1;
	const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
	const RDF_LANGSTRING = RDF + 'langString';
	const XSD_STRING = 'http://www.w3.org/2001/XMLSchema#string';

	const TYPE_NAMED_NODE = 'NamedNode';
	const TYPE_BLANK_NODE = 'BlankNode';
	const TYPE_LITERAL = 'Literal';
	const TYPE_DEFAULT_GRAPH = 'DefaultGraph';

	// build regexes
	const REGEX = {};
	(() => {
	  const iri = '(?:<([^:]+:[^>]*)>)';
	  // https://www.w3.org/TR/turtle/#grammar-production-BLANK_NODE_LABEL
	  const PN_CHARS_BASE =
	    'A-Z' + 'a-z' +
	    '\u00C0-\u00D6' +
	    '\u00D8-\u00F6' +
	    '\u00F8-\u02FF' +
	    '\u0370-\u037D' +
	    '\u037F-\u1FFF' +
	    '\u200C-\u200D' +
	    '\u2070-\u218F' +
	    '\u2C00-\u2FEF' +
	    '\u3001-\uD7FF' +
	    '\uF900-\uFDCF' +
	    '\uFDF0-\uFFFD';
	    // TODO:
	    //'\u10000-\uEFFFF';
	  const PN_CHARS_U =
	    PN_CHARS_BASE +
	    '_';
	  const PN_CHARS =
	    PN_CHARS_U +
	    '0-9' +
	    '-' +
	    '\u00B7' +
	    '\u0300-\u036F' +
	    '\u203F-\u2040';
	  const BLANK_NODE_LABEL =
	    '(_:' +
	      '(?:[' + PN_CHARS_U + '0-9])' +
	      '(?:(?:[' + PN_CHARS + '.])*(?:[' + PN_CHARS + ']))?' +
	    ')';
	  const bnode = BLANK_NODE_LABEL;
	  const plain = '"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"';
	  const datatype = '(?:\\^\\^' + iri + ')';
	  const language = '(?:@([a-zA-Z]+(?:-[a-zA-Z0-9]+)*))';
	  const literal = '(?:' + plain + '(?:' + datatype + '|' + language + ')?)';
	  const ws = '[ \\t]+';
	  const wso = '[ \\t]*';

	  // define quad part regexes
	  const subject = '(?:' + iri + '|' + bnode + ')' + ws;
	  const property = iri + ws;
	  const object = '(?:' + iri + '|' + bnode + '|' + literal + ')' + wso;
	  const graphName = '(?:\\.|(?:(?:' + iri + '|' + bnode + ')' + wso + '\\.))';

	  // end of line and empty regexes
	  REGEX.eoln = /(?:\r\n)|(?:\n)|(?:\r)/g;
	  REGEX.empty = new RegExp('^' + wso + '$');

	  // full quad regex
	  REGEX.quad = new RegExp(
	    '^' + wso + subject + property + object + graphName + wso + '$');
	})();

	NQuads_1 = class NQuads {
	  /**
	   * Parses RDF in the form of N-Quads.
	   *
	   * @param input the N-Quads input to parse.
	   *
	   * @return an RDF dataset (an array of quads per http://rdf.js.org/).
	   */
	  static parse(input) {
	    // build RDF dataset
	    const dataset = [];

	    const graphs = {};

	    // split N-Quad input into lines
	    const lines = input.split(REGEX.eoln);
	    let lineNumber = 0;
	    for(const line of lines) {
	      lineNumber++;

	      // skip empty lines
	      if(REGEX.empty.test(line)) {
	        continue;
	      }

	      // parse quad
	      const match = line.match(REGEX.quad);
	      if(match === null) {
	        throw new Error('N-Quads parse error on line ' + lineNumber + '.');
	      }

	      // create RDF quad
	      const quad = {subject: null, predicate: null, object: null, graph: null};

	      // get subject
	      if(match[1] !== undefined) {
	        quad.subject = {termType: TYPE_NAMED_NODE, value: match[1]};
	      } else {
	        quad.subject = {termType: TYPE_BLANK_NODE, value: match[2]};
	      }

	      // get predicate
	      quad.predicate = {termType: TYPE_NAMED_NODE, value: match[3]};

	      // get object
	      if(match[4] !== undefined) {
	        quad.object = {termType: TYPE_NAMED_NODE, value: match[4]};
	      } else if(match[5] !== undefined) {
	        quad.object = {termType: TYPE_BLANK_NODE, value: match[5]};
	      } else {
	        quad.object = {
	          termType: TYPE_LITERAL,
	          value: undefined,
	          datatype: {
	            termType: TYPE_NAMED_NODE
	          }
	        };
	        if(match[7] !== undefined) {
	          quad.object.datatype.value = match[7];
	        } else if(match[8] !== undefined) {
	          quad.object.datatype.value = RDF_LANGSTRING;
	          quad.object.language = match[8];
	        } else {
	          quad.object.datatype.value = XSD_STRING;
	        }
	        quad.object.value = _unescape(match[6]);
	      }

	      // get graph
	      if(match[9] !== undefined) {
	        quad.graph = {
	          termType: TYPE_NAMED_NODE,
	          value: match[9]
	        };
	      } else if(match[10] !== undefined) {
	        quad.graph = {
	          termType: TYPE_BLANK_NODE,
	          value: match[10]
	        };
	      } else {
	        quad.graph = {
	          termType: TYPE_DEFAULT_GRAPH,
	          value: ''
	        };
	      }

	      // only add quad if it is unique in its graph
	      if(!(quad.graph.value in graphs)) {
	        graphs[quad.graph.value] = [quad];
	        dataset.push(quad);
	      } else {
	        let unique = true;
	        const quads = graphs[quad.graph.value];
	        for(const q of quads) {
	          if(_compareTriples(q, quad)) {
	            unique = false;
	            break;
	          }
	        }
	        if(unique) {
	          quads.push(quad);
	          dataset.push(quad);
	        }
	      }
	    }

	    return dataset;
	  }

	  /**
	   * Converts an RDF dataset to N-Quads.
	   *
	   * @param dataset (array of quads) the RDF dataset to convert.
	   *
	   * @return the N-Quads string.
	   */
	  static serialize(dataset) {
	    if(!Array.isArray(dataset)) {
	      dataset = NQuads.legacyDatasetToQuads(dataset);
	    }
	    const quads = [];
	    for(const quad of dataset) {
	      quads.push(NQuads.serializeQuad(quad));
	    }
	    return quads.sort().join('');
	  }

	  /**
	   * Converts RDF quad components to an N-Quad string (a single quad).
	   *
	   * @param {Object} s - N-Quad subject component.
	   * @param {Object} p - N-Quad predicate component.
	   * @param {Object} o - N-Quad object component.
	   * @param {Object} g - N-Quad graph component.
	   *
	   * @return {string} the N-Quad.
	   */
	  static serializeQuadComponents(s, p, o, g) {
	    let nquad = '';

	    // subject can only be NamedNode or BlankNode
	    if(s.termType === TYPE_NAMED_NODE) {
	      nquad += `<${s.value}>`;
	    } else {
	      nquad += `${s.value}`;
	    }

	    // predicate can only be NamedNode
	    nquad += ` <${p.value}> `;

	    // object is NamedNode, BlankNode, or Literal
	    if(o.termType === TYPE_NAMED_NODE) {
	      nquad += `<${o.value}>`;
	    } else if(o.termType === TYPE_BLANK_NODE) {
	      nquad += o.value;
	    } else {
	      nquad += `"${_escape(o.value)}"`;
	      if(o.datatype.value === RDF_LANGSTRING) {
	        if(o.language) {
	          nquad += `@${o.language}`;
	        }
	      } else if(o.datatype.value !== XSD_STRING) {
	        nquad += `^^<${o.datatype.value}>`;
	      }
	    }

	    // graph can only be NamedNode or BlankNode (or DefaultGraph, but that
	    // does not add to `nquad`)
	    if(g.termType === TYPE_NAMED_NODE) {
	      nquad += ` <${g.value}>`;
	    } else if(g.termType === TYPE_BLANK_NODE) {
	      nquad += ` ${g.value}`;
	    }

	    nquad += ' .\n';
	    return nquad;
	  }

	  /**
	   * Converts an RDF quad to an N-Quad string (a single quad).
	   *
	   * @param quad the RDF quad convert.
	   *
	   * @return the N-Quad string.
	   */
	  static serializeQuad(quad) {
	    return NQuads.serializeQuadComponents(
	      quad.subject, quad.predicate, quad.object, quad.graph);
	  }

	  /**
	   * Converts a legacy-formatted dataset to an array of quads dataset per
	   * http://rdf.js.org/.
	   *
	   * @param dataset the legacy dataset to convert.
	   *
	   * @return the array of quads dataset.
	   */
	  static legacyDatasetToQuads(dataset) {
	    const quads = [];

	    const termTypeMap = {
	      'blank node': TYPE_BLANK_NODE,
	      IRI: TYPE_NAMED_NODE,
	      literal: TYPE_LITERAL
	    };

	    for(const graphName in dataset) {
	      const triples = dataset[graphName];
	      triples.forEach(triple => {
	        const quad = {};
	        for(const componentName in triple) {
	          const oldComponent = triple[componentName];
	          const newComponent = {
	            termType: termTypeMap[oldComponent.type],
	            value: oldComponent.value
	          };
	          if(newComponent.termType === TYPE_LITERAL) {
	            newComponent.datatype = {
	              termType: TYPE_NAMED_NODE
	            };
	            if('datatype' in oldComponent) {
	              newComponent.datatype.value = oldComponent.datatype;
	            }
	            if('language' in oldComponent) {
	              if(!('datatype' in oldComponent)) {
	                newComponent.datatype.value = RDF_LANGSTRING;
	              }
	              newComponent.language = oldComponent.language;
	            } else if(!('datatype' in oldComponent)) {
	              newComponent.datatype.value = XSD_STRING;
	            }
	          }
	          quad[componentName] = newComponent;
	        }
	        if(graphName === '@default') {
	          quad.graph = {
	            termType: TYPE_DEFAULT_GRAPH,
	            value: ''
	          };
	        } else {
	          quad.graph = {
	            termType: graphName.startsWith('_:') ?
	              TYPE_BLANK_NODE : TYPE_NAMED_NODE,
	            value: graphName
	          };
	        }
	        quads.push(quad);
	      });
	    }

	    return quads;
	  }
	};

	/**
	 * Compares two RDF triples for equality.
	 *
	 * @param t1 the first triple.
	 * @param t2 the second triple.
	 *
	 * @return true if the triples are the same, false if not.
	 */
	function _compareTriples(t1, t2) {
	  // compare subject and object types first as it is the quickest check
	  if(!(t1.subject.termType === t2.subject.termType &&
	    t1.object.termType === t2.object.termType)) {
	    return false;
	  }
	  // compare values
	  if(!(t1.subject.value === t2.subject.value &&
	    t1.predicate.value === t2.predicate.value &&
	    t1.object.value === t2.object.value)) {
	    return false;
	  }
	  if(t1.object.termType !== TYPE_LITERAL) {
	    // no `datatype` or `language` to check
	    return true;
	  }
	  return (
	    (t1.object.datatype.termType === t2.object.datatype.termType) &&
	    (t1.object.language === t2.object.language) &&
	    (t1.object.datatype.value === t2.object.datatype.value)
	  );
	}

	const _escapeRegex = /["\\\n\r]/g;
	/**
	 * Escape string to N-Quads literal
	 */
	function _escape(s) {
	  return s.replace(_escapeRegex, function(match) {
	    switch(match) {
	      case '"': return '\\"';
	      case '\\': return '\\\\';
	      case '\n': return '\\n';
	      case '\r': return '\\r';
	    }
	  });
	}

	const _unescapeRegex =
	  /(?:\\([tbnrf"'\\]))|(?:\\u([0-9A-Fa-f]{4}))|(?:\\U([0-9A-Fa-f]{8}))/g;
	/**
	 * Unescape N-Quads literal to string
	 */
	function _unescape(s) {
	  return s.replace(_unescapeRegex, function(match, code, u, U) {
	    if(code) {
	      switch(code) {
	        case 't': return '\t';
	        case 'b': return '\b';
	        case 'n': return '\n';
	        case 'r': return '\r';
	        case 'f': return '\f';
	        case '"': return '"';
	        case '\'': return '\'';
	        case '\\': return '\\';
	      }
	    }
	    if(u) {
	      return String.fromCharCode(parseInt(u, 16));
	    }
	    if(U) {
	      // FIXME: support larger values
	      throw new Error('Unsupported U escape');
	    }
	  });
	}
	return NQuads_1;
}

/*!
 * Copyright (c) 2016-2022 Digital Bazaar, Inc. All rights reserved.
 */

var URDNA2015_1;
var hasRequiredURDNA2015;

function requireURDNA2015 () {
	if (hasRequiredURDNA2015) return URDNA2015_1;
	hasRequiredURDNA2015 = 1;

	const IdentifierIssuer = /*@__PURE__*/ requireIdentifierIssuer();
	const MessageDigest = /*@__PURE__*/ requireMessageDigestBrowser();
	const Permuter = /*@__PURE__*/ requirePermuter();
	const NQuads = /*@__PURE__*/ requireNQuads$1();

	URDNA2015_1 = class URDNA2015 {
	  constructor({
	    createMessageDigest = () => new MessageDigest('sha256'),
	    canonicalIdMap = new Map(),
	    maxDeepIterations = Infinity
	  } = {}) {
	    this.name = 'URDNA2015';
	    this.blankNodeInfo = new Map();
	    this.canonicalIssuer = new IdentifierIssuer('_:c14n', canonicalIdMap);
	    this.createMessageDigest = createMessageDigest;
	    this.maxDeepIterations = maxDeepIterations;
	    this.quads = null;
	    this.deepIterations = null;
	  }

	  // 4.4) Normalization Algorithm
	  async main(dataset) {
	    this.deepIterations = new Map();
	    this.quads = dataset;

	    // 1) Create the normalization state.
	    // 2) For every quad in input dataset:
	    for(const quad of dataset) {
	      // 2.1) For each blank node that occurs in the quad, add a reference
	      // to the quad using the blank node identifier in the blank node to
	      // quads map, creating a new entry if necessary.
	      this._addBlankNodeQuadInfo({quad, component: quad.subject});
	      this._addBlankNodeQuadInfo({quad, component: quad.object});
	      this._addBlankNodeQuadInfo({quad, component: quad.graph});
	    }

	    // 3) Create a list of non-normalized blank node identifiers
	    // non-normalized identifiers and populate it using the keys from the
	    // blank node to quads map.
	    // Note: We use a map here and it was generated during step 2.

	    // 4) `simple` flag is skipped -- loop is optimized away. This optimization
	    // is permitted because there was a typo in the hash first degree quads
	    // algorithm in the URDNA2015 spec that was implemented widely making it
	    // such that it could not be fixed; the result was that the loop only
	    // needs to be run once and the first degree quad hashes will never change.
	    // 5.1-5.2 are skipped; first degree quad hashes are generated just once
	    // for all non-normalized blank nodes.

	    // 5.3) For each blank node identifier identifier in non-normalized
	    // identifiers:
	    const hashToBlankNodes = new Map();
	    const nonNormalized = [...this.blankNodeInfo.keys()];
	    let i = 0;
	    for(const id of nonNormalized) {
	      // Note: batch hashing first degree quads 100 at a time
	      if(++i % 100 === 0) {
	        await this._yield();
	      }
	      // steps 5.3.1 and 5.3.2:
	      await this._hashAndTrackBlankNode({id, hashToBlankNodes});
	    }

	    // 5.4) For each hash to identifier list mapping in hash to blank
	    // nodes map, lexicographically-sorted by hash:
	    const hashes = [...hashToBlankNodes.keys()].sort();
	    // optimize away second sort, gather non-unique hashes in order as we go
	    const nonUnique = [];
	    for(const hash of hashes) {
	      // 5.4.1) If the length of identifier list is greater than 1,
	      // continue to the next mapping.
	      const idList = hashToBlankNodes.get(hash);
	      if(idList.length > 1) {
	        nonUnique.push(idList);
	        continue;
	      }

	      // 5.4.2) Use the Issue Identifier algorithm, passing canonical
	      // issuer and the single blank node identifier in identifier
	      // list, identifier, to issue a canonical replacement identifier
	      // for identifier.
	      const id = idList[0];
	      this.canonicalIssuer.getId(id);

	      // Note: These steps are skipped, optimized away since the loop
	      // only needs to be run once.
	      // 5.4.3) Remove identifier from non-normalized identifiers.
	      // 5.4.4) Remove hash from the hash to blank nodes map.
	      // 5.4.5) Set simple to true.
	    }

	    // 6) For each hash to identifier list mapping in hash to blank nodes map,
	    // lexicographically-sorted by hash:
	    // Note: sort optimized away, use `nonUnique`.
	    for(const idList of nonUnique) {
	      // 6.1) Create hash path list where each item will be a result of
	      // running the Hash N-Degree Quads algorithm.
	      const hashPathList = [];

	      // 6.2) For each blank node identifier identifier in identifier list:
	      for(const id of idList) {
	        // 6.2.1) If a canonical identifier has already been issued for
	        // identifier, continue to the next identifier.
	        if(this.canonicalIssuer.hasId(id)) {
	          continue;
	        }

	        // 6.2.2) Create temporary issuer, an identifier issuer
	        // initialized with the prefix _:b.
	        const issuer = new IdentifierIssuer('_:b');

	        // 6.2.3) Use the Issue Identifier algorithm, passing temporary
	        // issuer and identifier, to issue a new temporary blank node
	        // identifier for identifier.
	        issuer.getId(id);

	        // 6.2.4) Run the Hash N-Degree Quads algorithm, passing
	        // temporary issuer, and append the result to the hash path list.
	        const result = await this.hashNDegreeQuads(id, issuer);
	        hashPathList.push(result);
	      }

	      // 6.3) For each result in the hash path list,
	      // lexicographically-sorted by the hash in result:
	      hashPathList.sort(_stringHashCompare);
	      for(const result of hashPathList) {
	        // 6.3.1) For each blank node identifier, existing identifier,
	        // that was issued a temporary identifier by identifier issuer
	        // in result, issue a canonical identifier, in the same order,
	        // using the Issue Identifier algorithm, passing canonical
	        // issuer and existing identifier.
	        const oldIds = result.issuer.getOldIds();
	        for(const id of oldIds) {
	          this.canonicalIssuer.getId(id);
	        }
	      }
	    }

	    /* Note: At this point all blank nodes in the set of RDF quads have been
	    assigned canonical identifiers, which have been stored in the canonical
	    issuer. Here each quad is updated by assigning each of its blank nodes
	    its new identifier. */

	    // 7) For each quad, quad, in input dataset:
	    const normalized = [];
	    for(const quad of this.quads) {
	      // 7.1) Create a copy, quad copy, of quad and replace any existing
	      // blank node identifiers using the canonical identifiers
	      // previously issued by canonical issuer.
	      // Note: We optimize away the copy here.
	      const nQuad = NQuads.serializeQuadComponents(
	        this._componentWithCanonicalId(quad.subject),
	        quad.predicate,
	        this._componentWithCanonicalId(quad.object),
	        this._componentWithCanonicalId(quad.graph)
	      );
	      // 7.2) Add quad copy to the normalized dataset.
	      normalized.push(nQuad);
	    }

	    // sort normalized output
	    normalized.sort();

	    // 8) Return the normalized dataset.
	    return normalized.join('');
	  }

	  // 4.6) Hash First Degree Quads
	  async hashFirstDegreeQuads(id) {
	    // 1) Initialize nquads to an empty list. It will be used to store quads in
	    // N-Quads format.
	    const nquads = [];

	    // 2) Get the list of quads `quads` associated with the reference blank node
	    // identifier in the blank node to quads map.
	    const info = this.blankNodeInfo.get(id);
	    const quads = info.quads;

	    // 3) For each quad `quad` in `quads`:
	    for(const quad of quads) {
	      // 3.1) Serialize the quad in N-Quads format with the following special
	      // rule:

	      // 3.1.1) If any component in quad is an blank node, then serialize it
	      // using a special identifier as follows:
	      const copy = {
	        subject: null, predicate: quad.predicate, object: null, graph: null
	      };
	      // 3.1.2) If the blank node's existing blank node identifier matches
	      // the reference blank node identifier then use the blank node
	      // identifier _:a, otherwise, use the blank node identifier _:z.
	      copy.subject = this.modifyFirstDegreeComponent(
	        id, quad.subject, 'subject');
	      copy.object = this.modifyFirstDegreeComponent(
	        id, quad.object, 'object');
	      copy.graph = this.modifyFirstDegreeComponent(
	        id, quad.graph, 'graph');
	      nquads.push(NQuads.serializeQuad(copy));
	    }

	    // 4) Sort nquads in lexicographical order.
	    nquads.sort();

	    // 5) Return the hash that results from passing the sorted, joined nquads
	    // through the hash algorithm.
	    const md = this.createMessageDigest();
	    for(const nquad of nquads) {
	      md.update(nquad);
	    }
	    info.hash = await md.digest();
	    return info.hash;
	  }

	  // 4.7) Hash Related Blank Node
	  async hashRelatedBlankNode(related, quad, issuer, position) {
	    // 1) Set the identifier to use for related, preferring first the canonical
	    // identifier for related if issued, second the identifier issued by issuer
	    // if issued, and last, if necessary, the result of the Hash First Degree
	    // Quads algorithm, passing related.
	    let id;
	    if(this.canonicalIssuer.hasId(related)) {
	      id = this.canonicalIssuer.getId(related);
	    } else if(issuer.hasId(related)) {
	      id = issuer.getId(related);
	    } else {
	      id = this.blankNodeInfo.get(related).hash;
	    }

	    // 2) Initialize a string input to the value of position.
	    // Note: We use a hash object instead.
	    const md = this.createMessageDigest();
	    md.update(position);

	    // 3) If position is not g, append <, the value of the predicate in quad,
	    // and > to input.
	    if(position !== 'g') {
	      md.update(this.getRelatedPredicate(quad));
	    }

	    // 4) Append identifier to input.
	    md.update(id);

	    // 5) Return the hash that results from passing input through the hash
	    // algorithm.
	    return md.digest();
	  }

	  // 4.8) Hash N-Degree Quads
	  async hashNDegreeQuads(id, issuer) {
	    const deepIterations = this.deepIterations.get(id) || 0;
	    if(deepIterations > this.maxDeepIterations) {
	      throw new Error(
	        `Maximum deep iterations (${this.maxDeepIterations}) exceeded.`);
	    }
	    this.deepIterations.set(id, deepIterations + 1);

	    // 1) Create a hash to related blank nodes map for storing hashes that
	    // identify related blank nodes.
	    // Note: 2) and 3) handled within `createHashToRelated`
	    const md = this.createMessageDigest();
	    const hashToRelated = await this.createHashToRelated(id, issuer);

	    // 4) Create an empty string, data to hash.
	    // Note: We created a hash object `md` above instead.

	    // 5) For each related hash to blank node list mapping in hash to related
	    // blank nodes map, sorted lexicographically by related hash:
	    const hashes = [...hashToRelated.keys()].sort();
	    for(const hash of hashes) {
	      // 5.1) Append the related hash to the data to hash.
	      md.update(hash);

	      // 5.2) Create a string chosen path.
	      let chosenPath = '';

	      // 5.3) Create an unset chosen issuer variable.
	      let chosenIssuer;

	      // 5.4) For each permutation of blank node list:
	      const permuter = new Permuter(hashToRelated.get(hash));
	      let i = 0;
	      while(permuter.hasNext()) {
	        const permutation = permuter.next();
	        // Note: batch permutations 3 at a time
	        if(++i % 3 === 0) {
	          await this._yield();
	        }

	        // 5.4.1) Create a copy of issuer, issuer copy.
	        let issuerCopy = issuer.clone();

	        // 5.4.2) Create a string path.
	        let path = '';

	        // 5.4.3) Create a recursion list, to store blank node identifiers
	        // that must be recursively processed by this algorithm.
	        const recursionList = [];

	        // 5.4.4) For each related in permutation:
	        let nextPermutation = false;
	        for(const related of permutation) {
	          // 5.4.4.1) If a canonical identifier has been issued for
	          // related, append it to path.
	          if(this.canonicalIssuer.hasId(related)) {
	            path += this.canonicalIssuer.getId(related);
	          } else {
	            // 5.4.4.2) Otherwise:
	            // 5.4.4.2.1) If issuer copy has not issued an identifier for
	            // related, append related to recursion list.
	            if(!issuerCopy.hasId(related)) {
	              recursionList.push(related);
	            }
	            // 5.4.4.2.2) Use the Issue Identifier algorithm, passing
	            // issuer copy and related and append the result to path.
	            path += issuerCopy.getId(related);
	          }

	          // 5.4.4.3) If chosen path is not empty and the length of path
	          // is greater than or equal to the length of chosen path and
	          // path is lexicographically greater than chosen path, then
	          // skip to the next permutation.
	          // Note: Comparing path length to chosen path length can be optimized
	          // away; only compare lexicographically.
	          if(chosenPath.length !== 0 && path > chosenPath) {
	            nextPermutation = true;
	            break;
	          }
	        }

	        if(nextPermutation) {
	          continue;
	        }

	        // 5.4.5) For each related in recursion list:
	        for(const related of recursionList) {
	          // 5.4.5.1) Set result to the result of recursively executing
	          // the Hash N-Degree Quads algorithm, passing related for
	          // identifier and issuer copy for path identifier issuer.
	          const result = await this.hashNDegreeQuads(related, issuerCopy);

	          // 5.4.5.2) Use the Issue Identifier algorithm, passing issuer
	          // copy and related and append the result to path.
	          path += issuerCopy.getId(related);

	          // 5.4.5.3) Append <, the hash in result, and > to path.
	          path += `<${result.hash}>`;

	          // 5.4.5.4) Set issuer copy to the identifier issuer in
	          // result.
	          issuerCopy = result.issuer;

	          // 5.4.5.5) If chosen path is not empty and the length of path
	          // is greater than or equal to the length of chosen path and
	          // path is lexicographically greater than chosen path, then
	          // skip to the next permutation.
	          // Note: Comparing path length to chosen path length can be optimized
	          // away; only compare lexicographically.
	          if(chosenPath.length !== 0 && path > chosenPath) {
	            nextPermutation = true;
	            break;
	          }
	        }

	        if(nextPermutation) {
	          continue;
	        }

	        // 5.4.6) If chosen path is empty or path is lexicographically
	        // less than chosen path, set chosen path to path and chosen
	        // issuer to issuer copy.
	        if(chosenPath.length === 0 || path < chosenPath) {
	          chosenPath = path;
	          chosenIssuer = issuerCopy;
	        }
	      }

	      // 5.5) Append chosen path to data to hash.
	      md.update(chosenPath);

	      // 5.6) Replace issuer, by reference, with chosen issuer.
	      issuer = chosenIssuer;
	    }

	    // 6) Return issuer and the hash that results from passing data to hash
	    // through the hash algorithm.
	    return {hash: await md.digest(), issuer};
	  }

	  // helper for modifying component during Hash First Degree Quads
	  modifyFirstDegreeComponent(id, component) {
	    if(component.termType !== 'BlankNode') {
	      return component;
	    }
	    /* Note: A mistake in the URDNA2015 spec that made its way into
	    implementations (and therefore must stay to avoid interop breakage)
	    resulted in an assigned canonical ID, if available for
	    `component.value`, not being used in place of `_:a`/`_:z`, so
	    we don't use it here. */
	    return {
	      termType: 'BlankNode',
	      value: component.value === id ? '_:a' : '_:z'
	    };
	  }

	  // helper for getting a related predicate
	  getRelatedPredicate(quad) {
	    return `<${quad.predicate.value}>`;
	  }

	  // helper for creating hash to related blank nodes map
	  async createHashToRelated(id, issuer) {
	    // 1) Create a hash to related blank nodes map for storing hashes that
	    // identify related blank nodes.
	    const hashToRelated = new Map();

	    // 2) Get a reference, quads, to the list of quads in the blank node to
	    // quads map for the key identifier.
	    const quads = this.blankNodeInfo.get(id).quads;

	    // 3) For each quad in quads:
	    let i = 0;
	    for(const quad of quads) {
	      // Note: batch hashing related blank node quads 100 at a time
	      if(++i % 100 === 0) {
	        await this._yield();
	      }
	      // 3.1) For each component in quad, if component is the subject, object,
	      // and graph name and it is a blank node that is not identified by
	      // identifier:
	      // steps 3.1.1 and 3.1.2 occur in helpers:
	      await Promise.all([
	        this._addRelatedBlankNodeHash({
	          quad, component: quad.subject, position: 's',
	          id, issuer, hashToRelated
	        }),
	        this._addRelatedBlankNodeHash({
	          quad, component: quad.object, position: 'o',
	          id, issuer, hashToRelated
	        }),
	        this._addRelatedBlankNodeHash({
	          quad, component: quad.graph, position: 'g',
	          id, issuer, hashToRelated
	        })
	      ]);
	    }

	    return hashToRelated;
	  }

	  async _hashAndTrackBlankNode({id, hashToBlankNodes}) {
	    // 5.3.1) Create a hash, hash, according to the Hash First Degree
	    // Quads algorithm.
	    const hash = await this.hashFirstDegreeQuads(id);

	    // 5.3.2) Add hash and identifier to hash to blank nodes map,
	    // creating a new entry if necessary.
	    const idList = hashToBlankNodes.get(hash);
	    if(!idList) {
	      hashToBlankNodes.set(hash, [id]);
	    } else {
	      idList.push(id);
	    }
	  }

	  _addBlankNodeQuadInfo({quad, component}) {
	    if(component.termType !== 'BlankNode') {
	      return;
	    }
	    const id = component.value;
	    const info = this.blankNodeInfo.get(id);
	    if(info) {
	      info.quads.add(quad);
	    } else {
	      this.blankNodeInfo.set(id, {quads: new Set([quad]), hash: null});
	    }
	  }

	  async _addRelatedBlankNodeHash(
	    {quad, component, position, id, issuer, hashToRelated}) {
	    if(!(component.termType === 'BlankNode' && component.value !== id)) {
	      return;
	    }
	    // 3.1.1) Set hash to the result of the Hash Related Blank Node
	    // algorithm, passing the blank node identifier for component as
	    // related, quad, path identifier issuer as issuer, and position as
	    // either s, o, or g based on whether component is a subject, object,
	    // graph name, respectively.
	    const related = component.value;
	    const hash = await this.hashRelatedBlankNode(
	      related, quad, issuer, position);

	    // 3.1.2) Add a mapping of hash to the blank node identifier for
	    // component to hash to related blank nodes map, adding an entry as
	    // necessary.
	    const entries = hashToRelated.get(hash);
	    if(entries) {
	      entries.push(related);
	    } else {
	      hashToRelated.set(hash, [related]);
	    }
	  }

	  // canonical ids for 7.1
	  _componentWithCanonicalId(component) {
	    if(component.termType === 'BlankNode' &&
	      !component.value.startsWith(this.canonicalIssuer.prefix)) {
	      // create new BlankNode
	      return {
	        termType: 'BlankNode',
	        value: this.canonicalIssuer.getId(component.value)
	      };
	    }
	    return component;
	  }

	  async _yield() {
	    return new Promise(resolve => setImmediate(resolve));
	  }
	};

	function _stringHashCompare(a, b) {
	  return a.hash < b.hash ? -1 : a.hash > b.hash ? 1 : 0;
	}
	return URDNA2015_1;
}

/*!
 * Copyright (c) 2016-2022 Digital Bazaar, Inc. All rights reserved.
 */

var URGNA2012;
var hasRequiredURGNA2012;

function requireURGNA2012 () {
	if (hasRequiredURGNA2012) return URGNA2012;
	hasRequiredURGNA2012 = 1;

	const MessageDigest = /*@__PURE__*/ requireMessageDigestBrowser();
	const URDNA2015 = /*@__PURE__*/ requireURDNA2015();

	URGNA2012 = class URDNA2012 extends URDNA2015 {
	  constructor() {
	    super();
	    this.name = 'URGNA2012';
	    this.createMessageDigest = () => new MessageDigest('sha1');
	  }

	  // helper for modifying component during Hash First Degree Quads
	  modifyFirstDegreeComponent(id, component, key) {
	    if(component.termType !== 'BlankNode') {
	      return component;
	    }
	    if(key === 'graph') {
	      return {
	        termType: 'BlankNode',
	        value: '_:g'
	      };
	    }
	    return {
	      termType: 'BlankNode',
	      value: (component.value === id ? '_:a' : '_:z')
	    };
	  }

	  // helper for getting a related predicate
	  getRelatedPredicate(quad) {
	    return quad.predicate.value;
	  }

	  // helper for creating hash to related blank nodes map
	  async createHashToRelated(id, issuer) {
	    // 1) Create a hash to related blank nodes map for storing hashes that
	    // identify related blank nodes.
	    const hashToRelated = new Map();

	    // 2) Get a reference, quads, to the list of quads in the blank node to
	    // quads map for the key identifier.
	    const quads = this.blankNodeInfo.get(id).quads;

	    // 3) For each quad in quads:
	    let i = 0;
	    for(const quad of quads) {
	      // 3.1) If the quad's subject is a blank node that does not match
	      // identifier, set hash to the result of the Hash Related Blank Node
	      // algorithm, passing the blank node identifier for subject as related,
	      // quad, path identifier issuer as issuer, and p as position.
	      let position;
	      let related;
	      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {
	        related = quad.subject.value;
	        position = 'p';
	      } else if(
	        quad.object.termType === 'BlankNode' && quad.object.value !== id) {
	        // 3.2) Otherwise, if quad's object is a blank node that does not match
	        // identifier, to the result of the Hash Related Blank Node algorithm,
	        // passing the blank node identifier for object as related, quad, path
	        // identifier issuer as issuer, and r as position.
	        related = quad.object.value;
	        position = 'r';
	      } else {
	        // 3.3) Otherwise, continue to the next quad.
	        continue;
	      }
	      // Note: batch hashing related blank nodes 100 at a time
	      if(++i % 100 === 0) {
	        await this._yield();
	      }
	      // 3.4) Add a mapping of hash to the blank node identifier for the
	      // component that matched (subject or object) to hash to related blank
	      // nodes map, adding an entry as necessary.
	      const hash = await this.hashRelatedBlankNode(
	        related, quad, issuer, position);
	      const entries = hashToRelated.get(hash);
	      if(entries) {
	        entries.push(related);
	      } else {
	        hashToRelated.set(hash, [related]);
	      }
	    }

	    return hashToRelated;
	  }
	};
	return URGNA2012;
}

/*!
 * Copyright (c) 2016-2022 Digital Bazaar, Inc. All rights reserved.
 */

var URDNA2015Sync_1;
var hasRequiredURDNA2015Sync;

function requireURDNA2015Sync () {
	if (hasRequiredURDNA2015Sync) return URDNA2015Sync_1;
	hasRequiredURDNA2015Sync = 1;

	const IdentifierIssuer = /*@__PURE__*/ requireIdentifierIssuer();
	// FIXME: do not import; convert to requiring a
	// hash factory
	const MessageDigest = /*@__PURE__*/ requireMessageDigestBrowser();
	const Permuter = /*@__PURE__*/ requirePermuter();
	const NQuads = /*@__PURE__*/ requireNQuads$1();

	URDNA2015Sync_1 = class URDNA2015Sync {
	  constructor({
	    createMessageDigest = () => new MessageDigest('sha256'),
	    canonicalIdMap = new Map(),
	    maxDeepIterations = Infinity
	  } = {}) {
	    this.name = 'URDNA2015';
	    this.blankNodeInfo = new Map();
	    this.canonicalIssuer = new IdentifierIssuer('_:c14n', canonicalIdMap);
	    this.createMessageDigest = createMessageDigest;
	    this.maxDeepIterations = maxDeepIterations;
	    this.quads = null;
	    this.deepIterations = null;
	  }

	  // 4.4) Normalization Algorithm
	  main(dataset) {
	    this.deepIterations = new Map();
	    this.quads = dataset;

	    // 1) Create the normalization state.
	    // 2) For every quad in input dataset:
	    for(const quad of dataset) {
	      // 2.1) For each blank node that occurs in the quad, add a reference
	      // to the quad using the blank node identifier in the blank node to
	      // quads map, creating a new entry if necessary.
	      this._addBlankNodeQuadInfo({quad, component: quad.subject});
	      this._addBlankNodeQuadInfo({quad, component: quad.object});
	      this._addBlankNodeQuadInfo({quad, component: quad.graph});
	    }

	    // 3) Create a list of non-normalized blank node identifiers
	    // non-normalized identifiers and populate it using the keys from the
	    // blank node to quads map.
	    // Note: We use a map here and it was generated during step 2.

	    // 4) `simple` flag is skipped -- loop is optimized away. This optimization
	    // is permitted because there was a typo in the hash first degree quads
	    // algorithm in the URDNA2015 spec that was implemented widely making it
	    // such that it could not be fixed; the result was that the loop only
	    // needs to be run once and the first degree quad hashes will never change.
	    // 5.1-5.2 are skipped; first degree quad hashes are generated just once
	    // for all non-normalized blank nodes.

	    // 5.3) For each blank node identifier identifier in non-normalized
	    // identifiers:
	    const hashToBlankNodes = new Map();
	    const nonNormalized = [...this.blankNodeInfo.keys()];
	    for(const id of nonNormalized) {
	      // steps 5.3.1 and 5.3.2:
	      this._hashAndTrackBlankNode({id, hashToBlankNodes});
	    }

	    // 5.4) For each hash to identifier list mapping in hash to blank
	    // nodes map, lexicographically-sorted by hash:
	    const hashes = [...hashToBlankNodes.keys()].sort();
	    // optimize away second sort, gather non-unique hashes in order as we go
	    const nonUnique = [];
	    for(const hash of hashes) {
	      // 5.4.1) If the length of identifier list is greater than 1,
	      // continue to the next mapping.
	      const idList = hashToBlankNodes.get(hash);
	      if(idList.length > 1) {
	        nonUnique.push(idList);
	        continue;
	      }

	      // 5.4.2) Use the Issue Identifier algorithm, passing canonical
	      // issuer and the single blank node identifier in identifier
	      // list, identifier, to issue a canonical replacement identifier
	      // for identifier.
	      const id = idList[0];
	      this.canonicalIssuer.getId(id);

	      // Note: These steps are skipped, optimized away since the loop
	      // only needs to be run once.
	      // 5.4.3) Remove identifier from non-normalized identifiers.
	      // 5.4.4) Remove hash from the hash to blank nodes map.
	      // 5.4.5) Set simple to true.
	    }

	    // 6) For each hash to identifier list mapping in hash to blank nodes map,
	    // lexicographically-sorted by hash:
	    // Note: sort optimized away, use `nonUnique`.
	    for(const idList of nonUnique) {
	      // 6.1) Create hash path list where each item will be a result of
	      // running the Hash N-Degree Quads algorithm.
	      const hashPathList = [];

	      // 6.2) For each blank node identifier identifier in identifier list:
	      for(const id of idList) {
	        // 6.2.1) If a canonical identifier has already been issued for
	        // identifier, continue to the next identifier.
	        if(this.canonicalIssuer.hasId(id)) {
	          continue;
	        }

	        // 6.2.2) Create temporary issuer, an identifier issuer
	        // initialized with the prefix _:b.
	        const issuer = new IdentifierIssuer('_:b');

	        // 6.2.3) Use the Issue Identifier algorithm, passing temporary
	        // issuer and identifier, to issue a new temporary blank node
	        // identifier for identifier.
	        issuer.getId(id);

	        // 6.2.4) Run the Hash N-Degree Quads algorithm, passing
	        // temporary issuer, and append the result to the hash path list.
	        const result = this.hashNDegreeQuads(id, issuer);
	        hashPathList.push(result);
	      }

	      // 6.3) For each result in the hash path list,
	      // lexicographically-sorted by the hash in result:
	      hashPathList.sort(_stringHashCompare);
	      for(const result of hashPathList) {
	        // 6.3.1) For each blank node identifier, existing identifier,
	        // that was issued a temporary identifier by identifier issuer
	        // in result, issue a canonical identifier, in the same order,
	        // using the Issue Identifier algorithm, passing canonical
	        // issuer and existing identifier.
	        const oldIds = result.issuer.getOldIds();
	        for(const id of oldIds) {
	          this.canonicalIssuer.getId(id);
	        }
	      }
	    }

	    /* Note: At this point all blank nodes in the set of RDF quads have been
	    assigned canonical identifiers, which have been stored in the canonical
	    issuer. Here each quad is updated by assigning each of its blank nodes
	    its new identifier. */

	    // 7) For each quad, quad, in input dataset:
	    const normalized = [];
	    for(const quad of this.quads) {
	      // 7.1) Create a copy, quad copy, of quad and replace any existing
	      // blank node identifiers using the canonical identifiers
	      // previously issued by canonical issuer.
	      // Note: We optimize away the copy here.
	      const nQuad = NQuads.serializeQuadComponents(
	        this._componentWithCanonicalId({component: quad.subject}),
	        quad.predicate,
	        this._componentWithCanonicalId({component: quad.object}),
	        this._componentWithCanonicalId({component: quad.graph})
	      );
	      // 7.2) Add quad copy to the normalized dataset.
	      normalized.push(nQuad);
	    }

	    // sort normalized output
	    normalized.sort();

	    // 8) Return the normalized dataset.
	    return normalized.join('');
	  }

	  // 4.6) Hash First Degree Quads
	  hashFirstDegreeQuads(id) {
	    // 1) Initialize nquads to an empty list. It will be used to store quads in
	    // N-Quads format.
	    const nquads = [];

	    // 2) Get the list of quads `quads` associated with the reference blank node
	    // identifier in the blank node to quads map.
	    const info = this.blankNodeInfo.get(id);
	    const quads = info.quads;

	    // 3) For each quad `quad` in `quads`:
	    for(const quad of quads) {
	      // 3.1) Serialize the quad in N-Quads format with the following special
	      // rule:

	      // 3.1.1) If any component in quad is an blank node, then serialize it
	      // using a special identifier as follows:
	      const copy = {
	        subject: null, predicate: quad.predicate, object: null, graph: null
	      };
	      // 3.1.2) If the blank node's existing blank node identifier matches
	      // the reference blank node identifier then use the blank node
	      // identifier _:a, otherwise, use the blank node identifier _:z.
	      copy.subject = this.modifyFirstDegreeComponent(
	        id, quad.subject, 'subject');
	      copy.object = this.modifyFirstDegreeComponent(
	        id, quad.object, 'object');
	      copy.graph = this.modifyFirstDegreeComponent(
	        id, quad.graph, 'graph');
	      nquads.push(NQuads.serializeQuad(copy));
	    }

	    // 4) Sort nquads in lexicographical order.
	    nquads.sort();

	    // 5) Return the hash that results from passing the sorted, joined nquads
	    // through the hash algorithm.
	    const md = this.createMessageDigest();
	    for(const nquad of nquads) {
	      md.update(nquad);
	    }
	    info.hash = md.digest();
	    return info.hash;
	  }

	  // 4.7) Hash Related Blank Node
	  hashRelatedBlankNode(related, quad, issuer, position) {
	    // 1) Set the identifier to use for related, preferring first the canonical
	    // identifier for related if issued, second the identifier issued by issuer
	    // if issued, and last, if necessary, the result of the Hash First Degree
	    // Quads algorithm, passing related.
	    let id;
	    if(this.canonicalIssuer.hasId(related)) {
	      id = this.canonicalIssuer.getId(related);
	    } else if(issuer.hasId(related)) {
	      id = issuer.getId(related);
	    } else {
	      id = this.blankNodeInfo.get(related).hash;
	    }

	    // 2) Initialize a string input to the value of position.
	    // Note: We use a hash object instead.
	    const md = this.createMessageDigest();
	    md.update(position);

	    // 3) If position is not g, append <, the value of the predicate in quad,
	    // and > to input.
	    if(position !== 'g') {
	      md.update(this.getRelatedPredicate(quad));
	    }

	    // 4) Append identifier to input.
	    md.update(id);

	    // 5) Return the hash that results from passing input through the hash
	    // algorithm.
	    return md.digest();
	  }

	  // 4.8) Hash N-Degree Quads
	  hashNDegreeQuads(id, issuer) {
	    const deepIterations = this.deepIterations.get(id) || 0;
	    if(deepIterations > this.maxDeepIterations) {
	      throw new Error(
	        `Maximum deep iterations (${this.maxDeepIterations}) exceeded.`);
	    }
	    this.deepIterations.set(id, deepIterations + 1);

	    // 1) Create a hash to related blank nodes map for storing hashes that
	    // identify related blank nodes.
	    // Note: 2) and 3) handled within `createHashToRelated`
	    const md = this.createMessageDigest();
	    const hashToRelated = this.createHashToRelated(id, issuer);

	    // 4) Create an empty string, data to hash.
	    // Note: We created a hash object `md` above instead.

	    // 5) For each related hash to blank node list mapping in hash to related
	    // blank nodes map, sorted lexicographically by related hash:
	    const hashes = [...hashToRelated.keys()].sort();
	    for(const hash of hashes) {
	      // 5.1) Append the related hash to the data to hash.
	      md.update(hash);

	      // 5.2) Create a string chosen path.
	      let chosenPath = '';

	      // 5.3) Create an unset chosen issuer variable.
	      let chosenIssuer;

	      // 5.4) For each permutation of blank node list:
	      const permuter = new Permuter(hashToRelated.get(hash));
	      while(permuter.hasNext()) {
	        const permutation = permuter.next();

	        // 5.4.1) Create a copy of issuer, issuer copy.
	        let issuerCopy = issuer.clone();

	        // 5.4.2) Create a string path.
	        let path = '';

	        // 5.4.3) Create a recursion list, to store blank node identifiers
	        // that must be recursively processed by this algorithm.
	        const recursionList = [];

	        // 5.4.4) For each related in permutation:
	        let nextPermutation = false;
	        for(const related of permutation) {
	          // 5.4.4.1) If a canonical identifier has been issued for
	          // related, append it to path.
	          if(this.canonicalIssuer.hasId(related)) {
	            path += this.canonicalIssuer.getId(related);
	          } else {
	            // 5.4.4.2) Otherwise:
	            // 5.4.4.2.1) If issuer copy has not issued an identifier for
	            // related, append related to recursion list.
	            if(!issuerCopy.hasId(related)) {
	              recursionList.push(related);
	            }
	            // 5.4.4.2.2) Use the Issue Identifier algorithm, passing
	            // issuer copy and related and append the result to path.
	            path += issuerCopy.getId(related);
	          }

	          // 5.4.4.3) If chosen path is not empty and the length of path
	          // is greater than or equal to the length of chosen path and
	          // path is lexicographically greater than chosen path, then
	          // skip to the next permutation.
	          // Note: Comparing path length to chosen path length can be optimized
	          // away; only compare lexicographically.
	          if(chosenPath.length !== 0 && path > chosenPath) {
	            nextPermutation = true;
	            break;
	          }
	        }

	        if(nextPermutation) {
	          continue;
	        }

	        // 5.4.5) For each related in recursion list:
	        for(const related of recursionList) {
	          // 5.4.5.1) Set result to the result of recursively executing
	          // the Hash N-Degree Quads algorithm, passing related for
	          // identifier and issuer copy for path identifier issuer.
	          const result = this.hashNDegreeQuads(related, issuerCopy);

	          // 5.4.5.2) Use the Issue Identifier algorithm, passing issuer
	          // copy and related and append the result to path.
	          path += issuerCopy.getId(related);

	          // 5.4.5.3) Append <, the hash in result, and > to path.
	          path += `<${result.hash}>`;

	          // 5.4.5.4) Set issuer copy to the identifier issuer in
	          // result.
	          issuerCopy = result.issuer;

	          // 5.4.5.5) If chosen path is not empty and the length of path
	          // is greater than or equal to the length of chosen path and
	          // path is lexicographically greater than chosen path, then
	          // skip to the next permutation.
	          // Note: Comparing path length to chosen path length can be optimized
	          // away; only compare lexicographically.
	          if(chosenPath.length !== 0 && path > chosenPath) {
	            nextPermutation = true;
	            break;
	          }
	        }

	        if(nextPermutation) {
	          continue;
	        }

	        // 5.4.6) If chosen path is empty or path is lexicographically
	        // less than chosen path, set chosen path to path and chosen
	        // issuer to issuer copy.
	        if(chosenPath.length === 0 || path < chosenPath) {
	          chosenPath = path;
	          chosenIssuer = issuerCopy;
	        }
	      }

	      // 5.5) Append chosen path to data to hash.
	      md.update(chosenPath);

	      // 5.6) Replace issuer, by reference, with chosen issuer.
	      issuer = chosenIssuer;
	    }

	    // 6) Return issuer and the hash that results from passing data to hash
	    // through the hash algorithm.
	    return {hash: md.digest(), issuer};
	  }

	  // helper for modifying component during Hash First Degree Quads
	  modifyFirstDegreeComponent(id, component) {
	    if(component.termType !== 'BlankNode') {
	      return component;
	    }
	    /* Note: A mistake in the URDNA2015 spec that made its way into
	    implementations (and therefore must stay to avoid interop breakage)
	    resulted in an assigned canonical ID, if available for
	    `component.value`, not being used in place of `_:a`/`_:z`, so
	    we don't use it here. */
	    return {
	      termType: 'BlankNode',
	      value: component.value === id ? '_:a' : '_:z'
	    };
	  }

	  // helper for getting a related predicate
	  getRelatedPredicate(quad) {
	    return `<${quad.predicate.value}>`;
	  }

	  // helper for creating hash to related blank nodes map
	  createHashToRelated(id, issuer) {
	    // 1) Create a hash to related blank nodes map for storing hashes that
	    // identify related blank nodes.
	    const hashToRelated = new Map();

	    // 2) Get a reference, quads, to the list of quads in the blank node to
	    // quads map for the key identifier.
	    const quads = this.blankNodeInfo.get(id).quads;

	    // 3) For each quad in quads:
	    for(const quad of quads) {
	      // 3.1) For each component in quad, if component is the subject, object,
	      // or graph name and it is a blank node that is not identified by
	      // identifier:
	      // steps 3.1.1 and 3.1.2 occur in helpers:
	      this._addRelatedBlankNodeHash({
	        quad, component: quad.subject, position: 's',
	        id, issuer, hashToRelated
	      });
	      this._addRelatedBlankNodeHash({
	        quad, component: quad.object, position: 'o',
	        id, issuer, hashToRelated
	      });
	      this._addRelatedBlankNodeHash({
	        quad, component: quad.graph, position: 'g',
	        id, issuer, hashToRelated
	      });
	    }

	    return hashToRelated;
	  }

	  _hashAndTrackBlankNode({id, hashToBlankNodes}) {
	    // 5.3.1) Create a hash, hash, according to the Hash First Degree
	    // Quads algorithm.
	    const hash = this.hashFirstDegreeQuads(id);

	    // 5.3.2) Add hash and identifier to hash to blank nodes map,
	    // creating a new entry if necessary.
	    const idList = hashToBlankNodes.get(hash);
	    if(!idList) {
	      hashToBlankNodes.set(hash, [id]);
	    } else {
	      idList.push(id);
	    }
	  }

	  _addBlankNodeQuadInfo({quad, component}) {
	    if(component.termType !== 'BlankNode') {
	      return;
	    }
	    const id = component.value;
	    const info = this.blankNodeInfo.get(id);
	    if(info) {
	      info.quads.add(quad);
	    } else {
	      this.blankNodeInfo.set(id, {quads: new Set([quad]), hash: null});
	    }
	  }

	  _addRelatedBlankNodeHash(
	    {quad, component, position, id, issuer, hashToRelated}) {
	    if(!(component.termType === 'BlankNode' && component.value !== id)) {
	      return;
	    }
	    // 3.1.1) Set hash to the result of the Hash Related Blank Node
	    // algorithm, passing the blank node identifier for component as
	    // related, quad, path identifier issuer as issuer, and position as
	    // either s, o, or g based on whether component is a subject, object,
	    // graph name, respectively.
	    const related = component.value;
	    const hash = this.hashRelatedBlankNode(related, quad, issuer, position);

	    // 3.1.2) Add a mapping of hash to the blank node identifier for
	    // component to hash to related blank nodes map, adding an entry as
	    // necessary.
	    const entries = hashToRelated.get(hash);
	    if(entries) {
	      entries.push(related);
	    } else {
	      hashToRelated.set(hash, [related]);
	    }
	  }

	  // canonical ids for 7.1
	  _componentWithCanonicalId({component}) {
	    if(component.termType === 'BlankNode' &&
	      !component.value.startsWith(this.canonicalIssuer.prefix)) {
	      // create new BlankNode
	      return {
	        termType: 'BlankNode',
	        value: this.canonicalIssuer.getId(component.value)
	      };
	    }
	    return component;
	  }
	};

	function _stringHashCompare(a, b) {
	  return a.hash < b.hash ? -1 : a.hash > b.hash ? 1 : 0;
	}
	return URDNA2015Sync_1;
}

/*!
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */

var URGNA2012Sync;
var hasRequiredURGNA2012Sync;

function requireURGNA2012Sync () {
	if (hasRequiredURGNA2012Sync) return URGNA2012Sync;
	hasRequiredURGNA2012Sync = 1;

	const MessageDigest = /*@__PURE__*/ requireMessageDigestBrowser();
	const URDNA2015Sync = /*@__PURE__*/ requireURDNA2015Sync();

	URGNA2012Sync = class URDNA2012Sync extends URDNA2015Sync {
	  constructor() {
	    super();
	    this.name = 'URGNA2012';
	    this.createMessageDigest = () => new MessageDigest('sha1');
	  }

	  // helper for modifying component during Hash First Degree Quads
	  modifyFirstDegreeComponent(id, component, key) {
	    if(component.termType !== 'BlankNode') {
	      return component;
	    }
	    if(key === 'graph') {
	      return {
	        termType: 'BlankNode',
	        value: '_:g'
	      };
	    }
	    return {
	      termType: 'BlankNode',
	      value: (component.value === id ? '_:a' : '_:z')
	    };
	  }

	  // helper for getting a related predicate
	  getRelatedPredicate(quad) {
	    return quad.predicate.value;
	  }

	  // helper for creating hash to related blank nodes map
	  createHashToRelated(id, issuer) {
	    // 1) Create a hash to related blank nodes map for storing hashes that
	    // identify related blank nodes.
	    const hashToRelated = new Map();

	    // 2) Get a reference, quads, to the list of quads in the blank node to
	    // quads map for the key identifier.
	    const quads = this.blankNodeInfo.get(id).quads;

	    // 3) For each quad in quads:
	    for(const quad of quads) {
	      // 3.1) If the quad's subject is a blank node that does not match
	      // identifier, set hash to the result of the Hash Related Blank Node
	      // algorithm, passing the blank node identifier for subject as related,
	      // quad, path identifier issuer as issuer, and p as position.
	      let position;
	      let related;
	      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {
	        related = quad.subject.value;
	        position = 'p';
	      } else if(
	        quad.object.termType === 'BlankNode' && quad.object.value !== id) {
	        // 3.2) Otherwise, if quad's object is a blank node that does not match
	        // identifier, to the result of the Hash Related Blank Node algorithm,
	        // passing the blank node identifier for object as related, quad, path
	        // identifier issuer as issuer, and r as position.
	        related = quad.object.value;
	        position = 'r';
	      } else {
	        // 3.3) Otherwise, continue to the next quad.
	        continue;
	      }
	      // 3.4) Add a mapping of hash to the blank node identifier for the
	      // component that matched (subject or object) to hash to related blank
	      // nodes map, adding an entry as necessary.
	      const hash = this.hashRelatedBlankNode(related, quad, issuer, position);
	      const entries = hashToRelated.get(hash);
	      if(entries) {
	        entries.push(related);
	      } else {
	        hashToRelated.set(hash, [related]);
	      }
	    }

	    return hashToRelated;
	  }
	};
	return URGNA2012Sync;
}

var _nodeResolve_empty = {};

var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: _nodeResolve_empty
});

var require$$4 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

/**
 * An implementation of the RDF Dataset Normalization specification.
 * This library works in the browser and node.js.
 *
 * BSD 3-Clause License
 * Copyright (c) 2016-2023 Digital Bazaar, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the Digital Bazaar, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var hasRequiredLib;

function requireLib () {
	if (hasRequiredLib) return lib;
	hasRequiredLib = 1;
	(function (exports) {

		const URDNA2015 = /*@__PURE__*/ requireURDNA2015();
		const URGNA2012 = /*@__PURE__*/ requireURGNA2012();
		const URDNA2015Sync = /*@__PURE__*/ requireURDNA2015Sync();
		const URGNA2012Sync = /*@__PURE__*/ requireURGNA2012Sync();

		// optional native support
		let rdfCanonizeNative;
		try {
		  rdfCanonizeNative = require$$4;
		} catch(e) {}

		// return a dataset from input dataset or legacy dataset
		function _inputToDataset(input/*, options*/) {
		  // back-compat with legacy dataset
		  if(!Array.isArray(input)) {
		    return exports.NQuads.legacyDatasetToQuads(input);
		  }
		  return input;
		}

		// expose helpers
		exports.NQuads = /*@__PURE__*/ requireNQuads$1();
		exports.IdentifierIssuer = /*@__PURE__*/ requireIdentifierIssuer();

		/**
		 * Get or set native API.
		 *
		 * @param api the native API.
		 *
		 * @return the currently set native API.
		 */
		exports._rdfCanonizeNative = function(api) {
		  if(api) {
		    rdfCanonizeNative = api;
		  }
		  return rdfCanonizeNative;
		};

		/**
		 * Asynchronously canonizes an RDF dataset.
		 *
		 * @param {Array|object|string} input - The input to canonize given as a
		 *   dataset or legacy dataset.
		 * @param {object} options - The options to use:
		 *   {string} algorithm - The canonicalization algorithm to use, `URDNA2015` or
		 *     `URGNA2012`.
		 *   {Function} [createMessageDigest] - A factory function for creating a
		 *     `MessageDigest` interface that overrides the built-in message digest
		 *     implementation used by the canonize algorithm; note that using a hash
		 *     algorithm (or HMAC algorithm) that differs from the one specified by
		 *     the canonize algorithm will result in different output.
		 *   {Map} [canonicalIdMap] - An optional Map to be populated by the canonical
		 *     identifier issuer with the bnode identifier mapping generated by the
		 *     canonicalization algorithm.
		 *   {boolean} [useNative=false] - Use native implementation.
		 *   {number} [maxDeepIterations=Infinity] - The maximum number of times to run
		 *     deep comparison algorithms (such as the N-Degree Hash Quads algorithm
		 *     used in URDNA2015) before bailing out and throwing an error; this is a
		 *     useful setting for preventing wasted CPU cycles or DoS when canonizing
		 *     meaningless or potentially malicious datasets, a recommended value is
		 *     `1`.
		 *
		 * @return a Promise that resolves to the canonicalized RDF Dataset.
		 */
		exports.canonize = async function(input, options) {
		  const dataset = _inputToDataset(input);

		  if(options.useNative) {
		    if(!rdfCanonizeNative) {
		      throw new Error('rdf-canonize-native not available');
		    }
		    if(options.createMessageDigest) {
		      throw new Error(
		        '"createMessageDigest" cannot be used with "useNative".');
		    }
		    return new Promise((resolve, reject) =>
		      rdfCanonizeNative.canonize(dataset, options, (err, canonical) =>
		        err ? reject(err) : resolve(canonical)));
		  }

		  if(options.algorithm === 'URDNA2015') {
		    return new URDNA2015(options).main(dataset);
		  }
		  if(options.algorithm === 'URGNA2012') {
		    if(options.createMessageDigest) {
		      throw new Error(
		        '"createMessageDigest" cannot be used with "URGNA2012".');
		    }
		    return new URGNA2012(options).main(dataset);
		  }
		  if(!('algorithm' in options)) {
		    throw new Error('No RDF Dataset Canonicalization algorithm specified.');
		  }
		  throw new Error(
		    'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);
		};

		/**
		 * This method is no longer available in the public API, it is for testing
		 * only. It synchronously canonizes an RDF dataset and does not work in the
		 * browser.
		 *
		 * @param {Array|object|string} input - The input to canonize given as a
		 *   dataset or legacy dataset.
		 * @param {object} options - The options to use:
		 *   {string} algorithm - The canonicalization algorithm to use, `URDNA2015` or
		 *     `URGNA2012`.
		 *   {Function} [createMessageDigest] - A factory function for creating a
		 *     `MessageDigest` interface that overrides the built-in message digest
		 *     implementation used by the canonize algorithm; note that using a hash
		 *     algorithm (or HMAC algorithm) that differs from the one specified by
		 *     the canonize algorithm will result in different output.
		 *   {boolean} [useNative=false] - Use native implementation.
		 *   {number} [maxDeepIterations=Infinity] - The maximum number of times to run
		 *     deep comparison algorithms (such as the N-Degree Hash Quads algorithm
		 *     used in URDNA2015) before bailing out and throwing an error; this is a
		 *     useful setting for preventing wasted CPU cycles or DoS when canonizing
		 *     meaningless or potentially malicious datasets, a recommended value is
		 *     `1`.
		 *
		 * @return the RDF dataset in canonical form.
		 */
		exports._canonizeSync = function(input, options) {
		  const dataset = _inputToDataset(input);

		  if(options.useNative) {
		    if(!rdfCanonizeNative) {
		      throw new Error('rdf-canonize-native not available');
		    }
		    if(options.createMessageDigest) {
		      throw new Error(
		        '"createMessageDigest" cannot be used with "useNative".');
		    }
		    return rdfCanonizeNative.canonizeSync(dataset, options);
		  }
		  if(options.algorithm === 'URDNA2015') {
		    return new URDNA2015Sync(options).main(dataset);
		  }
		  if(options.algorithm === 'URGNA2012') {
		    if(options.createMessageDigest) {
		      throw new Error(
		        '"createMessageDigest" cannot be used with "URGNA2012".');
		    }
		    return new URGNA2012Sync(options).main(dataset);
		  }
		  if(!('algorithm' in options)) {
		    throw new Error('No RDF Dataset Canonicalization algorithm specified.');
		  }
		  throw new Error(
		    'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);
		}; 
	} (lib));
	return lib;
}

/**
 * An implementation of the RDF Dataset Normalization specification.
 *
 * @author Dave Longley
 *
 * Copyright 2010-2021 Digital Bazaar, Inc.
 */

var rdfCanonize;
var hasRequiredRdfCanonize;

function requireRdfCanonize () {
	if (hasRequiredRdfCanonize) return rdfCanonize;
	hasRequiredRdfCanonize = 1;
	rdfCanonize = /*@__PURE__*/ requireLib();
	return rdfCanonize;
}

/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */

var types;
var hasRequiredTypes;

function requireTypes () {
	if (hasRequiredTypes) return types;
	hasRequiredTypes = 1;

	const api = {};
	types = api;

	/**
	 * Returns true if the given value is an Array.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is an Array, false if not.
	 */
	api.isArray = Array.isArray;

	/**
	 * Returns true if the given value is a Boolean.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a Boolean, false if not.
	 */
	api.isBoolean = v => (typeof v === 'boolean' ||
	  Object.prototype.toString.call(v) === '[object Boolean]');

	/**
	 * Returns true if the given value is a double.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a double, false if not.
	 */
	api.isDouble = v => api.isNumber(v) &&
	  (String(v).indexOf('.') !== -1 || Math.abs(v) >= 1e21);

	/**
	 * Returns true if the given value is an empty Object.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is an empty Object, false if not.
	 */
	api.isEmptyObject = v => api.isObject(v) && Object.keys(v).length === 0;

	/**
	 * Returns true if the given value is a Number.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a Number, false if not.
	 */
	api.isNumber = v => (typeof v === 'number' ||
	  Object.prototype.toString.call(v) === '[object Number]');

	/**
	 * Returns true if the given value is numeric.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is numeric, false if not.
	 */
	api.isNumeric = v => !isNaN(parseFloat(v)) && isFinite(v);

	/**
	 * Returns true if the given value is an Object.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is an Object, false if not.
	 */
	api.isObject = v => Object.prototype.toString.call(v) === '[object Object]';

	/**
	 * Returns true if the given value is a String.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a String, false if not.
	 */
	api.isString = v => (typeof v === 'string' ||
	  Object.prototype.toString.call(v) === '[object String]');

	/**
	 * Returns true if the given value is undefined.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is undefined, false if not.
	 */
	api.isUndefined = v => typeof v === 'undefined';
	return types;
}

/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */

var graphTypes;
var hasRequiredGraphTypes;

function requireGraphTypes () {
	if (hasRequiredGraphTypes) return graphTypes;
	hasRequiredGraphTypes = 1;

	const types = /*@__PURE__*/ requireTypes();

	const api = {};
	graphTypes = api;

	/**
	 * Returns true if the given value is a subject with properties.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a subject with properties, false if not.
	 */
	api.isSubject = v => {
	  // Note: A value is a subject if all of these hold true:
	  // 1. It is an Object.
	  // 2. It is not a @value, @set, or @list.
	  // 3. It has more than 1 key OR any existing key is not @id.
	  if(types.isObject(v) &&
	    !(('@value' in v) || ('@set' in v) || ('@list' in v))) {
	    const keyCount = Object.keys(v).length;
	    return (keyCount > 1 || !('@id' in v));
	  }
	  return false;
	};

	/**
	 * Returns true if the given value is a subject reference.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a subject reference, false if not.
	 */
	api.isSubjectReference = v =>
	  // Note: A value is a subject reference if all of these hold true:
	  // 1. It is an Object.
	  // 2. It has a single key: @id.
	  (types.isObject(v) && Object.keys(v).length === 1 && ('@id' in v));

	/**
	 * Returns true if the given value is a @value.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a @value, false if not.
	 */
	api.isValue = v =>
	  // Note: A value is a @value if all of these hold true:
	  // 1. It is an Object.
	  // 2. It has the @value property.
	  types.isObject(v) && ('@value' in v);

	/**
	 * Returns true if the given value is a @list.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a @list, false if not.
	 */
	api.isList = v =>
	  // Note: A value is a @list if all of these hold true:
	  // 1. It is an Object.
	  // 2. It has the @list property.
	  types.isObject(v) && ('@list' in v);

	/**
	 * Returns true if the given value is a @graph.
	 *
	 * @return true if the value is a @graph, false if not.
	 */
	api.isGraph = v => {
	  // Note: A value is a graph if all of these hold true:
	  // 1. It is an object.
	  // 2. It has an `@graph` key.
	  // 3. It may have '@id' or '@index'
	  return types.isObject(v) &&
	    '@graph' in v &&
	    Object.keys(v)
	      .filter(key => key !== '@id' && key !== '@index').length === 1;
	};

	/**
	 * Returns true if the given value is a simple @graph.
	 *
	 * @return true if the value is a simple @graph, false if not.
	 */
	api.isSimpleGraph = v => {
	  // Note: A value is a simple graph if all of these hold true:
	  // 1. It is an object.
	  // 2. It has an `@graph` key.
	  // 3. It has only 1 key or 2 keys where one of them is `@index`.
	  return api.isGraph(v) && !('@id' in v);
	};

	/**
	 * Returns true if the given value is a blank node.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a blank node, false if not.
	 */
	api.isBlankNode = v => {
	  // Note: A value is a blank node if all of these hold true:
	  // 1. It is an Object.
	  // 2. If it has an @id key that is not a string OR begins with '_:'.
	  // 3. It has no keys OR is not a @value, @set, or @list.
	  if(types.isObject(v)) {
	    if('@id' in v) {
	      const id = v['@id'];
	      return !types.isString(id) || id.indexOf('_:') === 0;
	    }
	    return (Object.keys(v).length === 0 ||
	      !(('@value' in v) || ('@set' in v) || ('@list' in v)));
	  }
	  return false;
	};
	return graphTypes;
}

/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */

var JsonLdError_1;
var hasRequiredJsonLdError;

function requireJsonLdError () {
	if (hasRequiredJsonLdError) return JsonLdError_1;
	hasRequiredJsonLdError = 1;

	JsonLdError_1 = class JsonLdError extends Error {
	  /**
	   * Creates a JSON-LD Error.
	   *
	   * @param msg the error message.
	   * @param type the error type.
	   * @param details the error details.
	   */
	  constructor(
	    message = 'An unspecified JSON-LD error occurred.',
	    name = 'jsonld.Error',
	    details = {}) {
	    super(message);
	    this.name = name;
	    this.message = message;
	    this.details = details;
	  }
	};
	return JsonLdError_1;
}

/*
 * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.
 */

var util;
var hasRequiredUtil;

function requireUtil () {
	if (hasRequiredUtil) return util;
	hasRequiredUtil = 1;

	const graphTypes = /*@__PURE__*/ requireGraphTypes();
	const types = /*@__PURE__*/ requireTypes();
	// TODO: move `IdentifierIssuer` to its own package
	const IdentifierIssuer = /*@__PURE__*/ requireRdfCanonize().IdentifierIssuer;
	const JsonLdError = /*@__PURE__*/ requireJsonLdError();

	// constants
	const REGEX_BCP47 = /^[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*$/;
	const REGEX_LINK_HEADERS = /(?:<[^>]*?>|"[^"]*?"|[^,])+/g;
	const REGEX_LINK_HEADER = /\s*<([^>]*?)>\s*(?:;\s*(.*))?/;
	const REGEX_LINK_HEADER_PARAMS =
	  /(.*?)=(?:(?:"([^"]*?)")|([^"]*?))\s*(?:(?:;\s*)|$)/g;
	const REGEX_KEYWORD = /^@[a-zA-Z]+$/;

	const DEFAULTS = {
	  headers: {
	    accept: 'application/ld+json, application/json'
	  }
	};

	const api = {};
	util = api;
	api.IdentifierIssuer = IdentifierIssuer;
	api.REGEX_BCP47 = REGEX_BCP47;
	api.REGEX_KEYWORD = REGEX_KEYWORD;

	/**
	 * Clones an object, array, Map, Set, or string/number. If a typed JavaScript
	 * object is given, such as a Date, it will be converted to a string.
	 *
	 * @param value the value to clone.
	 *
	 * @return the cloned value.
	 */
	api.clone = function(value) {
	  if(value && typeof value === 'object') {
	    let rval;
	    if(types.isArray(value)) {
	      rval = [];
	      for(let i = 0; i < value.length; ++i) {
	        rval[i] = api.clone(value[i]);
	      }
	    } else if(value instanceof Map) {
	      rval = new Map();
	      for(const [k, v] of value) {
	        rval.set(k, api.clone(v));
	      }
	    } else if(value instanceof Set) {
	      rval = new Set();
	      for(const v of value) {
	        rval.add(api.clone(v));
	      }
	    } else if(types.isObject(value)) {
	      rval = {};
	      for(const key in value) {
	        rval[key] = api.clone(value[key]);
	      }
	    } else {
	      rval = value.toString();
	    }
	    return rval;
	  }
	  return value;
	};

	/**
	 * Ensure a value is an array. If the value is an array, it is returned.
	 * Otherwise, it is wrapped in an array.
	 *
	 * @param value the value to return as an array.
	 *
	 * @return the value as an array.
	 */
	api.asArray = function(value) {
	  return Array.isArray(value) ? value : [value];
	};

	/**
	 * Builds an HTTP headers object for making a JSON-LD request from custom
	 * headers and asserts the `accept` header isn't overridden.
	 *
	 * @param headers an object of headers with keys as header names and values
	 *          as header values.
	 *
	 * @return an object of headers with a valid `accept` header.
	 */
	api.buildHeaders = (headers = {}) => {
	  const hasAccept = Object.keys(headers).some(
	    h => h.toLowerCase() === 'accept');

	  if(hasAccept) {
	    throw new RangeError(
	      'Accept header may not be specified; only "' +
	      DEFAULTS.headers.accept + '" is supported.');
	  }

	  return Object.assign({Accept: DEFAULTS.headers.accept}, headers);
	};

	/**
	 * Parses a link header. The results will be key'd by the value of "rel".
	 *
	 * Link: <http://json-ld.org/contexts/person.jsonld>;
	 * rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json"
	 *
	 * Parses as: {
	 *   'http://www.w3.org/ns/json-ld#context': {
	 *     target: http://json-ld.org/contexts/person.jsonld,
	 *     type: 'application/ld+json'
	 *   }
	 * }
	 *
	 * If there is more than one "rel" with the same IRI, then entries in the
	 * resulting map for that "rel" will be arrays.
	 *
	 * @param header the link header to parse.
	 */
	api.parseLinkHeader = header => {
	  const rval = {};
	  // split on unbracketed/unquoted commas
	  const entries = header.match(REGEX_LINK_HEADERS);
	  for(let i = 0; i < entries.length; ++i) {
	    let match = entries[i].match(REGEX_LINK_HEADER);
	    if(!match) {
	      continue;
	    }
	    const result = {target: match[1]};
	    const params = match[2];
	    while((match = REGEX_LINK_HEADER_PARAMS.exec(params))) {
	      result[match[1]] = (match[2] === undefined) ? match[3] : match[2];
	    }
	    const rel = result.rel || '';
	    if(Array.isArray(rval[rel])) {
	      rval[rel].push(result);
	    } else if(rval.hasOwnProperty(rel)) {
	      rval[rel] = [rval[rel], result];
	    } else {
	      rval[rel] = result;
	    }
	  }
	  return rval;
	};

	/**
	 * Throws an exception if the given value is not a valid @type value.
	 *
	 * @param v the value to check.
	 */
	api.validateTypeValue = (v, isFrame) => {
	  if(types.isString(v)) {
	    return;
	  }

	  if(types.isArray(v) && v.every(vv => types.isString(vv))) {
	    return;
	  }
	  if(isFrame && types.isObject(v)) {
	    switch(Object.keys(v).length) {
	      case 0:
	        // empty object is wildcard
	        return;
	      case 1:
	        // default entry is all strings
	        if('@default' in v &&
	          api.asArray(v['@default']).every(vv => types.isString(vv))) {
	          return;
	        }
	    }
	  }

	  throw new JsonLdError(
	    'Invalid JSON-LD syntax; "@type" value must a string, an array of ' +
	    'strings, an empty object, ' +
	    'or a default object.', 'jsonld.SyntaxError',
	    {code: 'invalid type value', value: v});
	};

	/**
	 * Returns true if the given subject has the given property.
	 *
	 * @param subject the subject to check.
	 * @param property the property to look for.
	 *
	 * @return true if the subject has the given property, false if not.
	 */
	api.hasProperty = (subject, property) => {
	  if(subject.hasOwnProperty(property)) {
	    const value = subject[property];
	    return (!types.isArray(value) || value.length > 0);
	  }
	  return false;
	};

	/**
	 * Determines if the given value is a property of the given subject.
	 *
	 * @param subject the subject to check.
	 * @param property the property to check.
	 * @param value the value to check.
	 *
	 * @return true if the value exists, false if not.
	 */
	api.hasValue = (subject, property, value) => {
	  if(api.hasProperty(subject, property)) {
	    let val = subject[property];
	    const isList = graphTypes.isList(val);
	    if(types.isArray(val) || isList) {
	      if(isList) {
	        val = val['@list'];
	      }
	      for(let i = 0; i < val.length; ++i) {
	        if(api.compareValues(value, val[i])) {
	          return true;
	        }
	      }
	    } else if(!types.isArray(value)) {
	      // avoid matching the set of values with an array value parameter
	      return api.compareValues(value, val);
	    }
	  }
	  return false;
	};

	/**
	 * Adds a value to a subject. If the value is an array, all values in the
	 * array will be added.
	 *
	 * @param subject the subject to add the value to.
	 * @param property the property that relates the value to the subject.
	 * @param value the value to add.
	 * @param [options] the options to use:
	 *        [propertyIsArray] true if the property is always an array, false
	 *          if not (default: false).
	 *        [valueIsArray] true if the value to be added should be preserved as
	 *          an array (lists) (default: false).
	 *        [allowDuplicate] true to allow duplicates, false not to (uses a
	 *          simple shallow comparison of subject ID or value) (default: true).
	 *        [prependValue] false to prepend value to any existing values.
	 *          (default: false)
	 */
	api.addValue = (subject, property, value, options) => {
	  options = options || {};
	  if(!('propertyIsArray' in options)) {
	    options.propertyIsArray = false;
	  }
	  if(!('valueIsArray' in options)) {
	    options.valueIsArray = false;
	  }
	  if(!('allowDuplicate' in options)) {
	    options.allowDuplicate = true;
	  }
	  if(!('prependValue' in options)) {
	    options.prependValue = false;
	  }

	  if(options.valueIsArray) {
	    subject[property] = value;
	  } else if(types.isArray(value)) {
	    if(value.length === 0 && options.propertyIsArray &&
	      !subject.hasOwnProperty(property)) {
	      subject[property] = [];
	    }
	    if(options.prependValue) {
	      value = value.concat(subject[property]);
	      subject[property] = [];
	    }
	    for(let i = 0; i < value.length; ++i) {
	      api.addValue(subject, property, value[i], options);
	    }
	  } else if(subject.hasOwnProperty(property)) {
	    // check if subject already has value if duplicates not allowed
	    const hasValue = (!options.allowDuplicate &&
	      api.hasValue(subject, property, value));

	    // make property an array if value not present or always an array
	    if(!types.isArray(subject[property]) &&
	      (!hasValue || options.propertyIsArray)) {
	      subject[property] = [subject[property]];
	    }

	    // add new value
	    if(!hasValue) {
	      if(options.prependValue) {
	        subject[property].unshift(value);
	      } else {
	        subject[property].push(value);
	      }
	    }
	  } else {
	    // add new value as set or single value
	    subject[property] = options.propertyIsArray ? [value] : value;
	  }
	};

	/**
	 * Gets all of the values for a subject's property as an array.
	 *
	 * @param subject the subject.
	 * @param property the property.
	 *
	 * @return all of the values for a subject's property as an array.
	 */
	api.getValues = (subject, property) => [].concat(subject[property] || []);

	/**
	 * Removes a property from a subject.
	 *
	 * @param subject the subject.
	 * @param property the property.
	 */
	api.removeProperty = (subject, property) => {
	  delete subject[property];
	};

	/**
	 * Removes a value from a subject.
	 *
	 * @param subject the subject.
	 * @param property the property that relates the value to the subject.
	 * @param value the value to remove.
	 * @param [options] the options to use:
	 *          [propertyIsArray] true if the property is always an array, false
	 *            if not (default: false).
	 */
	api.removeValue = (subject, property, value, options) => {
	  options = options || {};
	  if(!('propertyIsArray' in options)) {
	    options.propertyIsArray = false;
	  }

	  // filter out value
	  const values = api.getValues(subject, property).filter(
	    e => !api.compareValues(e, value));

	  if(values.length === 0) {
	    api.removeProperty(subject, property);
	  } else if(values.length === 1 && !options.propertyIsArray) {
	    subject[property] = values[0];
	  } else {
	    subject[property] = values;
	  }
	};

	/**
	 * Relabels all blank nodes in the given JSON-LD input.
	 *
	 * @param input the JSON-LD input.
	 * @param [options] the options to use:
	 *          [issuer] an IdentifierIssuer to use to label blank nodes.
	 */
	api.relabelBlankNodes = (input, options) => {
	  options = options || {};
	  const issuer = options.issuer || new IdentifierIssuer('_:b');
	  return _labelBlankNodes(issuer, input);
	};

	/**
	 * Compares two JSON-LD values for equality. Two JSON-LD values will be
	 * considered equal if:
	 *
	 * 1. They are both primitives of the same type and value.
	 * 2. They are both @values with the same @value, @type, @language,
	 *   and @index, OR
	 * 3. They both have @ids they are the same.
	 *
	 * @param v1 the first value.
	 * @param v2 the second value.
	 *
	 * @return true if v1 and v2 are considered equal, false if not.
	 */
	api.compareValues = (v1, v2) => {
	  // 1. equal primitives
	  if(v1 === v2) {
	    return true;
	  }

	  // 2. equal @values
	  if(graphTypes.isValue(v1) && graphTypes.isValue(v2) &&
	    v1['@value'] === v2['@value'] &&
	    v1['@type'] === v2['@type'] &&
	    v1['@language'] === v2['@language'] &&
	    v1['@index'] === v2['@index']) {
	    return true;
	  }

	  // 3. equal @ids
	  if(types.isObject(v1) &&
	    ('@id' in v1) &&
	    types.isObject(v2) &&
	    ('@id' in v2)) {
	    return v1['@id'] === v2['@id'];
	  }

	  return false;
	};

	/**
	 * Compares two strings first based on length and then lexicographically.
	 *
	 * @param a the first string.
	 * @param b the second string.
	 *
	 * @return -1 if a < b, 1 if a > b, 0 if a === b.
	 */
	api.compareShortestLeast = (a, b) => {
	  if(a.length < b.length) {
	    return -1;
	  }
	  if(b.length < a.length) {
	    return 1;
	  }
	  if(a === b) {
	    return 0;
	  }
	  return (a < b) ? -1 : 1;
	};

	/**
	 * Labels the blank nodes in the given value using the given IdentifierIssuer.
	 *
	 * @param issuer the IdentifierIssuer to use.
	 * @param element the element with blank nodes to rename.
	 *
	 * @return the element.
	 */
	function _labelBlankNodes(issuer, element) {
	  if(types.isArray(element)) {
	    for(let i = 0; i < element.length; ++i) {
	      element[i] = _labelBlankNodes(issuer, element[i]);
	    }
	  } else if(graphTypes.isList(element)) {
	    element['@list'] = _labelBlankNodes(issuer, element['@list']);
	  } else if(types.isObject(element)) {
	    // relabel blank node
	    if(graphTypes.isBlankNode(element)) {
	      element['@id'] = issuer.getId(element['@id']);
	    }

	    // recursively apply to all keys
	    const keys = Object.keys(element).sort();
	    for(let ki = 0; ki < keys.length; ++ki) {
	      const key = keys[ki];
	      if(key !== '@id') {
	        element[key] = _labelBlankNodes(issuer, element[key]);
	      }
	    }
	  }

	  return element;
	}
	return util;
}

/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */

var constants;
var hasRequiredConstants;

function requireConstants () {
	if (hasRequiredConstants) return constants;
	hasRequiredConstants = 1;

	const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
	const XSD = 'http://www.w3.org/2001/XMLSchema#';

	constants = {
	  // TODO: Deprecated and will be removed later. Use LINK_HEADER_CONTEXT.
	  LINK_HEADER_REL: 'http://www.w3.org/ns/json-ld#context',

	  LINK_HEADER_CONTEXT: 'http://www.w3.org/ns/json-ld#context',

	  RDF,
	  RDF_LIST: RDF + 'List',
	  RDF_FIRST: RDF + 'first',
	  RDF_REST: RDF + 'rest',
	  RDF_NIL: RDF + 'nil',
	  RDF_TYPE: RDF + 'type',
	  RDF_PLAIN_LITERAL: RDF + 'PlainLiteral',
	  RDF_XML_LITERAL: RDF + 'XMLLiteral',
	  RDF_JSON_LITERAL: RDF + 'JSON',
	  RDF_OBJECT: RDF + 'object',
	  RDF_LANGSTRING: RDF + 'langString',

	  XSD,
	  XSD_BOOLEAN: XSD + 'boolean',
	  XSD_DOUBLE: XSD + 'double',
	  XSD_INTEGER: XSD + 'integer',
	  XSD_STRING: XSD + 'string',
	};
	return constants;
}

/*
 * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.
 */

var RequestQueue_1;
var hasRequiredRequestQueue;

function requireRequestQueue () {
	if (hasRequiredRequestQueue) return RequestQueue_1;
	hasRequiredRequestQueue = 1;

	RequestQueue_1 = class RequestQueue {
	  /**
	   * Creates a simple queue for requesting documents.
	   */
	  constructor() {
	    this._requests = {};
	  }

	  wrapLoader(loader) {
	    const self = this;
	    self._loader = loader;
	    return function(/* url */) {
	      return self.add.apply(self, arguments);
	    };
	  }

	  async add(url) {
	    let promise = this._requests[url];
	    if(promise) {
	      // URL already queued, wait for it to load
	      return Promise.resolve(promise);
	    }

	    // queue URL and load it
	    promise = this._requests[url] = this._loader(url);

	    try {
	      return await promise;
	    } finally {
	      delete this._requests[url];
	    }
	  }
	};
	return RequestQueue_1;
}

/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */

var url;
var hasRequiredUrl;

function requireUrl () {
	if (hasRequiredUrl) return url;
	hasRequiredUrl = 1;

	const types = /*@__PURE__*/ requireTypes();

	const api = {};
	url = api;

	// define URL parser
	// parseUri 1.2.2
	// (c) Steven Levithan <stevenlevithan.com>
	// MIT License
	// with local jsonld.js modifications
	api.parsers = {
	  simple: {
	    // RFC 3986 basic parts
	    keys: [
	      'href', 'scheme', 'authority', 'path', 'query', 'fragment'
	    ],
	    /* eslint-disable-next-line max-len */
	    regex: /^(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/
	  },
	  full: {
	    keys: [
	      'href', 'protocol', 'scheme', 'authority', 'auth', 'user', 'password',
	      'hostname', 'port', 'path', 'directory', 'file', 'query', 'fragment'
	    ],
	    /* eslint-disable-next-line max-len */
	    regex: /^(([a-zA-Z][a-zA-Z0-9+-.]*):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?(?:(((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/
	  }
	};
	api.parse = (str, parser) => {
	  const parsed = {};
	  const o = api.parsers[parser || 'full'];
	  const m = o.regex.exec(str);
	  let i = o.keys.length;
	  while(i--) {
	    parsed[o.keys[i]] = (m[i] === undefined) ? null : m[i];
	  }

	  // remove default ports in found in URLs
	  if((parsed.scheme === 'https' && parsed.port === '443') ||
	    (parsed.scheme === 'http' && parsed.port === '80')) {
	    parsed.href = parsed.href.replace(':' + parsed.port, '');
	    parsed.authority = parsed.authority.replace(':' + parsed.port, '');
	    parsed.port = null;
	  }

	  parsed.normalizedPath = api.removeDotSegments(parsed.path);
	  return parsed;
	};

	/**
	 * Prepends a base IRI to the given relative IRI.
	 *
	 * @param base the base IRI.
	 * @param iri the relative IRI.
	 *
	 * @return the absolute IRI.
	 */
	api.prependBase = (base, iri) => {
	  // skip IRI processing
	  if(base === null) {
	    return iri;
	  }
	  // already an absolute IRI
	  if(api.isAbsolute(iri)) {
	    return iri;
	  }

	  // parse base if it is a string
	  if(!base || types.isString(base)) {
	    base = api.parse(base || '');
	  }

	  // parse given IRI
	  const rel = api.parse(iri);

	  // per RFC3986 5.2.2
	  const transform = {
	    protocol: base.protocol || ''
	  };

	  if(rel.authority !== null) {
	    transform.authority = rel.authority;
	    transform.path = rel.path;
	    transform.query = rel.query;
	  } else {
	    transform.authority = base.authority;

	    if(rel.path === '') {
	      transform.path = base.path;
	      if(rel.query !== null) {
	        transform.query = rel.query;
	      } else {
	        transform.query = base.query;
	      }
	    } else {
	      if(rel.path.indexOf('/') === 0) {
	        // IRI represents an absolute path
	        transform.path = rel.path;
	      } else {
	        // merge paths
	        let path = base.path;

	        // append relative path to the end of the last directory from base
	        path = path.substr(0, path.lastIndexOf('/') + 1);
	        if((path.length > 0 || base.authority) && path.substr(-1) !== '/') {
	          path += '/';
	        }
	        path += rel.path;

	        transform.path = path;
	      }
	      transform.query = rel.query;
	    }
	  }

	  if(rel.path !== '') {
	    // remove slashes and dots in path
	    transform.path = api.removeDotSegments(transform.path);
	  }

	  // construct URL
	  let rval = transform.protocol;
	  if(transform.authority !== null) {
	    rval += '//' + transform.authority;
	  }
	  rval += transform.path;
	  if(transform.query !== null) {
	    rval += '?' + transform.query;
	  }
	  if(rel.fragment !== null) {
	    rval += '#' + rel.fragment;
	  }

	  // handle empty base
	  if(rval === '') {
	    rval = './';
	  }

	  return rval;
	};

	/**
	 * Removes a base IRI from the given absolute IRI.
	 *
	 * @param base the base IRI.
	 * @param iri the absolute IRI.
	 *
	 * @return the relative IRI if relative to base, otherwise the absolute IRI.
	 */
	api.removeBase = (base, iri) => {
	  // skip IRI processing
	  if(base === null) {
	    return iri;
	  }

	  if(!base || types.isString(base)) {
	    base = api.parse(base || '');
	  }

	  // establish base root
	  let root = '';
	  if(base.href !== '') {
	    root += (base.protocol || '') + '//' + (base.authority || '');
	  } else if(iri.indexOf('//')) {
	    // support network-path reference with empty base
	    root += '//';
	  }

	  // IRI not relative to base
	  if(iri.indexOf(root) !== 0) {
	    return iri;
	  }

	  // remove root from IRI and parse remainder
	  const rel = api.parse(iri.substr(root.length));

	  // remove path segments that match (do not remove last segment unless there
	  // is a hash or query)
	  const baseSegments = base.normalizedPath.split('/');
	  const iriSegments = rel.normalizedPath.split('/');
	  const last = (rel.fragment || rel.query) ? 0 : 1;
	  while(baseSegments.length > 0 && iriSegments.length > last) {
	    if(baseSegments[0] !== iriSegments[0]) {
	      break;
	    }
	    baseSegments.shift();
	    iriSegments.shift();
	  }

	  // use '../' for each non-matching base segment
	  let rval = '';
	  if(baseSegments.length > 0) {
	    // don't count the last segment (if it ends with '/' last path doesn't
	    // count and if it doesn't end with '/' it isn't a path)
	    baseSegments.pop();
	    for(let i = 0; i < baseSegments.length; ++i) {
	      rval += '../';
	    }
	  }

	  // prepend remaining segments
	  rval += iriSegments.join('/');

	  // add query and hash
	  if(rel.query !== null) {
	    rval += '?' + rel.query;
	  }
	  if(rel.fragment !== null) {
	    rval += '#' + rel.fragment;
	  }

	  // handle empty base
	  if(rval === '') {
	    rval = './';
	  }

	  return rval;
	};

	/**
	 * Removes dot segments from a URL path.
	 *
	 * @param path the path to remove dot segments from.
	 */
	api.removeDotSegments = path => {
	  // RFC 3986 5.2.4 (reworked)

	  // empty path shortcut
	  if(path.length === 0) {
	    return '';
	  }

	  const input = path.split('/');
	  const output = [];

	  while(input.length > 0) {
	    const next = input.shift();
	    const done = input.length === 0;

	    if(next === '.') {
	      if(done) {
	        // ensure output has trailing /
	        output.push('');
	      }
	      continue;
	    }

	    if(next === '..') {
	      output.pop();
	      if(done) {
	        // ensure output has trailing /
	        output.push('');
	      }
	      continue;
	    }

	    output.push(next);
	  }

	  // if path was absolute, ensure output has leading /
	  if(path[0] === '/' && output.length > 0 && output[0] !== '') {
	    output.unshift('');
	  }
	  if(output.length === 1 && output[0] === '') {
	    return '/';
	  }

	  return output.join('/');
	};

	// TODO: time better isAbsolute/isRelative checks using full regexes:
	// http://jmrware.com/articles/2009/uri_regexp/URI_regex.html

	// regex to check for absolute IRI (starting scheme and ':') or blank node IRI
	const isAbsoluteRegex = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^\s]*$/;

	/**
	 * Returns true if the given value is an absolute IRI or blank node IRI, false
	 * if not.
	 * Note: This weak check only checks for a correct starting scheme.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is an absolute IRI, false if not.
	 */
	api.isAbsolute = v => types.isString(v) && isAbsoluteRegex.test(v);

	/**
	 * Returns true if the given value is a relative IRI, false if not.
	 * Note: this is a weak check.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a relative IRI, false if not.
	 */
	api.isRelative = v => types.isString(v);
	return url;
}

/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */

var xhr;
var hasRequiredXhr;

function requireXhr () {
	if (hasRequiredXhr) return xhr;
	hasRequiredXhr = 1;

	const {parseLinkHeader, buildHeaders} = /*@__PURE__*/ requireUtil();
	const {LINK_HEADER_CONTEXT} = /*@__PURE__*/ requireConstants();
	const JsonLdError = /*@__PURE__*/ requireJsonLdError();
	const RequestQueue = /*@__PURE__*/ requireRequestQueue();
	const {prependBase} = /*@__PURE__*/ requireUrl();

	const REGEX_LINK_HEADER = /(^|(\r\n))link:/i;

	/**
	 * Creates a built-in XMLHttpRequest document loader.
	 *
	 * @param options the options to use:
	 *          secure: require all URLs to use HTTPS.
	 *          headers: an object (map) of headers which will be passed as request
	 *            headers for the requested document. Accept is not allowed.
	 *          [xhr]: the XMLHttpRequest API to use.
	 *
	 * @return the XMLHttpRequest document loader.
	 */
	xhr = ({
	  secure,
	  headers = {},
	  xhr
	} = {headers: {}}) => {
	  headers = buildHeaders(headers);
	  const queue = new RequestQueue();
	  return queue.wrapLoader(loader);

	  async function loader(url) {
	    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {
	      throw new JsonLdError(
	        'URL could not be dereferenced; only "http" and "https" URLs are ' +
	        'supported.',
	        'jsonld.InvalidUrl', {code: 'loading document failed', url});
	    }
	    if(secure && url.indexOf('https') !== 0) {
	      throw new JsonLdError(
	        'URL could not be dereferenced; secure mode is enabled and ' +
	        'the URL\'s scheme is not "https".',
	        'jsonld.InvalidUrl', {code: 'loading document failed', url});
	    }

	    let req;
	    try {
	      req = await _get(xhr, url, headers);
	    } catch(e) {
	      throw new JsonLdError(
	        'URL could not be dereferenced, an error occurred.',
	        'jsonld.LoadDocumentError',
	        {code: 'loading document failed', url, cause: e});
	    }

	    if(req.status >= 400) {
	      throw new JsonLdError(
	        'URL could not be dereferenced: ' + req.statusText,
	        'jsonld.LoadDocumentError', {
	          code: 'loading document failed',
	          url,
	          httpStatusCode: req.status
	        });
	    }

	    let doc = {contextUrl: null, documentUrl: url, document: req.response};
	    let alternate = null;

	    // handle Link Header (avoid unsafe header warning by existence testing)
	    const contentType = req.getResponseHeader('Content-Type');
	    let linkHeader;
	    if(REGEX_LINK_HEADER.test(req.getAllResponseHeaders())) {
	      linkHeader = req.getResponseHeader('Link');
	    }
	    if(linkHeader && contentType !== 'application/ld+json') {
	      // only 1 related link header permitted
	      const linkHeaders = parseLinkHeader(linkHeader);
	      const linkedContext = linkHeaders[LINK_HEADER_CONTEXT];
	      if(Array.isArray(linkedContext)) {
	        throw new JsonLdError(
	          'URL could not be dereferenced, it has more than one ' +
	          'associated HTTP Link Header.',
	          'jsonld.InvalidUrl',
	          {code: 'multiple context link headers', url});
	      }
	      if(linkedContext) {
	        doc.contextUrl = linkedContext.target;
	      }

	      // "alternate" link header is a redirect
	      alternate = linkHeaders.alternate;
	      if(alternate &&
	        alternate.type == 'application/ld+json' &&
	        !(contentType || '').match(/^application\/(\w*\+)?json$/)) {
	        doc = await loader(prependBase(url, alternate.target));
	      }
	    }

	    return doc;
	  }
	};

	function _get(xhr, url, headers) {
	  xhr = xhr || XMLHttpRequest;
	  const req = new xhr();
	  return new Promise((resolve, reject) => {
	    req.onload = () => resolve(req);
	    req.onerror = err => reject(err);
	    req.open('GET', url, true);
	    for(const k in headers) {
	      req.setRequestHeader(k, headers[k]);
	    }
	    req.send();
	  });
	}
	return xhr;
}

/*
 * Copyright (c) 2021 Digital Bazaar, Inc. All rights reserved.
 */

var platformBrowser;
var hasRequiredPlatformBrowser;

function requirePlatformBrowser () {
	if (hasRequiredPlatformBrowser) return platformBrowser;
	hasRequiredPlatformBrowser = 1;

	const xhrLoader = /*@__PURE__*/ requireXhr();

	const api = {};
	platformBrowser = api;

	/**
	 * Setup browser document loaders.
	 *
	 * @param jsonld the jsonld api.
	 */
	api.setupDocumentLoaders = function(jsonld) {
	  if(typeof XMLHttpRequest !== 'undefined') {
	    jsonld.documentLoaders.xhr = xhrLoader;
	    // use xhr document loader by default
	    jsonld.useDocumentLoader('xhr');
	  }
	};

	/**
	 * Setup browser globals.
	 *
	 * @param jsonld the jsonld api.
	 */
	api.setupGlobals = function(jsonld) {
	  // setup browser global JsonLdProcessor
	  if(typeof globalThis.JsonLdProcessor === 'undefined') {
	    Object.defineProperty(globalThis, 'JsonLdProcessor', {
	      writable: true,
	      enumerable: false,
	      configurable: true,
	      value: jsonld.JsonLdProcessor
	    });
	  }
	};
	return platformBrowser;
}

var yallist;
var hasRequiredYallist;

function requireYallist () {
	if (hasRequiredYallist) return yallist;
	hasRequiredYallist = 1;
	yallist = Yallist;

	Yallist.Node = Node;
	Yallist.create = Yallist;

	function Yallist (list) {
	  var self = this;
	  if (!(self instanceof Yallist)) {
	    self = new Yallist();
	  }

	  self.tail = null;
	  self.head = null;
	  self.length = 0;

	  if (list && typeof list.forEach === 'function') {
	    list.forEach(function (item) {
	      self.push(item);
	    });
	  } else if (arguments.length > 0) {
	    for (var i = 0, l = arguments.length; i < l; i++) {
	      self.push(arguments[i]);
	    }
	  }

	  return self
	}

	Yallist.prototype.removeNode = function (node) {
	  if (node.list !== this) {
	    throw new Error('removing node which does not belong to this list')
	  }

	  var next = node.next;
	  var prev = node.prev;

	  if (next) {
	    next.prev = prev;
	  }

	  if (prev) {
	    prev.next = next;
	  }

	  if (node === this.head) {
	    this.head = next;
	  }
	  if (node === this.tail) {
	    this.tail = prev;
	  }

	  node.list.length--;
	  node.next = null;
	  node.prev = null;
	  node.list = null;

	  return next
	};

	Yallist.prototype.unshiftNode = function (node) {
	  if (node === this.head) {
	    return
	  }

	  if (node.list) {
	    node.list.removeNode(node);
	  }

	  var head = this.head;
	  node.list = this;
	  node.next = head;
	  if (head) {
	    head.prev = node;
	  }

	  this.head = node;
	  if (!this.tail) {
	    this.tail = node;
	  }
	  this.length++;
	};

	Yallist.prototype.pushNode = function (node) {
	  if (node === this.tail) {
	    return
	  }

	  if (node.list) {
	    node.list.removeNode(node);
	  }

	  var tail = this.tail;
	  node.list = this;
	  node.prev = tail;
	  if (tail) {
	    tail.next = node;
	  }

	  this.tail = node;
	  if (!this.head) {
	    this.head = node;
	  }
	  this.length++;
	};

	Yallist.prototype.push = function () {
	  for (var i = 0, l = arguments.length; i < l; i++) {
	    push(this, arguments[i]);
	  }
	  return this.length
	};

	Yallist.prototype.unshift = function () {
	  for (var i = 0, l = arguments.length; i < l; i++) {
	    unshift(this, arguments[i]);
	  }
	  return this.length
	};

	Yallist.prototype.pop = function () {
	  if (!this.tail) {
	    return undefined
	  }

	  var res = this.tail.value;
	  this.tail = this.tail.prev;
	  if (this.tail) {
	    this.tail.next = null;
	  } else {
	    this.head = null;
	  }
	  this.length--;
	  return res
	};

	Yallist.prototype.shift = function () {
	  if (!this.head) {
	    return undefined
	  }

	  var res = this.head.value;
	  this.head = this.head.next;
	  if (this.head) {
	    this.head.prev = null;
	  } else {
	    this.tail = null;
	  }
	  this.length--;
	  return res
	};

	Yallist.prototype.forEach = function (fn, thisp) {
	  thisp = thisp || this;
	  for (var walker = this.head, i = 0; walker !== null; i++) {
	    fn.call(thisp, walker.value, i, this);
	    walker = walker.next;
	  }
	};

	Yallist.prototype.forEachReverse = function (fn, thisp) {
	  thisp = thisp || this;
	  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
	    fn.call(thisp, walker.value, i, this);
	    walker = walker.prev;
	  }
	};

	Yallist.prototype.get = function (n) {
	  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
	    // abort out of the list early if we hit a cycle
	    walker = walker.next;
	  }
	  if (i === n && walker !== null) {
	    return walker.value
	  }
	};

	Yallist.prototype.getReverse = function (n) {
	  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
	    // abort out of the list early if we hit a cycle
	    walker = walker.prev;
	  }
	  if (i === n && walker !== null) {
	    return walker.value
	  }
	};

	Yallist.prototype.map = function (fn, thisp) {
	  thisp = thisp || this;
	  var res = new Yallist();
	  for (var walker = this.head; walker !== null;) {
	    res.push(fn.call(thisp, walker.value, this));
	    walker = walker.next;
	  }
	  return res
	};

	Yallist.prototype.mapReverse = function (fn, thisp) {
	  thisp = thisp || this;
	  var res = new Yallist();
	  for (var walker = this.tail; walker !== null;) {
	    res.push(fn.call(thisp, walker.value, this));
	    walker = walker.prev;
	  }
	  return res
	};

	Yallist.prototype.reduce = function (fn, initial) {
	  var acc;
	  var walker = this.head;
	  if (arguments.length > 1) {
	    acc = initial;
	  } else if (this.head) {
	    walker = this.head.next;
	    acc = this.head.value;
	  } else {
	    throw new TypeError('Reduce of empty list with no initial value')
	  }

	  for (var i = 0; walker !== null; i++) {
	    acc = fn(acc, walker.value, i);
	    walker = walker.next;
	  }

	  return acc
	};

	Yallist.prototype.reduceReverse = function (fn, initial) {
	  var acc;
	  var walker = this.tail;
	  if (arguments.length > 1) {
	    acc = initial;
	  } else if (this.tail) {
	    walker = this.tail.prev;
	    acc = this.tail.value;
	  } else {
	    throw new TypeError('Reduce of empty list with no initial value')
	  }

	  for (var i = this.length - 1; walker !== null; i--) {
	    acc = fn(acc, walker.value, i);
	    walker = walker.prev;
	  }

	  return acc
	};

	Yallist.prototype.toArray = function () {
	  var arr = new Array(this.length);
	  for (var i = 0, walker = this.head; walker !== null; i++) {
	    arr[i] = walker.value;
	    walker = walker.next;
	  }
	  return arr
	};

	Yallist.prototype.toArrayReverse = function () {
	  var arr = new Array(this.length);
	  for (var i = 0, walker = this.tail; walker !== null; i++) {
	    arr[i] = walker.value;
	    walker = walker.prev;
	  }
	  return arr
	};

	Yallist.prototype.slice = function (from, to) {
	  to = to || this.length;
	  if (to < 0) {
	    to += this.length;
	  }
	  from = from || 0;
	  if (from < 0) {
	    from += this.length;
	  }
	  var ret = new Yallist();
	  if (to < from || to < 0) {
	    return ret
	  }
	  if (from < 0) {
	    from = 0;
	  }
	  if (to > this.length) {
	    to = this.length;
	  }
	  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
	    walker = walker.next;
	  }
	  for (; walker !== null && i < to; i++, walker = walker.next) {
	    ret.push(walker.value);
	  }
	  return ret
	};

	Yallist.prototype.sliceReverse = function (from, to) {
	  to = to || this.length;
	  if (to < 0) {
	    to += this.length;
	  }
	  from = from || 0;
	  if (from < 0) {
	    from += this.length;
	  }
	  var ret = new Yallist();
	  if (to < from || to < 0) {
	    return ret
	  }
	  if (from < 0) {
	    from = 0;
	  }
	  if (to > this.length) {
	    to = this.length;
	  }
	  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
	    walker = walker.prev;
	  }
	  for (; walker !== null && i > from; i--, walker = walker.prev) {
	    ret.push(walker.value);
	  }
	  return ret
	};

	Yallist.prototype.splice = function (start, deleteCount, ...nodes) {
	  if (start > this.length) {
	    start = this.length - 1;
	  }
	  if (start < 0) {
	    start = this.length + start;
	  }

	  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
	    walker = walker.next;
	  }

	  var ret = [];
	  for (var i = 0; walker && i < deleteCount; i++) {
	    ret.push(walker.value);
	    walker = this.removeNode(walker);
	  }
	  if (walker === null) {
	    walker = this.tail;
	  }

	  if (walker !== this.head && walker !== this.tail) {
	    walker = walker.prev;
	  }

	  for (var i = 0; i < nodes.length; i++) {
	    walker = insert(this, walker, nodes[i]);
	  }
	  return ret;
	};

	Yallist.prototype.reverse = function () {
	  var head = this.head;
	  var tail = this.tail;
	  for (var walker = head; walker !== null; walker = walker.prev) {
	    var p = walker.prev;
	    walker.prev = walker.next;
	    walker.next = p;
	  }
	  this.head = tail;
	  this.tail = head;
	  return this
	};

	function insert (self, node, value) {
	  var inserted = node === self.head ?
	    new Node(value, null, node, self) :
	    new Node(value, node, node.next, self);

	  if (inserted.next === null) {
	    self.tail = inserted;
	  }
	  if (inserted.prev === null) {
	    self.head = inserted;
	  }

	  self.length++;

	  return inserted
	}

	function push (self, item) {
	  self.tail = new Node(item, self.tail, null, self);
	  if (!self.head) {
	    self.head = self.tail;
	  }
	  self.length++;
	}

	function unshift (self, item) {
	  self.head = new Node(item, null, self.head, self);
	  if (!self.tail) {
	    self.tail = self.head;
	  }
	  self.length++;
	}

	function Node (value, prev, next, list) {
	  if (!(this instanceof Node)) {
	    return new Node(value, prev, next, list)
	  }

	  this.list = list;
	  this.value = value;

	  if (prev) {
	    prev.next = this;
	    this.prev = prev;
	  } else {
	    this.prev = null;
	  }

	  if (next) {
	    next.prev = this;
	    this.next = next;
	  } else {
	    this.next = null;
	  }
	}
	return yallist;
}

var lruCache;
var hasRequiredLruCache;

function requireLruCache () {
	if (hasRequiredLruCache) return lruCache;
	hasRequiredLruCache = 1;

	// A linked list to keep track of recently-used-ness
	const Yallist = /*@__PURE__*/ requireYallist();

	const MAX = Symbol('max');
	const LENGTH = Symbol('length');
	const LENGTH_CALCULATOR = Symbol('lengthCalculator');
	const ALLOW_STALE = Symbol('allowStale');
	const MAX_AGE = Symbol('maxAge');
	const DISPOSE = Symbol('dispose');
	const NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');
	const LRU_LIST = Symbol('lruList');
	const CACHE = Symbol('cache');
	const UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');

	const naiveLength = () => 1;

	// lruList is a yallist where the head is the youngest
	// item, and the tail is the oldest.  the list contains the Hit
	// objects as the entries.
	// Each Hit object has a reference to its Yallist.Node.  This
	// never changes.
	//
	// cache is a Map (or PseudoMap) that matches the keys to
	// the Yallist.Node object.
	class LRUCache {
	  constructor (options) {
	    if (typeof options === 'number')
	      options = { max: options };

	    if (!options)
	      options = {};

	    if (options.max && (typeof options.max !== 'number' || options.max < 0))
	      throw new TypeError('max must be a non-negative number')
	    // Kind of weird to have a default max of Infinity, but oh well.
	    this[MAX] = options.max || Infinity;

	    const lc = options.length || naiveLength;
	    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc;
	    this[ALLOW_STALE] = options.stale || false;
	    if (options.maxAge && typeof options.maxAge !== 'number')
	      throw new TypeError('maxAge must be a number')
	    this[MAX_AGE] = options.maxAge || 0;
	    this[DISPOSE] = options.dispose;
	    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
	    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
	    this.reset();
	  }

	  // resize the cache when the max changes.
	  set max (mL) {
	    if (typeof mL !== 'number' || mL < 0)
	      throw new TypeError('max must be a non-negative number')

	    this[MAX] = mL || Infinity;
	    trim(this);
	  }
	  get max () {
	    return this[MAX]
	  }

	  set allowStale (allowStale) {
	    this[ALLOW_STALE] = !!allowStale;
	  }
	  get allowStale () {
	    return this[ALLOW_STALE]
	  }

	  set maxAge (mA) {
	    if (typeof mA !== 'number')
	      throw new TypeError('maxAge must be a non-negative number')

	    this[MAX_AGE] = mA;
	    trim(this);
	  }
	  get maxAge () {
	    return this[MAX_AGE]
	  }

	  // resize the cache when the lengthCalculator changes.
	  set lengthCalculator (lC) {
	    if (typeof lC !== 'function')
	      lC = naiveLength;

	    if (lC !== this[LENGTH_CALCULATOR]) {
	      this[LENGTH_CALCULATOR] = lC;
	      this[LENGTH] = 0;
	      this[LRU_LIST].forEach(hit => {
	        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
	        this[LENGTH] += hit.length;
	      });
	    }
	    trim(this);
	  }
	  get lengthCalculator () { return this[LENGTH_CALCULATOR] }

	  get length () { return this[LENGTH] }
	  get itemCount () { return this[LRU_LIST].length }

	  rforEach (fn, thisp) {
	    thisp = thisp || this;
	    for (let walker = this[LRU_LIST].tail; walker !== null;) {
	      const prev = walker.prev;
	      forEachStep(this, fn, walker, thisp);
	      walker = prev;
	    }
	  }

	  forEach (fn, thisp) {
	    thisp = thisp || this;
	    for (let walker = this[LRU_LIST].head; walker !== null;) {
	      const next = walker.next;
	      forEachStep(this, fn, walker, thisp);
	      walker = next;
	    }
	  }

	  keys () {
	    return this[LRU_LIST].toArray().map(k => k.key)
	  }

	  values () {
	    return this[LRU_LIST].toArray().map(k => k.value)
	  }

	  reset () {
	    if (this[DISPOSE] &&
	        this[LRU_LIST] &&
	        this[LRU_LIST].length) {
	      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value));
	    }

	    this[CACHE] = new Map(); // hash of items by key
	    this[LRU_LIST] = new Yallist(); // list of items in order of use recency
	    this[LENGTH] = 0; // length of items in the list
	  }

	  dump () {
	    return this[LRU_LIST].map(hit =>
	      isStale(this, hit) ? false : {
	        k: hit.key,
	        v: hit.value,
	        e: hit.now + (hit.maxAge || 0)
	      }).toArray().filter(h => h)
	  }

	  dumpLru () {
	    return this[LRU_LIST]
	  }

	  set (key, value, maxAge) {
	    maxAge = maxAge || this[MAX_AGE];

	    if (maxAge && typeof maxAge !== 'number')
	      throw new TypeError('maxAge must be a number')

	    const now = maxAge ? Date.now() : 0;
	    const len = this[LENGTH_CALCULATOR](value, key);

	    if (this[CACHE].has(key)) {
	      if (len > this[MAX]) {
	        del(this, this[CACHE].get(key));
	        return false
	      }

	      const node = this[CACHE].get(key);
	      const item = node.value;

	      // dispose of the old one before overwriting
	      // split out into 2 ifs for better coverage tracking
	      if (this[DISPOSE]) {
	        if (!this[NO_DISPOSE_ON_SET])
	          this[DISPOSE](key, item.value);
	      }

	      item.now = now;
	      item.maxAge = maxAge;
	      item.value = value;
	      this[LENGTH] += len - item.length;
	      item.length = len;
	      this.get(key);
	      trim(this);
	      return true
	    }

	    const hit = new Entry(key, value, len, now, maxAge);

	    // oversized objects fall out of cache automatically.
	    if (hit.length > this[MAX]) {
	      if (this[DISPOSE])
	        this[DISPOSE](key, value);

	      return false
	    }

	    this[LENGTH] += hit.length;
	    this[LRU_LIST].unshift(hit);
	    this[CACHE].set(key, this[LRU_LIST].head);
	    trim(this);
	    return true
	  }

	  has (key) {
	    if (!this[CACHE].has(key)) return false
	    const hit = this[CACHE].get(key).value;
	    return !isStale(this, hit)
	  }

	  get (key) {
	    return get(this, key, true)
	  }

	  peek (key) {
	    return get(this, key, false)
	  }

	  pop () {
	    const node = this[LRU_LIST].tail;
	    if (!node)
	      return null

	    del(this, node);
	    return node.value
	  }

	  del (key) {
	    del(this, this[CACHE].get(key));
	  }

	  load (arr) {
	    // reset the cache
	    this.reset();

	    const now = Date.now();
	    // A previous serialized cache has the most recent items first
	    for (let l = arr.length - 1; l >= 0; l--) {
	      const hit = arr[l];
	      const expiresAt = hit.e || 0;
	      if (expiresAt === 0)
	        // the item was created without expiration in a non aged cache
	        this.set(hit.k, hit.v);
	      else {
	        const maxAge = expiresAt - now;
	        // dont add already expired items
	        if (maxAge > 0) {
	          this.set(hit.k, hit.v, maxAge);
	        }
	      }
	    }
	  }

	  prune () {
	    this[CACHE].forEach((value, key) => get(this, key, false));
	  }
	}

	const get = (self, key, doUse) => {
	  const node = self[CACHE].get(key);
	  if (node) {
	    const hit = node.value;
	    if (isStale(self, hit)) {
	      del(self, node);
	      if (!self[ALLOW_STALE])
	        return undefined
	    } else {
	      if (doUse) {
	        if (self[UPDATE_AGE_ON_GET])
	          node.value.now = Date.now();
	        self[LRU_LIST].unshiftNode(node);
	      }
	    }
	    return hit.value
	  }
	};

	const isStale = (self, hit) => {
	  if (!hit || (!hit.maxAge && !self[MAX_AGE]))
	    return false

	  const diff = Date.now() - hit.now;
	  return hit.maxAge ? diff > hit.maxAge
	    : self[MAX_AGE] && (diff > self[MAX_AGE])
	};

	const trim = self => {
	  if (self[LENGTH] > self[MAX]) {
	    for (let walker = self[LRU_LIST].tail;
	      self[LENGTH] > self[MAX] && walker !== null;) {
	      // We know that we're about to delete this one, and also
	      // what the next least recently used key will be, so just
	      // go ahead and set it now.
	      const prev = walker.prev;
	      del(self, walker);
	      walker = prev;
	    }
	  }
	};

	const del = (self, node) => {
	  if (node) {
	    const hit = node.value;
	    if (self[DISPOSE])
	      self[DISPOSE](hit.key, hit.value);

	    self[LENGTH] -= hit.length;
	    self[CACHE].delete(hit.key);
	    self[LRU_LIST].removeNode(node);
	  }
	};

	class Entry {
	  constructor (key, value, length, now, maxAge) {
	    this.key = key;
	    this.value = value;
	    this.length = length;
	    this.now = now;
	    this.maxAge = maxAge || 0;
	  }
	}

	const forEachStep = (self, fn, node, thisp) => {
	  let hit = node.value;
	  if (isStale(self, hit)) {
	    del(self, node);
	    if (!self[ALLOW_STALE])
	      hit = undefined;
	  }
	  if (hit)
	    fn.call(thisp, hit.value, hit.key, self);
	};

	lruCache = LRUCache;
	return lruCache;
}

/*
 * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.
 */

var ResolvedContext_1;
var hasRequiredResolvedContext;

function requireResolvedContext () {
	if (hasRequiredResolvedContext) return ResolvedContext_1;
	hasRequiredResolvedContext = 1;

	const LRU = /*@__PURE__*/ requireLruCache();

	const MAX_ACTIVE_CONTEXTS = 10;

	ResolvedContext_1 = class ResolvedContext {
	  /**
	   * Creates a ResolvedContext.
	   *
	   * @param document the context document.
	   */
	  constructor({document}) {
	    this.document = document;
	    // TODO: enable customization of processed context cache
	    // TODO: limit based on size of processed contexts vs. number of them
	    this.cache = new LRU({max: MAX_ACTIVE_CONTEXTS});
	  }

	  getProcessed(activeCtx) {
	    return this.cache.get(activeCtx);
	  }

	  setProcessed(activeCtx, processedCtx) {
	    this.cache.set(activeCtx, processedCtx);
	  }
	};
	return ResolvedContext_1;
}

/*
 * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.
 */

var ContextResolver_1;
var hasRequiredContextResolver;

function requireContextResolver () {
	if (hasRequiredContextResolver) return ContextResolver_1;
	hasRequiredContextResolver = 1;

	const {
	  isArray: _isArray,
	  isObject: _isObject,
	  isString: _isString,
	} = /*@__PURE__*/ requireTypes();
	const {
	  asArray: _asArray
	} = /*@__PURE__*/ requireUtil();
	const {prependBase} = /*@__PURE__*/ requireUrl();
	const JsonLdError = /*@__PURE__*/ requireJsonLdError();
	const ResolvedContext = /*@__PURE__*/ requireResolvedContext();

	const MAX_CONTEXT_URLS = 10;

	ContextResolver_1 = class ContextResolver {
	  /**
	   * Creates a ContextResolver.
	   *
	   * @param sharedCache a shared LRU cache with `get` and `set` APIs.
	   */
	  constructor({sharedCache}) {
	    this.perOpCache = new Map();
	    this.sharedCache = sharedCache;
	  }

	  async resolve({
	    activeCtx, context, documentLoader, base, cycles = new Set()
	  }) {
	    // process `@context`
	    if(context && _isObject(context) && context['@context']) {
	      context = context['@context'];
	    }

	    // context is one or more contexts
	    context = _asArray(context);

	    // resolve each context in the array
	    const allResolved = [];
	    for(const ctx of context) {
	      if(_isString(ctx)) {
	        // see if `ctx` has been resolved before...
	        let resolved = this._get(ctx);
	        if(!resolved) {
	          // not resolved yet, resolve
	          resolved = await this._resolveRemoteContext(
	            {activeCtx, url: ctx, documentLoader, base, cycles});
	        }

	        // add to output and continue
	        if(_isArray(resolved)) {
	          allResolved.push(...resolved);
	        } else {
	          allResolved.push(resolved);
	        }
	        continue;
	      }
	      if(ctx === null) {
	        // handle `null` context, nothing to cache
	        allResolved.push(new ResolvedContext({document: null}));
	        continue;
	      }
	      if(!_isObject(ctx)) {
	        _throwInvalidLocalContext(context);
	      }
	      // context is an object, get/create `ResolvedContext` for it
	      const key = JSON.stringify(ctx);
	      let resolved = this._get(key);
	      if(!resolved) {
	        // create a new static `ResolvedContext` and cache it
	        resolved = new ResolvedContext({document: ctx});
	        this._cacheResolvedContext({key, resolved, tag: 'static'});
	      }
	      allResolved.push(resolved);
	    }

	    return allResolved;
	  }

	  _get(key) {
	    // get key from per operation cache; no `tag` is used with this cache so
	    // any retrieved context will always be the same during a single operation
	    let resolved = this.perOpCache.get(key);
	    if(!resolved) {
	      // see if the shared cache has a `static` entry for this URL
	      const tagMap = this.sharedCache.get(key);
	      if(tagMap) {
	        resolved = tagMap.get('static');
	        if(resolved) {
	          this.perOpCache.set(key, resolved);
	        }
	      }
	    }
	    return resolved;
	  }

	  _cacheResolvedContext({key, resolved, tag}) {
	    this.perOpCache.set(key, resolved);
	    if(tag !== undefined) {
	      let tagMap = this.sharedCache.get(key);
	      if(!tagMap) {
	        tagMap = new Map();
	        this.sharedCache.set(key, tagMap);
	      }
	      tagMap.set(tag, resolved);
	    }
	    return resolved;
	  }

	  async _resolveRemoteContext({activeCtx, url, documentLoader, base, cycles}) {
	    // resolve relative URL and fetch context
	    url = prependBase(base, url);
	    const {context, remoteDoc} = await this._fetchContext(
	      {activeCtx, url, documentLoader, cycles});

	    // update base according to remote document and resolve any relative URLs
	    base = remoteDoc.documentUrl || url;
	    _resolveContextUrls({context, base});

	    // resolve, cache, and return context
	    const resolved = await this.resolve(
	      {activeCtx, context, documentLoader, base, cycles});
	    this._cacheResolvedContext({key: url, resolved, tag: remoteDoc.tag});
	    return resolved;
	  }

	  async _fetchContext({activeCtx, url, documentLoader, cycles}) {
	    // check for max context URLs fetched during a resolve operation
	    if(cycles.size > MAX_CONTEXT_URLS) {
	      throw new JsonLdError(
	        'Maximum number of @context URLs exceeded.',
	        'jsonld.ContextUrlError',
	        {
	          code: activeCtx.processingMode === 'json-ld-1.0' ?
	            'loading remote context failed' :
	            'context overflow',
	          max: MAX_CONTEXT_URLS
	        });
	    }

	    // check for context URL cycle
	    // shortcut to avoid extra work that would eventually hit the max above
	    if(cycles.has(url)) {
	      throw new JsonLdError(
	        'Cyclical @context URLs detected.',
	        'jsonld.ContextUrlError',
	        {
	          code: activeCtx.processingMode === 'json-ld-1.0' ?
	            'recursive context inclusion' :
	            'context overflow',
	          url
	        });
	    }

	    // track cycles
	    cycles.add(url);

	    let context;
	    let remoteDoc;

	    try {
	      remoteDoc = await documentLoader(url);
	      context = remoteDoc.document || null;
	      // parse string context as JSON
	      if(_isString(context)) {
	        context = JSON.parse(context);
	      }
	    } catch(e) {
	      throw new JsonLdError(
	        'Dereferencing a URL did not result in a valid JSON-LD object. ' +
	        'Possible causes are an inaccessible URL perhaps due to ' +
	        'a same-origin policy (ensure the server uses CORS if you are ' +
	        'using client-side JavaScript), too many redirects, a ' +
	        'non-JSON response, or more than one HTTP Link Header was ' +
	        'provided for a remote context.',
	        'jsonld.InvalidUrl',
	        {code: 'loading remote context failed', url, cause: e});
	    }

	    // ensure ctx is an object
	    if(!_isObject(context)) {
	      throw new JsonLdError(
	        'Dereferencing a URL did not result in a JSON object. The ' +
	        'response was valid JSON, but it was not a JSON object.',
	        'jsonld.InvalidUrl', {code: 'invalid remote context', url});
	    }

	    // use empty context if no @context key is present
	    if(!('@context' in context)) {
	      context = {'@context': {}};
	    } else {
	      context = {'@context': context['@context']};
	    }

	    // append @context URL to context if given
	    if(remoteDoc.contextUrl) {
	      if(!_isArray(context['@context'])) {
	        context['@context'] = [context['@context']];
	      }
	      context['@context'].push(remoteDoc.contextUrl);
	    }

	    return {context, remoteDoc};
	  }
	};

	function _throwInvalidLocalContext(ctx) {
	  throw new JsonLdError(
	    'Invalid JSON-LD syntax; @context must be an object.',
	    'jsonld.SyntaxError', {
	      code: 'invalid local context', context: ctx
	    });
	}

	/**
	 * Resolve all relative `@context` URLs in the given context by inline
	 * replacing them with absolute URLs.
	 *
	 * @param context the context.
	 * @param base the base IRI to use to resolve relative IRIs.
	 */
	function _resolveContextUrls({context, base}) {
	  if(!context) {
	    return;
	  }

	  const ctx = context['@context'];

	  if(_isString(ctx)) {
	    context['@context'] = prependBase(base, ctx);
	    return;
	  }

	  if(_isArray(ctx)) {
	    for(let i = 0; i < ctx.length; ++i) {
	      const element = ctx[i];
	      if(_isString(element)) {
	        ctx[i] = prependBase(base, element);
	        continue;
	      }
	      if(_isObject(element)) {
	        _resolveContextUrls({context: {'@context': element}, base});
	      }
	    }
	    return;
	  }

	  if(!_isObject(ctx)) {
	    // no @context URLs can be found in non-object
	    return;
	  }

	  // ctx is an object, resolve any context URLs in terms
	  for(const term in ctx) {
	    _resolveContextUrls({context: ctx[term], base});
	  }
	}
	return ContextResolver_1;
}

/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */

var NQuads;
var hasRequiredNQuads;

function requireNQuads () {
	if (hasRequiredNQuads) return NQuads;
	hasRequiredNQuads = 1;

	// TODO: move `NQuads` to its own package
	NQuads = /*@__PURE__*/ requireRdfCanonize().NQuads;
	return NQuads;
}

/*
 * Copyright (c) 2020 Digital Bazaar, Inc. All rights reserved.
 */

var events;
var hasRequiredEvents;

function requireEvents () {
	if (hasRequiredEvents) return events;
	hasRequiredEvents = 1;

	const JsonLdError = /*@__PURE__*/ requireJsonLdError();

	const {
	  isArray: _isArray
	} = /*@__PURE__*/ requireTypes();

	const {
	  asArray: _asArray
	} = /*@__PURE__*/ requireUtil();

	const api = {};
	events = api;

	// default handler, store as null or an array
	// exposed to allow fast external pre-handleEvent() checks
	api.defaultEventHandler = null;

	/**
	 * Setup event handler.
	 *
	 * Return an array event handler constructed from an optional safe mode
	 * handler, an optional options event handler, and an optional default handler.
	 *
	 * @param {object} options - processing options
	 *   {function|object|array} [eventHandler] - an event handler.
	 *
	 * @return an array event handler.
	 */
	api.setupEventHandler = ({options = {}}) => {
	  // build in priority order
	  const eventHandler = [].concat(
	    options.safe ? api.safeEventHandler : [],
	    options.eventHandler ? _asArray(options.eventHandler) : [],
	    api.defaultEventHandler ? api.defaultEventHandler : []
	  );
	  // null if no handlers
	  return eventHandler.length === 0 ? null : eventHandler;
	};

	/**
	 * Handle an event.
	 *
	 * Top level APIs have a common 'eventHandler' option. This option can be a
	 * function, array of functions, object mapping event.code to functions (with a
	 * default to call next()), or any combination of such handlers. Handlers will
	 * be called with an object with an 'event' entry and a 'next' function. Custom
	 * handlers should process the event as appropriate. The 'next()' function
	 * should be called to let the next handler process the event.
	 *
	 * NOTE: Only call this function if options.eventHandler is set and is an
	 * array of hanlers. This is an optimization. Callers are expected to check
	 * for an event handler before constructing events and calling this function.
	 *
	 * @param {object} event - event structure:
	 *   {string} code - event code
	 *   {string} level - severity level, one of: ['warning']
	 *   {string} message - human readable message
	 *   {object} details - event specific details
	 * @param {object} options - processing options
	 *   {array} eventHandler - an event handler array.
	 */
	api.handleEvent = ({
	  event,
	  options
	}) => {
	  _handle({event, handlers: options.eventHandler});
	};

	function _handle({event, handlers}) {
	  let doNext = true;
	  for(let i = 0; doNext && i < handlers.length; ++i) {
	    doNext = false;
	    const handler = handlers[i];
	    if(_isArray(handler)) {
	      doNext = _handle({event, handlers: handler});
	    } else if(typeof handler === 'function') {
	      handler({event, next: () => {
	        doNext = true;
	      }});
	    } else if(typeof handler === 'object') {
	      if(event.code in handler) {
	        handler[event.code]({event, next: () => {
	          doNext = true;
	        }});
	      } else {
	        doNext = true;
	      }
	    } else {
	      throw new JsonLdError(
	        'Invalid event handler.',
	        'jsonld.InvalidEventHandler',
	        {event});
	    }
	  }
	  return doNext;
	}

	const _notSafeEventCodes = new Set([
	  'empty object',
	  'free-floating scalar',
	  'invalid @language value',
	  'invalid property',
	  // NOTE: spec edge case
	  'null @id value',
	  'null @value value',
	  'object with only @id',
	  'object with only @language',
	  'object with only @list',
	  'object with only @value',
	  'relative @id reference',
	  'relative @type reference',
	  'relative @vocab reference',
	  'reserved @id value',
	  'reserved @reverse value',
	  'reserved term',
	  // toRDF
	  'blank node predicate',
	  'relative graph reference',
	  'relative object reference',
	  'relative predicate reference',
	  'relative subject reference',
	  // toRDF / fromRDF
	  'rdfDirection not set'
	]);

	// safe handler that rejects unsafe warning conditions
	api.safeEventHandler = function safeEventHandler({event, next}) {
	  // fail on all unsafe warnings
	  if(event.level === 'warning' && _notSafeEventCodes.has(event.code)) {
	    throw new JsonLdError(
	      'Safe mode validation error.',
	      'jsonld.ValidationError',
	      {event}
	    );
	  }
	  next();
	};

	// logs all events and continues
	api.logEventHandler = function logEventHandler({event, next}) {
	  console.log(`EVENT: ${event.message}`, {event});
	  next();
	};

	// log 'warning' level events
	api.logWarningEventHandler = function logWarningEventHandler({event, next}) {
	  if(event.level === 'warning') {
	    console.warn(`WARNING: ${event.message}`, {event});
	  }
	  next();
	};

	// fallback to throw errors for any unhandled events
	api.unhandledEventHandler = function unhandledEventHandler({event}) {
	  throw new JsonLdError(
	    'No handler for event.',
	    'jsonld.UnhandledEvent',
	    {event}
	  );
	};

	/**
	 * Set default event handler.
	 *
	 * By default, all event are unhandled. It is recommended to pass in an
	 * eventHandler into each call. However, this call allows using a default
	 * eventHandler when one is not otherwise provided.
	 *
	 * @param {object} options - default handler options:
	 *   {function|object|array} eventHandler - a default event handler.
	 *     falsey to unset.
	 */
	api.setDefaultEventHandler = function({eventHandler} = {}) {
	  api.defaultEventHandler = eventHandler ? _asArray(eventHandler) : null;
	};
	return events;
}

/*
 * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.
 */

var context;
var hasRequiredContext;

function requireContext () {
	if (hasRequiredContext) return context;
	hasRequiredContext = 1;

	const util = /*@__PURE__*/ requireUtil();
	const JsonLdError = /*@__PURE__*/ requireJsonLdError();

	const {
	  isArray: _isArray,
	  isObject: _isObject,
	  isString: _isString,
	  isUndefined: _isUndefined
	} = /*@__PURE__*/ requireTypes();

	const {
	  isAbsolute: _isAbsoluteIri,
	  isRelative: _isRelativeIri,
	  prependBase
	} = /*@__PURE__*/ requireUrl();

	const {
	  handleEvent: _handleEvent
	} = /*@__PURE__*/ requireEvents();

	const {
	  REGEX_BCP47,
	  REGEX_KEYWORD,
	  asArray: _asArray,
	  compareShortestLeast: _compareShortestLeast
	} = /*@__PURE__*/ requireUtil();

	const INITIAL_CONTEXT_CACHE = new Map();
	const INITIAL_CONTEXT_CACHE_MAX_SIZE = 10000;

	const api = {};
	context = api;

	/**
	 * Processes a local context and returns a new active context.
	 *
	 * @param activeCtx the current active context.
	 * @param localCtx the local context to process.
	 * @param options the context processing options.
	 * @param propagate `true` if `false`, retains any previously defined term,
	 *   which can be rolled back when the descending into a new node object.
	 * @param overrideProtected `false` allows protected terms to be modified.
	 *
	 * @return a Promise that resolves to the new active context.
	 */
	api.process = async ({
	  activeCtx, localCtx, options,
	  propagate = true,
	  overrideProtected = false,
	  cycles = new Set()
	}) => {
	  // normalize local context to an array of @context objects
	  if(_isObject(localCtx) && '@context' in localCtx &&
	    _isArray(localCtx['@context'])) {
	    localCtx = localCtx['@context'];
	  }
	  const ctxs = _asArray(localCtx);

	  // no contexts in array, return current active context w/o changes
	  if(ctxs.length === 0) {
	    return activeCtx;
	  }

	  // event handler for capturing events to replay when using a cached context
	  const events = [];
	  const eventCaptureHandler = [
	    ({event, next}) => {
	      events.push(event);
	      next();
	    }
	  ];
	  // chain to original handler
	  if(options.eventHandler) {
	    eventCaptureHandler.push(options.eventHandler);
	  }
	  // store original options to use when replaying events
	  const originalOptions = options;
	  // shallow clone options with event capture handler
	  options = {...options, eventHandler: eventCaptureHandler};

	  // resolve contexts
	  const resolved = await options.contextResolver.resolve({
	    activeCtx,
	    context: localCtx,
	    documentLoader: options.documentLoader,
	    base: options.base
	  });

	  // override propagate if first resolved context has `@propagate`
	  if(_isObject(resolved[0].document) &&
	    typeof resolved[0].document['@propagate'] === 'boolean') {
	    // retrieve early, error checking done later
	    propagate = resolved[0].document['@propagate'];
	  }

	  // process each context in order, update active context
	  // on each iteration to ensure proper caching
	  let rval = activeCtx;

	  // track the previous context
	  // if not propagating, make sure rval has a previous context
	  if(!propagate && !rval.previousContext) {
	    // clone `rval` context before updating
	    rval = rval.clone();
	    rval.previousContext = activeCtx;
	  }

	  for(const resolvedContext of resolved) {
	    let {document: ctx} = resolvedContext;

	    // update active context to one computed from last iteration
	    activeCtx = rval;

	    // reset to initial context
	    if(ctx === null) {
	      // We can't nullify if there are protected terms and we're
	      // not allowing overrides (e.g. processing a property term scoped context)
	      if(!overrideProtected && Object.keys(activeCtx.protected).length !== 0) {
	        throw new JsonLdError(
	          'Tried to nullify a context with protected terms outside of ' +
	          'a term definition.',
	          'jsonld.SyntaxError',
	          {code: 'invalid context nullification'});
	      }
	      rval = activeCtx = api.getInitialContext(options).clone();
	      continue;
	    }

	    // get processed context from cache if available
	    const processed = resolvedContext.getProcessed(activeCtx);
	    if(processed) {
	      if(originalOptions.eventHandler) {
	        // replay events with original non-capturing options
	        for(const event of processed.events) {
	          _handleEvent({event, options: originalOptions});
	        }
	      }

	      rval = activeCtx = processed.context;
	      continue;
	    }

	    // dereference @context key if present
	    if(_isObject(ctx) && '@context' in ctx) {
	      ctx = ctx['@context'];
	    }

	    // context must be an object by now, all URLs retrieved before this call
	    if(!_isObject(ctx)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; @context must be an object.',
	        'jsonld.SyntaxError', {code: 'invalid local context', context: ctx});
	    }

	    // TODO: there is likely a `previousContext` cloning optimization that
	    // could be applied here (no need to copy it under certain conditions)

	    // clone context before updating it
	    rval = rval.clone();

	    // define context mappings for keys in local context
	    const defined = new Map();

	    // handle @version
	    if('@version' in ctx) {
	      if(ctx['@version'] !== 1.1) {
	        throw new JsonLdError(
	          'Unsupported JSON-LD version: ' + ctx['@version'],
	          'jsonld.UnsupportedVersion',
	          {code: 'invalid @version value', context: ctx});
	      }
	      if(activeCtx.processingMode &&
	        activeCtx.processingMode === 'json-ld-1.0') {
	        throw new JsonLdError(
	          '@version: ' + ctx['@version'] + ' not compatible with ' +
	          activeCtx.processingMode,
	          'jsonld.ProcessingModeConflict',
	          {code: 'processing mode conflict', context: ctx});
	      }
	      rval.processingMode = 'json-ld-1.1';
	      rval['@version'] = ctx['@version'];
	      defined.set('@version', true);
	    }

	    // if not set explicitly, set processingMode to "json-ld-1.1"
	    rval.processingMode =
	      rval.processingMode || activeCtx.processingMode;

	    // handle @base
	    if('@base' in ctx) {
	      let base = ctx['@base'];

	      if(base === null || _isAbsoluteIri(base)) ; else if(_isRelativeIri(base)) {
	        base = prependBase(rval['@base'], base);
	      } else {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; the value of "@base" in a ' +
	          '@context must be an absolute IRI, a relative IRI, or null.',
	          'jsonld.SyntaxError', {code: 'invalid base IRI', context: ctx});
	      }

	      rval['@base'] = base;
	      defined.set('@base', true);
	    }

	    // handle @vocab
	    if('@vocab' in ctx) {
	      const value = ctx['@vocab'];
	      if(value === null) {
	        delete rval['@vocab'];
	      } else if(!_isString(value)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; the value of "@vocab" in a ' +
	          '@context must be a string or null.',
	          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});
	      } else if(!_isAbsoluteIri(value) && api.processingMode(rval, 1.0)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; the value of "@vocab" in a ' +
	          '@context must be an absolute IRI.',
	          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});
	      } else {
	        const vocab = _expandIri(rval, value, {vocab: true, base: true},
	          undefined, undefined, options);
	        if(!_isAbsoluteIri(vocab)) {
	          if(options.eventHandler) {
	            _handleEvent({
	              event: {
	                type: ['JsonLdEvent'],
	                code: 'relative @vocab reference',
	                level: 'warning',
	                message: 'Relative @vocab reference found.',
	                details: {
	                  vocab
	                }
	              },
	              options
	            });
	          }
	        }
	        rval['@vocab'] = vocab;
	      }
	      defined.set('@vocab', true);
	    }

	    // handle @language
	    if('@language' in ctx) {
	      const value = ctx['@language'];
	      if(value === null) {
	        delete rval['@language'];
	      } else if(!_isString(value)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; the value of "@language" in a ' +
	          '@context must be a string or null.',
	          'jsonld.SyntaxError',
	          {code: 'invalid default language', context: ctx});
	      } else {
	        if(!value.match(REGEX_BCP47)) {
	          if(options.eventHandler) {
	            _handleEvent({
	              event: {
	                type: ['JsonLdEvent'],
	                code: 'invalid @language value',
	                level: 'warning',
	                message: '@language value must be valid BCP47.',
	                details: {
	                  language: value
	                }
	              },
	              options
	            });
	          }
	        }
	        rval['@language'] = value.toLowerCase();
	      }
	      defined.set('@language', true);
	    }

	    // handle @direction
	    if('@direction' in ctx) {
	      const value = ctx['@direction'];
	      if(activeCtx.processingMode === 'json-ld-1.0') {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; @direction not compatible with ' +
	          activeCtx.processingMode,
	          'jsonld.SyntaxError',
	          {code: 'invalid context member', context: ctx});
	      }
	      if(value === null) {
	        delete rval['@direction'];
	      } else if(value !== 'ltr' && value !== 'rtl') {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; the value of "@direction" in a ' +
	          '@context must be null, "ltr", or "rtl".',
	          'jsonld.SyntaxError',
	          {code: 'invalid base direction', context: ctx});
	      } else {
	        rval['@direction'] = value;
	      }
	      defined.set('@direction', true);
	    }

	    // handle @propagate
	    // note: we've already extracted it, here we just do error checking
	    if('@propagate' in ctx) {
	      const value = ctx['@propagate'];
	      if(activeCtx.processingMode === 'json-ld-1.0') {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; @propagate not compatible with ' +
	          activeCtx.processingMode,
	          'jsonld.SyntaxError',
	          {code: 'invalid context entry', context: ctx});
	      }
	      if(typeof value !== 'boolean') {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; @propagate value must be a boolean.',
	          'jsonld.SyntaxError',
	          {code: 'invalid @propagate value', context: localCtx});
	      }
	      defined.set('@propagate', true);
	    }

	    // handle @import
	    if('@import' in ctx) {
	      const value = ctx['@import'];
	      if(activeCtx.processingMode === 'json-ld-1.0') {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; @import not compatible with ' +
	          activeCtx.processingMode,
	          'jsonld.SyntaxError',
	          {code: 'invalid context entry', context: ctx});
	      }
	      if(!_isString(value)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; @import must be a string.',
	          'jsonld.SyntaxError',
	          {code: 'invalid @import value', context: localCtx});
	      }

	      // resolve contexts
	      const resolvedImport = await options.contextResolver.resolve({
	        activeCtx,
	        context: value,
	        documentLoader: options.documentLoader,
	        base: options.base
	      });
	      if(resolvedImport.length !== 1) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; @import must reference a single context.',
	          'jsonld.SyntaxError',
	          {code: 'invalid remote context', context: localCtx});
	      }
	      const processedImport = resolvedImport[0].getProcessed(activeCtx);
	      if(processedImport) {
	        // Note: if the same context were used in this active context
	        // as a reference context, then processed_input might not
	        // be a dict.
	        ctx = processedImport;
	      } else {
	        const importCtx = resolvedImport[0].document;
	        if('@import' in importCtx) {
	          throw new JsonLdError(
	            'Invalid JSON-LD syntax: ' +
	            'imported context must not include @import.',
	            'jsonld.SyntaxError',
	            {code: 'invalid context entry', context: localCtx});
	        }

	        // merge ctx into importCtx and replace rval with the result
	        for(const key in importCtx) {
	          if(!ctx.hasOwnProperty(key)) {
	            ctx[key] = importCtx[key];
	          }
	        }

	        // Note: this could potenially conflict if the import
	        // were used in the same active context as a referenced
	        // context and an import. In this case, we
	        // could override the cached result, but seems unlikely.
	        resolvedImport[0].setProcessed(activeCtx, ctx);
	      }

	      defined.set('@import', true);
	    }

	    // handle @protected; determine whether this sub-context is declaring
	    // all its terms to be "protected" (exceptions can be made on a
	    // per-definition basis)
	    defined.set('@protected', ctx['@protected'] || false);

	    // process all other keys
	    for(const key in ctx) {
	      api.createTermDefinition({
	        activeCtx: rval,
	        localCtx: ctx,
	        term: key,
	        defined,
	        options,
	        overrideProtected
	      });

	      if(_isObject(ctx[key]) && '@context' in ctx[key]) {
	        const keyCtx = ctx[key]['@context'];
	        let process = true;
	        if(_isString(keyCtx)) {
	          const url = prependBase(options.base, keyCtx);
	          // track processed contexts to avoid scoped context recursion
	          if(cycles.has(url)) {
	            process = false;
	          } else {
	            cycles.add(url);
	          }
	        }
	        // parse context to validate
	        if(process) {
	          try {
	            await api.process({
	              activeCtx: rval.clone(),
	              localCtx: ctx[key]['@context'],
	              overrideProtected: true,
	              options,
	              cycles
	            });
	          } catch(e) {
	            throw new JsonLdError(
	              'Invalid JSON-LD syntax; invalid scoped context.',
	              'jsonld.SyntaxError',
	              {
	                code: 'invalid scoped context',
	                context: ctx[key]['@context'],
	                term: key
	              });
	          }
	        }
	      }
	    }

	    // cache processed result
	    resolvedContext.setProcessed(activeCtx, {
	      context: rval,
	      events
	    });
	  }

	  return rval;
	};

	/**
	 * Creates a term definition during context processing.
	 *
	 * @param activeCtx the current active context.
	 * @param localCtx the local context being processed.
	 * @param term the term in the local context to define the mapping for.
	 * @param defined a map of defining/defined keys to detect cycles and prevent
	 *          double definitions.
	 * @param {Object} [options] - creation options.
	 * @param overrideProtected `false` allows protected terms to be modified.
	 */
	api.createTermDefinition = ({
	  activeCtx,
	  localCtx,
	  term,
	  defined,
	  options,
	  overrideProtected = false,
	}) => {
	  if(defined.has(term)) {
	    // term already defined
	    if(defined.get(term)) {
	      return;
	    }
	    // cycle detected
	    throw new JsonLdError(
	      'Cyclical context definition detected.',
	      'jsonld.CyclicalContext',
	      {code: 'cyclic IRI mapping', context: localCtx, term});
	  }

	  // now defining term
	  defined.set(term, false);

	  // get context term value
	  let value;
	  if(localCtx.hasOwnProperty(term)) {
	    value = localCtx[term];
	  }

	  if(term === '@type' &&
	     _isObject(value) &&
	     (value['@container'] || '@set') === '@set' &&
	     api.processingMode(activeCtx, 1.1)) {

	    const validKeys = ['@container', '@id', '@protected'];
	    const keys = Object.keys(value);
	    if(keys.length === 0 || keys.some(k => !validKeys.includes(k))) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; keywords cannot be overridden.',
	        'jsonld.SyntaxError',
	        {code: 'keyword redefinition', context: localCtx, term});
	    }
	  } else if(api.isKeyword(term)) {
	    throw new JsonLdError(
	      'Invalid JSON-LD syntax; keywords cannot be overridden.',
	      'jsonld.SyntaxError',
	      {code: 'keyword redefinition', context: localCtx, term});
	  } else if(term.match(REGEX_KEYWORD)) {
	    if(options.eventHandler) {
	      _handleEvent({
	        event: {
	          type: ['JsonLdEvent'],
	          code: 'reserved term',
	          level: 'warning',
	          message:
	            'Terms beginning with "@" are ' +
	            'reserved for future use and dropped.',
	          details: {
	            term
	          }
	        },
	        options
	      });
	    }
	    return;
	  } else if(term === '') {
	    throw new JsonLdError(
	      'Invalid JSON-LD syntax; a term cannot be an empty string.',
	      'jsonld.SyntaxError',
	      {code: 'invalid term definition', context: localCtx});
	  }

	  // keep reference to previous mapping for potential `@protected` check
	  const previousMapping = activeCtx.mappings.get(term);

	  // remove old mapping
	  if(activeCtx.mappings.has(term)) {
	    activeCtx.mappings.delete(term);
	  }

	  // convert short-hand value to object w/@id
	  let simpleTerm = false;
	  if(_isString(value) || value === null) {
	    simpleTerm = true;
	    value = {'@id': value};
	  }

	  if(!_isObject(value)) {
	    throw new JsonLdError(
	      'Invalid JSON-LD syntax; @context term values must be ' +
	      'strings or objects.',
	      'jsonld.SyntaxError',
	      {code: 'invalid term definition', context: localCtx});
	  }

	  // create new mapping
	  const mapping = {};
	  activeCtx.mappings.set(term, mapping);
	  mapping.reverse = false;

	  // make sure term definition only has expected keywords
	  const validKeys = ['@container', '@id', '@language', '@reverse', '@type'];

	  // JSON-LD 1.1 support
	  if(api.processingMode(activeCtx, 1.1)) {
	    validKeys.push(
	      '@context', '@direction', '@index', '@nest', '@prefix', '@protected');
	  }

	  for(const kw in value) {
	    if(!validKeys.includes(kw)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; a term definition must not contain ' + kw,
	        'jsonld.SyntaxError',
	        {code: 'invalid term definition', context: localCtx});
	    }
	  }

	  // always compute whether term has a colon as an optimization for
	  // _compactIri
	  const colon = term.indexOf(':');
	  mapping._termHasColon = (colon > 0);

	  if('@reverse' in value) {
	    if('@id' in value) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; a @reverse term definition must not ' +
	        'contain @id.', 'jsonld.SyntaxError',
	        {code: 'invalid reverse property', context: localCtx});
	    }
	    if('@nest' in value) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; a @reverse term definition must not ' +
	        'contain @nest.', 'jsonld.SyntaxError',
	        {code: 'invalid reverse property', context: localCtx});
	    }
	    const reverse = value['@reverse'];
	    if(!_isString(reverse)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; a @context @reverse value must be a string.',
	        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});
	    }

	    if(reverse.match(REGEX_KEYWORD)) {
	      if(options.eventHandler) {
	        _handleEvent({
	          event: {
	            type: ['JsonLdEvent'],
	            code: 'reserved @reverse value',
	            level: 'warning',
	            message:
	              '@reverse values beginning with "@" are ' +
	              'reserved for future use and dropped.',
	            details: {
	              reverse
	            }
	          },
	          options
	        });
	      }
	      if(previousMapping) {
	        activeCtx.mappings.set(term, previousMapping);
	      } else {
	        activeCtx.mappings.delete(term);
	      }
	      return;
	    }

	    // expand and add @id mapping
	    const id = _expandIri(
	      activeCtx, reverse, {vocab: true, base: false}, localCtx, defined,
	      options);
	    if(!_isAbsoluteIri(id)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; a @context @reverse value must be an ' +
	        'absolute IRI or a blank node identifier.',
	        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});
	    }

	    mapping['@id'] = id;
	    mapping.reverse = true;
	  } else if('@id' in value) {
	    let id = value['@id'];
	    if(id && !_isString(id)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; a @context @id value must be an array ' +
	        'of strings or a string.',
	        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});
	    }
	    if(id === null) {
	      // reserve a null term, which may be protected
	      mapping['@id'] = null;
	    } else if(!api.isKeyword(id) && id.match(REGEX_KEYWORD)) {
	      if(options.eventHandler) {
	        _handleEvent({
	          event: {
	            type: ['JsonLdEvent'],
	            code: 'reserved @id value',
	            level: 'warning',
	            message:
	              '@id values beginning with "@" are ' +
	              'reserved for future use and dropped.',
	            details: {
	              id
	            }
	          },
	          options
	        });
	      }
	      if(previousMapping) {
	        activeCtx.mappings.set(term, previousMapping);
	      } else {
	        activeCtx.mappings.delete(term);
	      }
	      return;
	    } else if(id !== term) {
	      // expand and add @id mapping
	      id = _expandIri(
	        activeCtx, id, {vocab: true, base: false}, localCtx, defined, options);
	      if(!_isAbsoluteIri(id) && !api.isKeyword(id)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; a @context @id value must be an ' +
	          'absolute IRI, a blank node identifier, or a keyword.',
	          'jsonld.SyntaxError',
	          {code: 'invalid IRI mapping', context: localCtx});
	      }

	      // if term has the form of an IRI it must map the same
	      if(term.match(/(?::[^:])|\//)) {
	        const termDefined = new Map(defined).set(term, true);
	        const termIri = _expandIri(
	          activeCtx, term, {vocab: true, base: false},
	          localCtx, termDefined, options);
	        if(termIri !== id) {
	          throw new JsonLdError(
	            'Invalid JSON-LD syntax; term in form of IRI must ' +
	            'expand to definition.',
	            'jsonld.SyntaxError',
	            {code: 'invalid IRI mapping', context: localCtx});
	        }
	      }

	      mapping['@id'] = id;
	      // indicate if this term may be used as a compact IRI prefix
	      mapping._prefix = (simpleTerm &&
	        !mapping._termHasColon &&
	        id.match(/[:\/\?#\[\]@]$/) !== null);
	    }
	  }

	  if(!('@id' in mapping)) {
	    // see if the term has a prefix
	    if(mapping._termHasColon) {
	      const prefix = term.substr(0, colon);
	      if(localCtx.hasOwnProperty(prefix)) {
	        // define parent prefix
	        api.createTermDefinition({
	          activeCtx, localCtx, term: prefix, defined, options
	        });
	      }

	      if(activeCtx.mappings.has(prefix)) {
	        // set @id based on prefix parent
	        const suffix = term.substr(colon + 1);
	        mapping['@id'] = activeCtx.mappings.get(prefix)['@id'] + suffix;
	      } else {
	        // term is an absolute IRI
	        mapping['@id'] = term;
	      }
	    } else if(term === '@type') {
	      // Special case, were we've previously determined that container is @set
	      mapping['@id'] = term;
	    } else {
	      // non-IRIs *must* define @ids if @vocab is not available
	      if(!('@vocab' in activeCtx)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; @context terms must define an @id.',
	          'jsonld.SyntaxError',
	          {code: 'invalid IRI mapping', context: localCtx, term});
	      }
	      // prepend vocab to term
	      mapping['@id'] = activeCtx['@vocab'] + term;
	    }
	  }

	  // Handle term protection
	  if(value['@protected'] === true ||
	    (defined.get('@protected') === true && value['@protected'] !== false)) {
	    activeCtx.protected[term] = true;
	    mapping.protected = true;
	  }

	  // IRI mapping now defined
	  defined.set(term, true);

	  if('@type' in value) {
	    let type = value['@type'];
	    if(!_isString(type)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; an @context @type value must be a string.',
	        'jsonld.SyntaxError',
	        {code: 'invalid type mapping', context: localCtx});
	    }

	    if((type === '@json' || type === '@none')) {
	      if(api.processingMode(activeCtx, 1.0)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; an @context @type value must not be ' +
	          `"${type}" in JSON-LD 1.0 mode.`,
	          'jsonld.SyntaxError',
	          {code: 'invalid type mapping', context: localCtx});
	      }
	    } else if(type !== '@id' && type !== '@vocab') {
	      // expand @type to full IRI
	      type = _expandIri(
	        activeCtx, type, {vocab: true, base: false}, localCtx, defined,
	        options);
	      if(!_isAbsoluteIri(type)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; an @context @type value must be an ' +
	          'absolute IRI.',
	          'jsonld.SyntaxError',
	          {code: 'invalid type mapping', context: localCtx});
	      }
	      if(type.indexOf('_:') === 0) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; an @context @type value must be an IRI, ' +
	          'not a blank node identifier.',
	          'jsonld.SyntaxError',
	          {code: 'invalid type mapping', context: localCtx});
	      }
	    }

	    // add @type to mapping
	    mapping['@type'] = type;
	  }

	  if('@container' in value) {
	    // normalize container to an array form
	    const container = _isString(value['@container']) ?
	      [value['@container']] : (value['@container'] || []);
	    const validContainers = ['@list', '@set', '@index', '@language'];
	    let isValid = true;
	    const hasSet = container.includes('@set');

	    // JSON-LD 1.1 support
	    if(api.processingMode(activeCtx, 1.1)) {
	      validContainers.push('@graph', '@id', '@type');

	      // check container length
	      if(container.includes('@list')) {
	        if(container.length !== 1) {
	          throw new JsonLdError(
	            'Invalid JSON-LD syntax; @context @container with @list must ' +
	            'have no other values',
	            'jsonld.SyntaxError',
	            {code: 'invalid container mapping', context: localCtx});
	        }
	      } else if(container.includes('@graph')) {
	        if(container.some(key =>
	          key !== '@graph' && key !== '@id' && key !== '@index' &&
	          key !== '@set')) {
	          throw new JsonLdError(
	            'Invalid JSON-LD syntax; @context @container with @graph must ' +
	            'have no other values other than @id, @index, and @set',
	            'jsonld.SyntaxError',
	            {code: 'invalid container mapping', context: localCtx});
	        }
	      } else {
	        // otherwise, container may also include @set
	        isValid &= container.length <= (hasSet ? 2 : 1);
	      }

	      if(container.includes('@type')) {
	        // If mapping does not have an @type,
	        // set it to @id
	        mapping['@type'] = mapping['@type'] || '@id';

	        // type mapping must be either @id or @vocab
	        if(!['@id', '@vocab'].includes(mapping['@type'])) {
	          throw new JsonLdError(
	            'Invalid JSON-LD syntax; container: @type requires @type to be ' +
	            '@id or @vocab.',
	            'jsonld.SyntaxError',
	            {code: 'invalid type mapping', context: localCtx});
	        }
	      }
	    } else {
	      // in JSON-LD 1.0, container must not be an array (it must be a string,
	      // which is one of the validContainers)
	      isValid &= !_isArray(value['@container']);

	      // check container length
	      isValid &= container.length <= 1;
	    }

	    // check against valid containers
	    isValid &= container.every(c => validContainers.includes(c));

	    // @set not allowed with @list
	    isValid &= !(hasSet && container.includes('@list'));

	    if(!isValid) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; @context @container value must be ' +
	        'one of the following: ' + validContainers.join(', '),
	        'jsonld.SyntaxError',
	        {code: 'invalid container mapping', context: localCtx});
	    }

	    if(mapping.reverse &&
	      !container.every(c => ['@index', '@set'].includes(c))) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; @context @container value for a @reverse ' +
	        'type definition must be @index or @set.', 'jsonld.SyntaxError',
	        {code: 'invalid reverse property', context: localCtx});
	    }

	    // add @container to mapping
	    mapping['@container'] = container;
	  }

	  // property indexing
	  if('@index' in value) {
	    if(!('@container' in value) || !mapping['@container'].includes('@index')) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; @index without @index in @container: ' +
	        `"${value['@index']}" on term "${term}".`, 'jsonld.SyntaxError',
	        {code: 'invalid term definition', context: localCtx});
	    }
	    if(!_isString(value['@index']) || value['@index'].indexOf('@') === 0) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; @index must expand to an IRI: ' +
	        `"${value['@index']}" on term "${term}".`, 'jsonld.SyntaxError',
	        {code: 'invalid term definition', context: localCtx});
	    }
	    mapping['@index'] = value['@index'];
	  }

	  // scoped contexts
	  if('@context' in value) {
	    mapping['@context'] = value['@context'];
	  }

	  if('@language' in value && !('@type' in value)) {
	    let language = value['@language'];
	    if(language !== null && !_isString(language)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; @context @language value must be ' +
	        'a string or null.', 'jsonld.SyntaxError',
	        {code: 'invalid language mapping', context: localCtx});
	    }

	    // add @language to mapping
	    if(language !== null) {
	      language = language.toLowerCase();
	    }
	    mapping['@language'] = language;
	  }

	  // term may be used as a prefix
	  if('@prefix' in value) {
	    if(term.match(/:|\//)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; @context @prefix used on a compact IRI term',
	        'jsonld.SyntaxError',
	        {code: 'invalid term definition', context: localCtx});
	    }
	    if(api.isKeyword(mapping['@id'])) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; keywords may not be used as prefixes',
	        'jsonld.SyntaxError',
	        {code: 'invalid term definition', context: localCtx});
	    }
	    if(typeof value['@prefix'] === 'boolean') {
	      mapping._prefix = value['@prefix'] === true;
	    } else {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; @context value for @prefix must be boolean',
	        'jsonld.SyntaxError',
	        {code: 'invalid @prefix value', context: localCtx});
	    }
	  }

	  if('@direction' in value) {
	    const direction = value['@direction'];
	    if(direction !== null && direction !== 'ltr' && direction !== 'rtl') {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; @direction value must be ' +
	        'null, "ltr", or "rtl".',
	        'jsonld.SyntaxError',
	        {code: 'invalid base direction', context: localCtx});
	    }
	    mapping['@direction'] = direction;
	  }

	  if('@nest' in value) {
	    const nest = value['@nest'];
	    if(!_isString(nest) || (nest !== '@nest' && nest.indexOf('@') === 0)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; @context @nest value must be ' +
	        'a string which is not a keyword other than @nest.',
	        'jsonld.SyntaxError',
	        {code: 'invalid @nest value', context: localCtx});
	    }
	    mapping['@nest'] = nest;
	  }

	  // disallow aliasing @context and @preserve
	  const id = mapping['@id'];
	  if(id === '@context' || id === '@preserve') {
	    throw new JsonLdError(
	      'Invalid JSON-LD syntax; @context and @preserve cannot be aliased.',
	      'jsonld.SyntaxError', {code: 'invalid keyword alias', context: localCtx});
	  }

	  // Check for overriding protected terms
	  if(previousMapping && previousMapping.protected && !overrideProtected) {
	    // force new term to continue to be protected and see if the mappings would
	    // be equal
	    activeCtx.protected[term] = true;
	    mapping.protected = true;
	    if(!_deepCompare(previousMapping, mapping)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; tried to redefine a protected term.',
	        'jsonld.SyntaxError',
	        {code: 'protected term redefinition', context: localCtx, term});
	    }
	  }
	};

	/**
	 * Expands a string to a full IRI. The string may be a term, a prefix, a
	 * relative IRI, or an absolute IRI. The associated absolute IRI will be
	 * returned.
	 *
	 * @param activeCtx the current active context.
	 * @param value the string to expand.
	 * @param relativeTo options for how to resolve relative IRIs:
	 *          base: true to resolve against the base IRI, false not to.
	 *          vocab: true to concatenate after @vocab, false not to.
	 * @param {Object} [options] - processing options.
	 *
	 * @return the expanded value.
	 */
	api.expandIri = (activeCtx, value, relativeTo, options) => {
	  return _expandIri(activeCtx, value, relativeTo, undefined, undefined,
	    options);
	};

	/**
	 * Expands a string to a full IRI. The string may be a term, a prefix, a
	 * relative IRI, or an absolute IRI. The associated absolute IRI will be
	 * returned.
	 *
	 * @param activeCtx the current active context.
	 * @param value the string to expand.
	 * @param relativeTo options for how to resolve relative IRIs:
	 *          base: true to resolve against the base IRI, false not to.
	 *          vocab: true to concatenate after @vocab, false not to.
	 * @param localCtx the local context being processed (only given if called
	 *          during context processing).
	 * @param defined a map for tracking cycles in context definitions (only given
	 *          if called during context processing).
	 * @param {Object} [options] - processing options.
	 *
	 * @return the expanded value.
	 */
	function _expandIri(activeCtx, value, relativeTo, localCtx, defined, options) {
	  // already expanded
	  if(value === null || !_isString(value) || api.isKeyword(value)) {
	    return value;
	  }

	  // ignore non-keyword things that look like a keyword
	  if(value.match(REGEX_KEYWORD)) {
	    return null;
	  }

	  // define term dependency if not defined
	  if(localCtx && localCtx.hasOwnProperty(value) &&
	    defined.get(value) !== true) {
	    api.createTermDefinition({
	      activeCtx, localCtx, term: value, defined, options
	    });
	  }

	  relativeTo = relativeTo || {};
	  if(relativeTo.vocab) {
	    const mapping = activeCtx.mappings.get(value);

	    // value is explicitly ignored with a null mapping
	    if(mapping === null) {
	      return null;
	    }

	    if(_isObject(mapping) && '@id' in mapping) {
	      // value is a term
	      return mapping['@id'];
	    }
	  }

	  // split value into prefix:suffix
	  const colon = value.indexOf(':');
	  if(colon > 0) {
	    const prefix = value.substr(0, colon);
	    const suffix = value.substr(colon + 1);

	    // do not expand blank nodes (prefix of '_') or already-absolute
	    // IRIs (suffix of '//')
	    if(prefix === '_' || suffix.indexOf('//') === 0) {
	      return value;
	    }

	    // prefix dependency not defined, define it
	    if(localCtx && localCtx.hasOwnProperty(prefix)) {
	      api.createTermDefinition({
	        activeCtx, localCtx, term: prefix, defined, options
	      });
	    }

	    // use mapping if prefix is defined
	    const mapping = activeCtx.mappings.get(prefix);
	    if(mapping && mapping._prefix) {
	      return mapping['@id'] + suffix;
	    }

	    // already absolute IRI
	    if(_isAbsoluteIri(value)) {
	      return value;
	    }
	  }

	  // A flag that captures whether the iri being expanded is
	  // the value for an @type
	  //let typeExpansion = false;

	  //if(options !== undefined && options.typeExpansion !== undefined) {
	  //  typeExpansion = options.typeExpansion;
	  //}

	  if(relativeTo.vocab && '@vocab' in activeCtx) {
	    // prepend vocab
	    const prependedResult = activeCtx['@vocab'] + value;
	    // FIXME: needed? may be better as debug event.
	    /*
	    if(options && options.eventHandler) {
	      _handleEvent({
	        event: {
	          type: ['JsonLdEvent'],
	          code: 'prepending @vocab during expansion',
	          level: 'info',
	          message: 'Prepending @vocab during expansion.',
	          details: {
	            type: '@vocab',
	            vocab: activeCtx['@vocab'],
	            value,
	            result: prependedResult,
	            typeExpansion
	          }
	        },
	        options
	      });
	    }
	    */
	    // the null case preserves value as potentially relative
	    value = prependedResult;
	  } else if(relativeTo.base) {
	    // prepend base
	    let prependedResult;
	    let base;
	    if('@base' in activeCtx) {
	      if(activeCtx['@base']) {
	        base = prependBase(options.base, activeCtx['@base']);
	        prependedResult = prependBase(base, value);
	      } else {
	        base = activeCtx['@base'];
	        prependedResult = value;
	      }
	    } else {
	      base = options.base;
	      prependedResult = prependBase(options.base, value);
	    }
	    // FIXME: needed? may be better as debug event.
	    /*
	    if(options && options.eventHandler) {
	      _handleEvent({
	        event: {
	          type: ['JsonLdEvent'],
	          code: 'prepending @base during expansion',
	          level: 'info',
	          message: 'Prepending @base during expansion.',
	          details: {
	            type: '@base',
	            base,
	            value,
	            result: prependedResult,
	            typeExpansion
	          }
	        },
	        options
	      });
	    }
	    */
	    // the null case preserves value as potentially relative
	    value = prependedResult;
	  }

	  // FIXME: duplicate? needed? maybe just enable in a verbose debug mode
	  /*
	  if(!_isAbsoluteIri(value) && options && options.eventHandler) {
	    // emit event indicating a relative IRI was found, which can result in it
	    // being dropped when converting to other RDF representations
	    _handleEvent({
	      event: {
	        type: ['JsonLdEvent'],
	        code: 'relative IRI after expansion',
	        // FIXME: what level?
	        level: 'warning',
	        message: 'Relative IRI after expansion.',
	        details: {
	          relativeIri: value,
	          typeExpansion
	        }
	      },
	      options
	    });
	    // NOTE: relative reference events emitted at calling sites as needed
	  }
	  */

	  return value;
	}

	/**
	 * Gets the initial context.
	 *
	 * @param options the options to use:
	 *          [base] the document base IRI.
	 *
	 * @return the initial context.
	 */
	api.getInitialContext = options => {
	  const key = JSON.stringify({processingMode: options.processingMode});
	  const cached = INITIAL_CONTEXT_CACHE.get(key);
	  if(cached) {
	    return cached;
	  }

	  const initialContext = {
	    processingMode: options.processingMode,
	    mappings: new Map(),
	    inverse: null,
	    getInverse: _createInverseContext,
	    clone: _cloneActiveContext,
	    revertToPreviousContext: _revertToPreviousContext,
	    protected: {}
	  };
	  // TODO: consider using LRU cache instead
	  if(INITIAL_CONTEXT_CACHE.size === INITIAL_CONTEXT_CACHE_MAX_SIZE) {
	    // clear whole cache -- assumes scenario where the cache fills means
	    // the cache isn't being used very efficiently anyway
	    INITIAL_CONTEXT_CACHE.clear();
	  }
	  INITIAL_CONTEXT_CACHE.set(key, initialContext);
	  return initialContext;

	  /**
	   * Generates an inverse context for use in the compaction algorithm, if
	   * not already generated for the given active context.
	   *
	   * @return the inverse context.
	   */
	  function _createInverseContext() {
	    const activeCtx = this;

	    // lazily create inverse
	    if(activeCtx.inverse) {
	      return activeCtx.inverse;
	    }
	    const inverse = activeCtx.inverse = {};

	    // variables for building fast CURIE map
	    const fastCurieMap = activeCtx.fastCurieMap = {};
	    const irisToTerms = {};

	    // handle default language
	    const defaultLanguage = (activeCtx['@language'] || '@none').toLowerCase();

	    // handle default direction
	    const defaultDirection = activeCtx['@direction'];

	    // create term selections for each mapping in the context, ordered by
	    // shortest and then lexicographically least
	    const mappings = activeCtx.mappings;
	    const terms = [...mappings.keys()].sort(_compareShortestLeast);
	    for(const term of terms) {
	      const mapping = mappings.get(term);
	      if(mapping === null) {
	        continue;
	      }

	      let container = mapping['@container'] || '@none';
	      container = [].concat(container).sort().join('');

	      if(mapping['@id'] === null) {
	        continue;
	      }
	      // iterate over every IRI in the mapping
	      const ids = _asArray(mapping['@id']);
	      for(const iri of ids) {
	        let entry = inverse[iri];
	        const isKeyword = api.isKeyword(iri);

	        if(!entry) {
	          // initialize entry
	          inverse[iri] = entry = {};

	          if(!isKeyword && !mapping._termHasColon) {
	            // init IRI to term map and fast CURIE prefixes
	            irisToTerms[iri] = [term];
	            const fastCurieEntry = {iri, terms: irisToTerms[iri]};
	            if(iri[0] in fastCurieMap) {
	              fastCurieMap[iri[0]].push(fastCurieEntry);
	            } else {
	              fastCurieMap[iri[0]] = [fastCurieEntry];
	            }
	          }
	        } else if(!isKeyword && !mapping._termHasColon) {
	          // add IRI to term match
	          irisToTerms[iri].push(term);
	        }

	        // add new entry
	        if(!entry[container]) {
	          entry[container] = {
	            '@language': {},
	            '@type': {},
	            '@any': {}
	          };
	        }
	        entry = entry[container];
	        _addPreferredTerm(term, entry['@any'], '@none');

	        if(mapping.reverse) {
	          // term is preferred for values using @reverse
	          _addPreferredTerm(term, entry['@type'], '@reverse');
	        } else if(mapping['@type'] === '@none') {
	          _addPreferredTerm(term, entry['@any'], '@none');
	          _addPreferredTerm(term, entry['@language'], '@none');
	          _addPreferredTerm(term, entry['@type'], '@none');
	        } else if('@type' in mapping) {
	          // term is preferred for values using specific type
	          _addPreferredTerm(term, entry['@type'], mapping['@type']);
	        } else if('@language' in mapping && '@direction' in mapping) {
	          // term is preferred for values using specific language and direction
	          const language = mapping['@language'];
	          const direction = mapping['@direction'];
	          if(language && direction) {
	            _addPreferredTerm(term, entry['@language'],
	              `${language}_${direction}`.toLowerCase());
	          } else if(language) {
	            _addPreferredTerm(term, entry['@language'], language.toLowerCase());
	          } else if(direction) {
	            _addPreferredTerm(term, entry['@language'], `_${direction}`);
	          } else {
	            _addPreferredTerm(term, entry['@language'], '@null');
	          }
	        } else if('@language' in mapping) {
	          _addPreferredTerm(term, entry['@language'],
	            (mapping['@language'] || '@null').toLowerCase());
	        } else if('@direction' in mapping) {
	          if(mapping['@direction']) {
	            _addPreferredTerm(term, entry['@language'],
	              `_${mapping['@direction']}`);
	          } else {
	            _addPreferredTerm(term, entry['@language'], '@none');
	          }
	        } else if(defaultDirection) {
	          _addPreferredTerm(term, entry['@language'], `_${defaultDirection}`);
	          _addPreferredTerm(term, entry['@language'], '@none');
	          _addPreferredTerm(term, entry['@type'], '@none');
	        } else {
	          // add entries for no type and no language
	          _addPreferredTerm(term, entry['@language'], defaultLanguage);
	          _addPreferredTerm(term, entry['@language'], '@none');
	          _addPreferredTerm(term, entry['@type'], '@none');
	        }
	      }
	    }

	    // build fast CURIE map
	    for(const key in fastCurieMap) {
	      _buildIriMap(fastCurieMap, key, 1);
	    }

	    return inverse;
	  }

	  /**
	   * Runs a recursive algorithm to build a lookup map for quickly finding
	   * potential CURIEs.
	   *
	   * @param iriMap the map to build.
	   * @param key the current key in the map to work on.
	   * @param idx the index into the IRI to compare.
	   */
	  function _buildIriMap(iriMap, key, idx) {
	    const entries = iriMap[key];
	    const next = iriMap[key] = {};

	    let iri;
	    let letter;
	    for(const entry of entries) {
	      iri = entry.iri;
	      if(idx >= iri.length) {
	        letter = '';
	      } else {
	        letter = iri[idx];
	      }
	      if(letter in next) {
	        next[letter].push(entry);
	      } else {
	        next[letter] = [entry];
	      }
	    }

	    for(const key in next) {
	      if(key === '') {
	        continue;
	      }
	      _buildIriMap(next, key, idx + 1);
	    }
	  }

	  /**
	   * Adds the term for the given entry if not already added.
	   *
	   * @param term the term to add.
	   * @param entry the inverse context typeOrLanguage entry to add to.
	   * @param typeOrLanguageValue the key in the entry to add to.
	   */
	  function _addPreferredTerm(term, entry, typeOrLanguageValue) {
	    if(!entry.hasOwnProperty(typeOrLanguageValue)) {
	      entry[typeOrLanguageValue] = term;
	    }
	  }

	  /**
	   * Clones an active context, creating a child active context.
	   *
	   * @return a clone (child) of the active context.
	   */
	  function _cloneActiveContext() {
	    const child = {};
	    child.mappings = util.clone(this.mappings);
	    child.clone = this.clone;
	    child.inverse = null;
	    child.getInverse = this.getInverse;
	    child.protected = util.clone(this.protected);
	    if(this.previousContext) {
	      child.previousContext = this.previousContext.clone();
	    }
	    child.revertToPreviousContext = this.revertToPreviousContext;
	    if('@base' in this) {
	      child['@base'] = this['@base'];
	    }
	    if('@language' in this) {
	      child['@language'] = this['@language'];
	    }
	    if('@vocab' in this) {
	      child['@vocab'] = this['@vocab'];
	    }
	    return child;
	  }

	  /**
	   * Reverts any type-scoped context in this active context to the previous
	   * context.
	   */
	  function _revertToPreviousContext() {
	    if(!this.previousContext) {
	      return this;
	    }
	    return this.previousContext.clone();
	  }
	};

	/**
	 * Gets the value for the given active context key and type, null if none is
	 * set or undefined if none is set and type is '@context'.
	 *
	 * @param ctx the active context.
	 * @param key the context key.
	 * @param [type] the type of value to get (eg: '@id', '@type'), if not
	 *          specified gets the entire entry for a key, null if not found.
	 *
	 * @return the value, null, or undefined.
	 */
	api.getContextValue = (ctx, key, type) => {
	  // invalid key
	  if(key === null) {
	    if(type === '@context') {
	      return undefined;
	    }
	    return null;
	  }

	  // get specific entry information
	  if(ctx.mappings.has(key)) {
	    const entry = ctx.mappings.get(key);

	    if(_isUndefined(type)) {
	      // return whole entry
	      return entry;
	    }
	    if(entry.hasOwnProperty(type)) {
	      // return entry value for type
	      return entry[type];
	    }
	  }

	  // get default language
	  if(type === '@language' && type in ctx) {
	    return ctx[type];
	  }

	  // get default direction
	  if(type === '@direction' && type in ctx) {
	    return ctx[type];
	  }

	  if(type === '@context') {
	    return undefined;
	  }
	  return null;
	};

	/**
	 * Processing Mode check.
	 *
	 * @param activeCtx the current active context.
	 * @param version the string or numeric version to check.
	 *
	 * @return boolean.
	 */
	api.processingMode = (activeCtx, version) => {
	  if(version.toString() >= '1.1') {
	    return !activeCtx.processingMode ||
	      activeCtx.processingMode >= 'json-ld-' + version.toString();
	  } else {
	    return activeCtx.processingMode === 'json-ld-1.0';
	  }
	};

	/**
	 * Returns whether or not the given value is a keyword.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a keyword, false if not.
	 */
	api.isKeyword = v => {
	  if(!_isString(v) || v[0] !== '@') {
	    return false;
	  }
	  switch(v) {
	    case '@base':
	    case '@container':
	    case '@context':
	    case '@default':
	    case '@direction':
	    case '@embed':
	    case '@explicit':
	    case '@graph':
	    case '@id':
	    case '@included':
	    case '@index':
	    case '@json':
	    case '@language':
	    case '@list':
	    case '@nest':
	    case '@none':
	    case '@omitDefault':
	    case '@prefix':
	    case '@preserve':
	    case '@protected':
	    case '@requireAll':
	    case '@reverse':
	    case '@set':
	    case '@type':
	    case '@value':
	    case '@version':
	    case '@vocab':
	      return true;
	  }
	  return false;
	};

	function _deepCompare(x1, x2) {
	  // compare `null` or primitive types directly
	  if((!(x1 && typeof x1 === 'object')) ||
	     (!(x2 && typeof x2 === 'object'))) {
	    return x1 === x2;
	  }
	  // x1 and x2 are objects (also potentially arrays)
	  const x1Array = Array.isArray(x1);
	  if(x1Array !== Array.isArray(x2)) {
	    return false;
	  }
	  if(x1Array) {
	    if(x1.length !== x2.length) {
	      return false;
	    }
	    for(let i = 0; i < x1.length; ++i) {
	      if(!_deepCompare(x1[i], x2[i])) {
	        return false;
	      }
	    }
	    return true;
	  }
	  // x1 and x2 are non-array objects
	  const k1s = Object.keys(x1);
	  const k2s = Object.keys(x2);
	  if(k1s.length !== k2s.length) {
	    return false;
	  }
	  for(const k1 in x1) {
	    let v1 = x1[k1];
	    let v2 = x2[k1];
	    // special case: `@container` can be in any order
	    if(k1 === '@container') {
	      if(Array.isArray(v1) && Array.isArray(v2)) {
	        v1 = v1.slice().sort();
	        v2 = v2.slice().sort();
	      }
	    }
	    if(!_deepCompare(v1, v2)) {
	      return false;
	    }
	  }
	  return true;
	}
	return context;
}

/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */

var expand;
var hasRequiredExpand;

function requireExpand () {
	if (hasRequiredExpand) return expand;
	hasRequiredExpand = 1;

	const JsonLdError = /*@__PURE__*/ requireJsonLdError();

	const {
	  isArray: _isArray,
	  isObject: _isObject,
	  isEmptyObject: _isEmptyObject,
	  isString: _isString,
	  isUndefined: _isUndefined
	} = /*@__PURE__*/ requireTypes();

	const {
	  isList: _isList,
	  isValue: _isValue,
	  isGraph: _isGraph,
	  isSubject: _isSubject
	} = /*@__PURE__*/ requireGraphTypes();

	const {
	  expandIri: _expandIri,
	  getContextValue: _getContextValue,
	  isKeyword: _isKeyword,
	  process: _processContext,
	  processingMode: _processingMode
	} = /*@__PURE__*/ requireContext();

	const {
	  isAbsolute: _isAbsoluteIri
	} = /*@__PURE__*/ requireUrl();

	const {
	  REGEX_BCP47,
	  REGEX_KEYWORD,
	  addValue: _addValue,
	  asArray: _asArray,
	  getValues: _getValues,
	  validateTypeValue: _validateTypeValue
	} = /*@__PURE__*/ requireUtil();

	const {
	  handleEvent: _handleEvent
	} = /*@__PURE__*/ requireEvents();

	const api = {};
	expand = api;

	/**
	 * Recursively expands an element using the given context. Any context in
	 * the element will be removed. All context URLs must have been retrieved
	 * before calling this method.
	 *
	 * @param activeCtx the context to use.
	 * @param activeProperty the property for the element, null for none.
	 * @param element the element to expand.
	 * @param options the expansion options.
	 * @param insideList true if the element is a list, false if not.
	 * @param insideIndex true if the element is inside an index container,
	 *          false if not.
	 * @param typeScopedContext an optional type-scoped active context for
	 *          expanding values of nodes that were expressed according to
	 *          a type-scoped context.
	 *
	 * @return a Promise that resolves to the expanded value.
	 */
	api.expand = async ({
	  activeCtx,
	  activeProperty = null,
	  element,
	  options = {},
	  insideList = false,
	  insideIndex = false,
	  typeScopedContext = null
	}) => {
	  // nothing to expand
	  if(element === null || element === undefined) {
	    return null;
	  }

	  // disable framing if activeProperty is @default
	  if(activeProperty === '@default') {
	    options = Object.assign({}, options, {isFrame: false});
	  }

	  if(!_isArray(element) && !_isObject(element)) {
	    // drop free-floating scalars that are not in lists
	    if(!insideList && (activeProperty === null ||
	      _expandIri(activeCtx, activeProperty, {vocab: true},
	        options) === '@graph')) {
	      // FIXME
	      if(options.eventHandler) {
	        _handleEvent({
	          event: {
	            type: ['JsonLdEvent'],
	            code: 'free-floating scalar',
	            level: 'warning',
	            message: 'Dropping free-floating scalar not in a list.',
	            details: {
	              value: element
	              //activeProperty
	              //insideList
	            }
	          },
	          options
	        });
	      }
	      return null;
	    }

	    // expand element according to value expansion rules
	    return _expandValue({activeCtx, activeProperty, value: element, options});
	  }

	  // recursively expand array
	  if(_isArray(element)) {
	    let rval = [];
	    const container = _getContextValue(
	      activeCtx, activeProperty, '@container') || [];
	    insideList = insideList || container.includes('@list');
	    for(let i = 0; i < element.length; ++i) {
	      // expand element
	      let e = await api.expand({
	        activeCtx,
	        activeProperty,
	        element: element[i],
	        options,
	        insideIndex,
	        typeScopedContext
	      });
	      if(insideList && _isArray(e)) {
	        e = {'@list': e};
	      }

	      if(e === null) {
	        // FIXME: add debug event?
	        //unmappedValue: element[i],
	        //activeProperty,
	        //parent: element,
	        //index: i,
	        //expandedParent: rval,
	        //insideList

	        // NOTE: no-value events emitted at calling sites as needed
	        continue;
	      }

	      if(_isArray(e)) {
	        rval = rval.concat(e);
	      } else {
	        rval.push(e);
	      }
	    }
	    return rval;
	  }

	  // recursively expand object:

	  // first, expand the active property
	  const expandedActiveProperty = _expandIri(
	    activeCtx, activeProperty, {vocab: true}, options);

	  // Get any property-scoped context for activeProperty
	  const propertyScopedCtx =
	    _getContextValue(activeCtx, activeProperty, '@context');

	  // second, determine if any type-scoped context should be reverted; it
	  // should only be reverted when the following are all true:
	  // 1. `element` is not a value or subject reference
	  // 2. `insideIndex` is false
	  typeScopedContext = typeScopedContext ||
	    (activeCtx.previousContext ? activeCtx : null);
	  let keys = Object.keys(element).sort();
	  let mustRevert = !insideIndex;
	  if(mustRevert && typeScopedContext && keys.length <= 2 &&
	    !keys.includes('@context')) {
	    for(const key of keys) {
	      const expandedProperty = _expandIri(
	        typeScopedContext, key, {vocab: true}, options);
	      if(expandedProperty === '@value') {
	        // value found, ensure type-scoped context is used to expand it
	        mustRevert = false;
	        activeCtx = typeScopedContext;
	        break;
	      }
	      if(expandedProperty === '@id' && keys.length === 1) {
	        // subject reference found, do not revert
	        mustRevert = false;
	        break;
	      }
	    }
	  }

	  if(mustRevert) {
	    // revert type scoped context
	    activeCtx = activeCtx.revertToPreviousContext();
	  }

	  // apply property-scoped context after reverting term-scoped context
	  if(!_isUndefined(propertyScopedCtx)) {
	    activeCtx = await _processContext({
	      activeCtx,
	      localCtx: propertyScopedCtx,
	      propagate: true,
	      overrideProtected: true,
	      options
	    });
	  }

	  // if element has a context, process it
	  if('@context' in element) {
	    activeCtx = await _processContext(
	      {activeCtx, localCtx: element['@context'], options});
	  }

	  // set the type-scoped context to the context on input, for use later
	  typeScopedContext = activeCtx;

	  // Remember the first key found expanding to @type
	  let typeKey = null;

	  // look for scoped contexts on `@type`
	  for(const key of keys) {
	    const expandedProperty = _expandIri(activeCtx, key, {vocab: true}, options);
	    if(expandedProperty === '@type') {
	      // set scoped contexts from @type
	      // avoid sorting if possible
	      typeKey = typeKey || key;
	      const value = element[key];
	      const types =
	        Array.isArray(value) ?
	          (value.length > 1 ? value.slice().sort() : value) : [value];
	      for(const type of types) {
	        const ctx = _getContextValue(typeScopedContext, type, '@context');
	        if(!_isUndefined(ctx)) {
	          activeCtx = await _processContext({
	            activeCtx,
	            localCtx: ctx,
	            options,
	            propagate: false
	          });
	        }
	      }
	    }
	  }

	  // process each key and value in element, ignoring @nest content
	  let rval = {};
	  await _expandObject({
	    activeCtx,
	    activeProperty,
	    expandedActiveProperty,
	    element,
	    expandedParent: rval,
	    options,
	    insideList,
	    typeKey,
	    typeScopedContext
	  });

	  // get property count on expanded output
	  keys = Object.keys(rval);
	  let count = keys.length;

	  if('@value' in rval) {
	    // @value must only have @language or @type
	    if('@type' in rval && ('@language' in rval || '@direction' in rval)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; an element containing "@value" may not ' +
	        'contain both "@type" and either "@language" or "@direction".',
	        'jsonld.SyntaxError', {code: 'invalid value object', element: rval});
	    }
	    let validCount = count - 1;
	    if('@type' in rval) {
	      validCount -= 1;
	    }
	    if('@index' in rval) {
	      validCount -= 1;
	    }
	    if('@language' in rval) {
	      validCount -= 1;
	    }
	    if('@direction' in rval) {
	      validCount -= 1;
	    }
	    if(validCount !== 0) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; an element containing "@value" may only ' +
	        'have an "@index" property and either "@type" ' +
	        'or either or both "@language" or "@direction".',
	        'jsonld.SyntaxError', {code: 'invalid value object', element: rval});
	    }
	    const values = rval['@value'] === null ? [] : _asArray(rval['@value']);
	    const types = _getValues(rval, '@type');

	    // drop null @values
	    if(_processingMode(activeCtx, 1.1) && types.includes('@json') &&
	      types.length === 1) ; else if(values.length === 0) {
	      // FIXME
	      if(options.eventHandler) {
	        _handleEvent({
	          event: {
	            type: ['JsonLdEvent'],
	            code: 'null @value value',
	            level: 'warning',
	            message: 'Dropping null @value value.',
	            details: {
	              value: rval
	            }
	          },
	          options
	        });
	      }
	      rval = null;
	    } else if(!values.every(v => (_isString(v) || _isEmptyObject(v))) &&
	      '@language' in rval) {
	      // if @language is present, @value must be a string
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; only strings may be language-tagged.',
	        'jsonld.SyntaxError',
	        {code: 'invalid language-tagged value', element: rval});
	    } else if(!types.every(t =>
	      (_isAbsoluteIri(t) && !(_isString(t) && t.indexOf('_:') === 0) ||
	      _isEmptyObject(t)))) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; an element containing "@value" and "@type" ' +
	        'must have an absolute IRI for the value of "@type".',
	        'jsonld.SyntaxError', {code: 'invalid typed value', element: rval});
	    }
	  } else if('@type' in rval && !_isArray(rval['@type'])) {
	    // convert @type to an array
	    rval['@type'] = [rval['@type']];
	  } else if('@set' in rval || '@list' in rval) {
	    // handle @set and @list
	    if(count > 1 && !(count === 2 && '@index' in rval)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; if an element has the property "@set" ' +
	        'or "@list", then it can have at most one other property that is ' +
	        '"@index".', 'jsonld.SyntaxError',
	        {code: 'invalid set or list object', element: rval});
	    }
	    // optimize away @set
	    if('@set' in rval) {
	      rval = rval['@set'];
	      keys = Object.keys(rval);
	      count = keys.length;
	    }
	  } else if(count === 1 && '@language' in rval) {
	    // drop objects with only @language
	    // FIXME
	    if(options.eventHandler) {
	      _handleEvent({
	        event: {
	          type: ['JsonLdEvent'],
	          code: 'object with only @language',
	          level: 'warning',
	          message: 'Dropping object with only @language.',
	          details: {
	            value: rval
	          }
	        },
	        options
	      });
	    }
	    rval = null;
	  }

	  // drop certain top-level objects that do not occur in lists
	  if(_isObject(rval) &&
	    !options.keepFreeFloatingNodes && !insideList &&
	    (activeProperty === null ||
	      expandedActiveProperty === '@graph' ||
	      (_getContextValue(activeCtx, activeProperty, '@container') || [])
	        .includes('@graph')
	    )) {
	    // drop empty object, top-level @value/@list, or object with only @id
	    rval = _dropUnsafeObject({value: rval, count, options});
	  }

	  return rval;
	};

	/**
	 * Drop empty object, top-level @value/@list, or object with only @id
	 *
	 * @param value Value to check.
	 * @param count Number of properties in object.
	 * @param options The expansion options.
	 *
	 * @return null if dropped, value otherwise.
	 */
	function _dropUnsafeObject({
	  value,
	  count,
	  options
	}) {
	  if(count === 0 || '@value' in value || '@list' in value ||
	    (count === 1 && '@id' in value)) {
	    // FIXME
	    if(options.eventHandler) {
	      // FIXME: one event or diff event for empty, @v/@l, {@id}?
	      let code;
	      let message;
	      if(count === 0) {
	        code = 'empty object';
	        message = 'Dropping empty object.';
	      } else if('@value' in value) {
	        code = 'object with only @value';
	        message = 'Dropping object with only @value.';
	      } else if('@list' in value) {
	        code = 'object with only @list';
	        message = 'Dropping object with only @list.';
	      } else if(count === 1 && '@id' in value) {
	        code = 'object with only @id';
	        message = 'Dropping object with only @id.';
	      }
	      _handleEvent({
	        event: {
	          type: ['JsonLdEvent'],
	          code,
	          level: 'warning',
	          message,
	          details: {
	            value
	          }
	        },
	        options
	      });
	    }
	    return null;
	  }
	  return value;
	}

	/**
	 * Expand each key and value of element adding to result
	 *
	 * @param activeCtx the context to use.
	 * @param activeProperty the property for the element.
	 * @param expandedActiveProperty the expansion of activeProperty
	 * @param element the element to expand.
	 * @param expandedParent the expanded result into which to add values.
	 * @param options the expansion options.
	 * @param insideList true if the element is a list, false if not.
	 * @param typeKey first key found expanding to @type.
	 * @param typeScopedContext the context before reverting.
	 */
	async function _expandObject({
	  activeCtx,
	  activeProperty,
	  expandedActiveProperty,
	  element,
	  expandedParent,
	  options = {},
	  insideList,
	  typeKey,
	  typeScopedContext
	}) {
	  const keys = Object.keys(element).sort();
	  const nests = [];
	  let unexpandedValue;

	  // Figure out if this is the type for a JSON literal
	  const isJsonType = element[typeKey] &&
	    _expandIri(activeCtx,
	      (_isArray(element[typeKey]) ? element[typeKey][0] : element[typeKey]),
	      {vocab: true}, {
	        ...options,
	        typeExpansion: true
	      }) === '@json';

	  for(const key of keys) {
	    let value = element[key];
	    let expandedValue;

	    // skip @context
	    if(key === '@context') {
	      continue;
	    }

	    // expand property
	    const expandedProperty = _expandIri(activeCtx, key, {vocab: true}, options);

	    // drop non-absolute IRI keys that aren't keywords
	    if(expandedProperty === null ||
	      !(_isAbsoluteIri(expandedProperty) || _isKeyword(expandedProperty))) {
	      if(options.eventHandler) {
	        _handleEvent({
	          event: {
	            type: ['JsonLdEvent'],
	            code: 'invalid property',
	            level: 'warning',
	            message: 'Dropping property that did not expand into an ' +
	              'absolute IRI or keyword.',
	            details: {
	              property: key,
	              expandedProperty
	            }
	          },
	          options
	        });
	      }
	      continue;
	    }

	    if(_isKeyword(expandedProperty)) {
	      if(expandedActiveProperty === '@reverse') {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; a keyword cannot be used as a @reverse ' +
	          'property.', 'jsonld.SyntaxError',
	          {code: 'invalid reverse property map', value});
	      }
	      if(expandedProperty in expandedParent &&
	         expandedProperty !== '@included' &&
	         expandedProperty !== '@type') {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; colliding keywords detected.',
	          'jsonld.SyntaxError',
	          {code: 'colliding keywords', keyword: expandedProperty});
	      }
	    }

	    // syntax error if @id is not a string
	    if(expandedProperty === '@id') {
	      if(!_isString(value)) {
	        if(!options.isFrame) {
	          throw new JsonLdError(
	            'Invalid JSON-LD syntax; "@id" value must a string.',
	            'jsonld.SyntaxError', {code: 'invalid @id value', value});
	        }
	        if(_isObject(value)) {
	          // empty object is a wildcard
	          if(!_isEmptyObject(value)) {
	            throw new JsonLdError(
	              'Invalid JSON-LD syntax; "@id" value an empty object or array ' +
	              'of strings, if framing',
	              'jsonld.SyntaxError', {code: 'invalid @id value', value});
	          }
	        } else if(_isArray(value)) {
	          if(!value.every(v => _isString(v))) {
	            throw new JsonLdError(
	              'Invalid JSON-LD syntax; "@id" value an empty object or array ' +
	              'of strings, if framing',
	              'jsonld.SyntaxError', {code: 'invalid @id value', value});
	          }
	        } else {
	          throw new JsonLdError(
	            'Invalid JSON-LD syntax; "@id" value an empty object or array ' +
	            'of strings, if framing',
	            'jsonld.SyntaxError', {code: 'invalid @id value', value});
	        }
	      }

	      _addValue(
	        expandedParent, '@id',
	        _asArray(value).map(v => {
	          if(_isString(v)) {
	            const ve = _expandIri(activeCtx, v, {base: true}, options);
	            if(options.eventHandler) {
	              if(ve === null) {
	                // NOTE: spec edge case
	                // See https://github.com/w3c/json-ld-api/issues/480
	                if(v === null) {
	                  _handleEvent({
	                    event: {
	                      type: ['JsonLdEvent'],
	                      code: 'null @id value',
	                      level: 'warning',
	                      message: 'Null @id found.',
	                      details: {
	                        id: v
	                      }
	                    },
	                    options
	                  });
	                } else {
	                  // matched KEYWORD regex
	                  _handleEvent({
	                    event: {
	                      type: ['JsonLdEvent'],
	                      code: 'reserved @id value',
	                      level: 'warning',
	                      message: 'Reserved @id found.',
	                      details: {
	                        id: v
	                      }
	                    },
	                    options
	                  });
	                }
	              } else if(!_isAbsoluteIri(ve)) {
	                _handleEvent({
	                  event: {
	                    type: ['JsonLdEvent'],
	                    code: 'relative @id reference',
	                    level: 'warning',
	                    message: 'Relative @id reference found.',
	                    details: {
	                      id: v,
	                      expandedId: ve
	                    }
	                  },
	                  options
	                });
	              }
	            }
	            return ve;
	          }
	          return v;
	        }),
	        {propertyIsArray: options.isFrame});
	      continue;
	    }

	    if(expandedProperty === '@type') {
	      // if framing, can be a default object, but need to expand
	      // key to determine that
	      if(_isObject(value)) {
	        value = Object.fromEntries(Object.entries(value).map(([k, v]) => [
	          _expandIri(typeScopedContext, k, {vocab: true}),
	          _asArray(v).map(vv =>
	            _expandIri(typeScopedContext, vv, {base: true, vocab: true},
	              {...options, typeExpansion: true})
	          )
	        ]));
	      }
	      _validateTypeValue(value, options.isFrame);
	      _addValue(
	        expandedParent, '@type',
	        _asArray(value).map(v => {
	          if(_isString(v)) {
	            const ve = _expandIri(typeScopedContext, v,
	              {base: true, vocab: true},
	              {...options, typeExpansion: true});
	            if(ve !== '@json' && !_isAbsoluteIri(ve)) {
	              if(options.eventHandler) {
	                _handleEvent({
	                  event: {
	                    type: ['JsonLdEvent'],
	                    code: 'relative @type reference',
	                    level: 'warning',
	                    message: 'Relative @type reference found.',
	                    details: {
	                      type: v
	                    }
	                  },
	                  options
	                });
	              }
	            }
	            return ve;
	          }
	          return v;
	        }),
	        {propertyIsArray: !!options.isFrame});
	      continue;
	    }

	    // Included blocks are treated as an array of separate object nodes sharing
	    // the same referencing active_property.
	    // For 1.0, it is skipped as are other unknown keywords
	    if(expandedProperty === '@included' && _processingMode(activeCtx, 1.1)) {
	      const includedResult = _asArray(await api.expand({
	        activeCtx,
	        activeProperty,
	        element: value,
	        options
	      }));

	      // Expanded values must be node objects
	      if(!includedResult.every(v => _isSubject(v))) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; ' +
	          'values of @included must expand to node objects.',
	          'jsonld.SyntaxError', {code: 'invalid @included value', value});
	      }

	      _addValue(
	        expandedParent, '@included', includedResult, {propertyIsArray: true});
	      continue;
	    }

	    // @graph must be an array or an object
	    if(expandedProperty === '@graph' &&
	      !(_isObject(value) || _isArray(value))) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; "@graph" value must not be an ' +
	        'object or an array.',
	        'jsonld.SyntaxError', {code: 'invalid @graph value', value});
	    }

	    if(expandedProperty === '@value') {
	      // capture value for later
	      // "colliding keywords" check prevents this from being set twice
	      unexpandedValue = value;
	      if(isJsonType && _processingMode(activeCtx, 1.1)) {
	        // no coercion to array, and retain all values
	        expandedParent['@value'] = value;
	      } else {
	        _addValue(
	          expandedParent, '@value', value, {propertyIsArray: options.isFrame});
	      }
	      continue;
	    }

	    // @language must be a string
	    // it should match BCP47
	    if(expandedProperty === '@language') {
	      if(value === null) {
	        // drop null @language values, they expand as if they didn't exist
	        continue;
	      }
	      if(!_isString(value) && !options.isFrame) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; "@language" value must be a string.',
	          'jsonld.SyntaxError',
	          {code: 'invalid language-tagged string', value});
	      }
	      // ensure language value is lowercase
	      value = _asArray(value).map(v => _isString(v) ? v.toLowerCase() : v);

	      // ensure language tag matches BCP47
	      for(const language of value) {
	        if(_isString(language) && !language.match(REGEX_BCP47)) {
	          if(options.eventHandler) {
	            _handleEvent({
	              event: {
	                type: ['JsonLdEvent'],
	                code: 'invalid @language value',
	                level: 'warning',
	                message: '@language value must be valid BCP47.',
	                details: {
	                  language
	                }
	              },
	              options
	            });
	          }
	        }
	      }

	      _addValue(
	        expandedParent, '@language', value, {propertyIsArray: options.isFrame});
	      continue;
	    }

	    // @direction must be "ltr" or "rtl"
	    if(expandedProperty === '@direction') {
	      if(!_isString(value) && !options.isFrame) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; "@direction" value must be a string.',
	          'jsonld.SyntaxError',
	          {code: 'invalid base direction', value});
	      }

	      value = _asArray(value);

	      // ensure direction is "ltr" or "rtl"
	      for(const dir of value) {
	        if(_isString(dir) && dir !== 'ltr' && dir !== 'rtl') {
	          throw new JsonLdError(
	            'Invalid JSON-LD syntax; "@direction" must be "ltr" or "rtl".',
	            'jsonld.SyntaxError',
	            {code: 'invalid base direction', value});
	        }
	      }

	      _addValue(
	        expandedParent, '@direction', value,
	        {propertyIsArray: options.isFrame});
	      continue;
	    }

	    // @index must be a string
	    if(expandedProperty === '@index') {
	      if(!_isString(value)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; "@index" value must be a string.',
	          'jsonld.SyntaxError',
	          {code: 'invalid @index value', value});
	      }
	      _addValue(expandedParent, '@index', value);
	      continue;
	    }

	    // @reverse must be an object
	    if(expandedProperty === '@reverse') {
	      if(!_isObject(value)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; "@reverse" value must be an object.',
	          'jsonld.SyntaxError', {code: 'invalid @reverse value', value});
	      }

	      expandedValue = await api.expand({
	        activeCtx,
	        activeProperty: '@reverse',
	        element: value,
	        options
	      });
	      // properties double-reversed
	      if('@reverse' in expandedValue) {
	        for(const property in expandedValue['@reverse']) {
	          _addValue(
	            expandedParent, property, expandedValue['@reverse'][property],
	            {propertyIsArray: true});
	        }
	      }

	      // FIXME: can this be merged with code below to simplify?
	      // merge in all reversed properties
	      let reverseMap = expandedParent['@reverse'] || null;
	      for(const property in expandedValue) {
	        if(property === '@reverse') {
	          continue;
	        }
	        if(reverseMap === null) {
	          reverseMap = expandedParent['@reverse'] = {};
	        }
	        _addValue(reverseMap, property, [], {propertyIsArray: true});
	        const items = expandedValue[property];
	        for(let ii = 0; ii < items.length; ++ii) {
	          const item = items[ii];
	          if(_isValue(item) || _isList(item)) {
	            throw new JsonLdError(
	              'Invalid JSON-LD syntax; "@reverse" value must not be a ' +
	              '@value or an @list.', 'jsonld.SyntaxError',
	              {code: 'invalid reverse property value', value: expandedValue});
	          }
	          _addValue(reverseMap, property, item, {propertyIsArray: true});
	        }
	      }

	      continue;
	    }

	    // nested keys
	    if(expandedProperty === '@nest') {
	      nests.push(key);
	      continue;
	    }

	    // use potential scoped context for key
	    let termCtx = activeCtx;
	    const ctx = _getContextValue(activeCtx, key, '@context');
	    if(!_isUndefined(ctx)) {
	      termCtx = await _processContext({
	        activeCtx,
	        localCtx: ctx,
	        propagate: true,
	        overrideProtected: true,
	        options
	      });
	    }

	    const container = _getContextValue(activeCtx, key, '@container') || [];

	    if(container.includes('@language') && _isObject(value)) {
	      const direction = _getContextValue(termCtx, key, '@direction');
	      // handle language map container (skip if value is not an object)
	      expandedValue = _expandLanguageMap(termCtx, value, direction, options);
	    } else if(container.includes('@index') && _isObject(value)) {
	      // handle index container (skip if value is not an object)
	      const asGraph = container.includes('@graph');
	      const indexKey = _getContextValue(termCtx, key, '@index') || '@index';
	      const propertyIndex = indexKey !== '@index' &&
	        _expandIri(activeCtx, indexKey, {vocab: true}, options);

	      expandedValue = await _expandIndexMap({
	        activeCtx: termCtx,
	        options,
	        activeProperty: key,
	        value,
	        asGraph,
	        indexKey,
	        propertyIndex
	      });
	    } else if(container.includes('@id') && _isObject(value)) {
	      // handle id container (skip if value is not an object)
	      const asGraph = container.includes('@graph');
	      expandedValue = await _expandIndexMap({
	        activeCtx: termCtx,
	        options,
	        activeProperty: key,
	        value,
	        asGraph,
	        indexKey: '@id'
	      });
	    } else if(container.includes('@type') && _isObject(value)) {
	      // handle type container (skip if value is not an object)
	      expandedValue = await _expandIndexMap({
	        // since container is `@type`, revert type scoped context when expanding
	        activeCtx: termCtx.revertToPreviousContext(),
	        options,
	        activeProperty: key,
	        value,
	        asGraph: false,
	        indexKey: '@type'
	      });
	    } else {
	      // recurse into @list or @set
	      const isList = expandedProperty === '@list';
	      if(isList || expandedProperty === '@set') {
	        let nextActiveProperty = activeProperty;
	        if(isList && expandedActiveProperty === '@graph') {
	          nextActiveProperty = null;
	        }
	        expandedValue = await api.expand({
	          activeCtx: termCtx,
	          activeProperty: nextActiveProperty,
	          element: value,
	          options,
	          insideList: isList
	        });
	      } else if(
	        _getContextValue(activeCtx, key, '@type') === '@json') {
	        expandedValue = {
	          '@type': '@json',
	          '@value': value
	        };
	      } else {
	        // recursively expand value with key as new active property
	        expandedValue = await api.expand({
	          activeCtx: termCtx,
	          activeProperty: key,
	          element: value,
	          options,
	          insideList: false
	        });
	      }
	    }

	    // drop null values if property is not @value
	    if(expandedValue === null && expandedProperty !== '@value') {
	      // FIXME: event?
	      //unmappedValue: value,
	      //expandedProperty,
	      //key,
	      continue;
	    }

	    // convert expanded value to @list if container specifies it
	    if(expandedProperty !== '@list' && !_isList(expandedValue) &&
	      container.includes('@list')) {
	      // ensure expanded value in @list is an array
	      expandedValue = {'@list': _asArray(expandedValue)};
	    }

	    // convert expanded value to @graph if container specifies it
	    // and value is not, itself, a graph
	    // index cases handled above
	    if(container.includes('@graph') &&
	      !container.some(key => key === '@id' || key === '@index')) {
	      // ensure expanded values are in an array
	      expandedValue = _asArray(expandedValue);
	      if(!options.isFrame) {
	        // drop items if needed
	        expandedValue = expandedValue.filter(v => {
	          const count = Object.keys(v).length;
	          return _dropUnsafeObject({value: v, count, options}) !== null;
	        });
	      }
	      if(expandedValue.length === 0) {
	        // all items dropped, skip adding and continue
	        continue;
	      }
	      // convert to graph
	      expandedValue = expandedValue.map(v => ({'@graph': _asArray(v)}));
	    }

	    // FIXME: can this be merged with code above to simplify?
	    // merge in reverse properties
	    if(termCtx.mappings.has(key) && termCtx.mappings.get(key).reverse) {
	      const reverseMap =
	        expandedParent['@reverse'] = expandedParent['@reverse'] || {};
	      expandedValue = _asArray(expandedValue);
	      for(let ii = 0; ii < expandedValue.length; ++ii) {
	        const item = expandedValue[ii];
	        if(_isValue(item) || _isList(item)) {
	          throw new JsonLdError(
	            'Invalid JSON-LD syntax; "@reverse" value must not be a ' +
	            '@value or an @list.', 'jsonld.SyntaxError',
	            {code: 'invalid reverse property value', value: expandedValue});
	        }
	        _addValue(reverseMap, expandedProperty, item, {propertyIsArray: true});
	      }
	      continue;
	    }

	    // add value for property
	    // special keywords handled above
	    _addValue(expandedParent, expandedProperty, expandedValue, {
	      propertyIsArray: true
	    });
	  }

	  // @value must not be an object or an array (unless framing) or if @type is
	  // @json
	  if('@value' in expandedParent) {
	    if(expandedParent['@type'] === '@json' && _processingMode(activeCtx, 1.1)) ; else if((_isObject(unexpandedValue) || _isArray(unexpandedValue)) &&
	      !options.isFrame) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; "@value" value must not be an ' +
	        'object or an array.',
	        'jsonld.SyntaxError',
	        {code: 'invalid value object value', value: unexpandedValue});
	    }
	  }

	  // expand each nested key
	  for(const key of nests) {
	    const nestedValues = _isArray(element[key]) ? element[key] : [element[key]];
	    for(const nv of nestedValues) {
	      if(!_isObject(nv) || Object.keys(nv).some(k =>
	        _expandIri(activeCtx, k, {vocab: true}, options) === '@value')) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; nested value must be a node object.',
	          'jsonld.SyntaxError',
	          {code: 'invalid @nest value', value: nv});
	      }
	      await _expandObject({
	        activeCtx,
	        activeProperty,
	        expandedActiveProperty,
	        element: nv,
	        expandedParent,
	        options,
	        insideList,
	        typeScopedContext,
	        typeKey
	      });
	    }
	  }
	}

	/**
	 * Expands the given value by using the coercion and keyword rules in the
	 * given context.
	 *
	 * @param activeCtx the active context to use.
	 * @param activeProperty the active property the value is associated with.
	 * @param value the value to expand.
	 * @param {Object} [options] - processing options.
	 *
	 * @return the expanded value.
	 */
	function _expandValue({activeCtx, activeProperty, value, options}) {
	  // nothing to expand
	  if(value === null || value === undefined) {
	    return null;
	  }

	  // special-case expand @id and @type (skips '@id' expansion)
	  const expandedProperty = _expandIri(
	    activeCtx, activeProperty, {vocab: true}, options);
	  if(expandedProperty === '@id') {
	    return _expandIri(activeCtx, value, {base: true}, options);
	  } else if(expandedProperty === '@type') {
	    return _expandIri(activeCtx, value, {vocab: true, base: true},
	      {...options, typeExpansion: true});
	  }

	  // get type definition from context
	  const type = _getContextValue(activeCtx, activeProperty, '@type');

	  // do @id expansion (automatic for @graph)
	  if((type === '@id' || expandedProperty === '@graph') && _isString(value)) {
	    const expandedValue = _expandIri(activeCtx, value, {base: true}, options);
	    // NOTE: handle spec edge case and avoid invalid {"@id": null}
	    if(expandedValue === null && value.match(REGEX_KEYWORD)) {
	      if(options.eventHandler) {
	        _handleEvent({
	          event: {
	            type: ['JsonLdEvent'],
	            code: 'reserved @id value',
	            level: 'warning',
	            message: 'Reserved @id found.',
	            details: {
	              id: activeProperty
	            }
	          },
	          options
	        });
	      }
	    }
	    return {'@id': expandedValue};
	  }
	  // do @id expansion w/vocab
	  if(type === '@vocab' && _isString(value)) {
	    return {
	      '@id': _expandIri(activeCtx, value, {vocab: true, base: true}, options)
	    };
	  }

	  // do not expand keyword values
	  if(_isKeyword(expandedProperty)) {
	    return value;
	  }

	  const rval = {};

	  if(type && !['@id', '@vocab', '@none'].includes(type)) {
	    // other type
	    rval['@type'] = type;
	  } else if(_isString(value)) {
	    // check for language tagging for strings
	    const language = _getContextValue(activeCtx, activeProperty, '@language');
	    if(language !== null) {
	      rval['@language'] = language;
	    }
	    const direction = _getContextValue(activeCtx, activeProperty, '@direction');
	    if(direction !== null) {
	      rval['@direction'] = direction;
	    }
	  }
	  // do conversion of values that aren't basic JSON types to strings
	  if(!['boolean', 'number', 'string'].includes(typeof value)) {
	    value = value.toString();
	  }
	  rval['@value'] = value;

	  return rval;
	}

	/**
	 * Expands a language map.
	 *
	 * @param activeCtx the active context to use.
	 * @param languageMap the language map to expand.
	 * @param direction the direction to apply to values.
	 * @param {Object} [options] - processing options.
	 *
	 * @return the expanded language map.
	 */
	function _expandLanguageMap(activeCtx, languageMap, direction, options) {
	  const rval = [];
	  const keys = Object.keys(languageMap).sort();
	  for(const key of keys) {
	    const expandedKey = _expandIri(activeCtx, key, {vocab: true}, options);
	    let val = languageMap[key];
	    if(!_isArray(val)) {
	      val = [val];
	    }
	    for(const item of val) {
	      if(item === null) {
	        // null values are allowed (8.5) but ignored (3.1)
	        continue;
	      }
	      if(!_isString(item)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; language map values must be strings.',
	          'jsonld.SyntaxError',
	          {code: 'invalid language map value', languageMap});
	      }
	      const val = {'@value': item};
	      if(expandedKey !== '@none') {
	        if(!key.match(REGEX_BCP47)) {
	          if(options.eventHandler) {
	            _handleEvent({
	              event: {
	                type: ['JsonLdEvent'],
	                code: 'invalid @language value',
	                level: 'warning',
	                message: '@language value must be valid BCP47.',
	                details: {
	                  language: key
	                }
	              },
	              options
	            });
	          }
	        }
	        val['@language'] = key.toLowerCase();
	      }
	      if(direction) {
	        val['@direction'] = direction;
	      }
	      rval.push(val);
	    }
	  }
	  return rval;
	}

	async function _expandIndexMap({
	  activeCtx, options, activeProperty, value, asGraph, indexKey, propertyIndex
	}) {
	  const rval = [];
	  const keys = Object.keys(value).sort();
	  const isTypeIndex = indexKey === '@type';
	  for(let key of keys) {
	    // if indexKey is @type, there may be a context defined for it
	    if(isTypeIndex) {
	      const ctx = _getContextValue(activeCtx, key, '@context');
	      if(!_isUndefined(ctx)) {
	        activeCtx = await _processContext({
	          activeCtx,
	          localCtx: ctx,
	          propagate: false,
	          options
	        });
	      }
	    }

	    let val = value[key];
	    if(!_isArray(val)) {
	      val = [val];
	    }

	    val = await api.expand({
	      activeCtx,
	      activeProperty,
	      element: val,
	      options,
	      insideList: false,
	      insideIndex: true
	    });

	    // expand for @type, but also for @none
	    let expandedKey;
	    if(propertyIndex) {
	      if(key === '@none') {
	        expandedKey = '@none';
	      } else {
	        expandedKey = _expandValue(
	          {activeCtx, activeProperty: indexKey, value: key, options});
	      }
	    } else {
	      expandedKey = _expandIri(activeCtx, key, {vocab: true}, options);
	    }

	    if(indexKey === '@id') {
	      // expand document relative
	      key = _expandIri(activeCtx, key, {base: true}, options);
	    } else if(isTypeIndex) {
	      key = expandedKey;
	    }

	    for(let item of val) {
	      // If this is also a @graph container, turn items into graphs
	      if(asGraph && !_isGraph(item)) {
	        item = {'@graph': [item]};
	      }
	      if(indexKey === '@type') {
	        if(expandedKey === '@none') ; else if(item['@type']) {
	          item['@type'] = [key].concat(item['@type']);
	        } else {
	          item['@type'] = [key];
	        }
	      } else if(_isValue(item) &&
	        !['@language', '@type', '@index'].includes(indexKey)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; Attempt to add illegal key to value ' +
	          `object: "${indexKey}".`,
	          'jsonld.SyntaxError',
	          {code: 'invalid value object', value: item});
	      } else if(propertyIndex) {
	        // index is a property to be expanded, and values interpreted for that
	        // property
	        if(expandedKey !== '@none') {
	          // expand key as a value
	          _addValue(item, propertyIndex, expandedKey, {
	            propertyIsArray: true,
	            prependValue: true
	          });
	        }
	      } else if(expandedKey !== '@none' && !(indexKey in item)) {
	        item[indexKey] = key;
	      }
	      rval.push(item);
	    }
	  }
	  return rval;
	}
	return expand;
}

/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */

var nodeMap;
var hasRequiredNodeMap;

function requireNodeMap () {
	if (hasRequiredNodeMap) return nodeMap;
	hasRequiredNodeMap = 1;

	const {isKeyword} = /*@__PURE__*/ requireContext();
	const graphTypes = /*@__PURE__*/ requireGraphTypes();
	const types = /*@__PURE__*/ requireTypes();
	const util = /*@__PURE__*/ requireUtil();
	const JsonLdError = /*@__PURE__*/ requireJsonLdError();

	const api = {};
	nodeMap = api;

	/**
	 * Creates a merged JSON-LD node map (node ID => node).
	 *
	 * @param input the expanded JSON-LD to create a node map of.
	 * @param [options] the options to use:
	 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
	 *
	 * @return the node map.
	 */
	api.createMergedNodeMap = (input, options) => {
	  options = options || {};

	  // produce a map of all subjects and name each bnode
	  const issuer = options.issuer || new util.IdentifierIssuer('_:b');
	  const graphs = {'@default': {}};
	  api.createNodeMap(input, graphs, '@default', issuer);

	  // add all non-default graphs to default graph
	  return api.mergeNodeMaps(graphs);
	};

	/**
	 * Recursively flattens the subjects in the given JSON-LD expanded input
	 * into a node map.
	 *
	 * @param input the JSON-LD expanded input.
	 * @param graphs a map of graph name to subject map.
	 * @param graph the name of the current graph.
	 * @param issuer the blank node identifier issuer.
	 * @param name the name assigned to the current input if it is a bnode.
	 * @param list the list to append to, null for none.
	 */
	api.createNodeMap = (input, graphs, graph, issuer, name, list) => {
	  // recurse through array
	  if(types.isArray(input)) {
	    for(const node of input) {
	      api.createNodeMap(node, graphs, graph, issuer, undefined, list);
	    }
	    return;
	  }

	  // add non-object to list
	  if(!types.isObject(input)) {
	    if(list) {
	      list.push(input);
	    }
	    return;
	  }

	  // add values to list
	  if(graphTypes.isValue(input)) {
	    if('@type' in input) {
	      let type = input['@type'];
	      // rename @type blank node
	      if(type.indexOf('_:') === 0) {
	        input['@type'] = type = issuer.getId(type);
	      }
	    }
	    if(list) {
	      list.push(input);
	    }
	    return;
	  } else if(list && graphTypes.isList(input)) {
	    const _list = [];
	    api.createNodeMap(input['@list'], graphs, graph, issuer, name, _list);
	    list.push({'@list': _list});
	    return;
	  }

	  // Note: At this point, input must be a subject.

	  // spec requires @type to be named first, so assign names early
	  if('@type' in input) {
	    const types = input['@type'];
	    for(const type of types) {
	      if(type.indexOf('_:') === 0) {
	        issuer.getId(type);
	      }
	    }
	  }

	  // get name for subject
	  if(types.isUndefined(name)) {
	    name = graphTypes.isBlankNode(input) ?
	      issuer.getId(input['@id']) : input['@id'];
	  }

	  // add subject reference to list
	  if(list) {
	    list.push({'@id': name});
	  }

	  // create new subject or merge into existing one
	  const subjects = graphs[graph];
	  const subject = subjects[name] = subjects[name] || {};
	  subject['@id'] = name;
	  const properties = Object.keys(input).sort();
	  for(let property of properties) {
	    // skip @id
	    if(property === '@id') {
	      continue;
	    }

	    // handle reverse properties
	    if(property === '@reverse') {
	      const referencedNode = {'@id': name};
	      const reverseMap = input['@reverse'];
	      for(const reverseProperty in reverseMap) {
	        const items = reverseMap[reverseProperty];
	        for(const item of items) {
	          let itemName = item['@id'];
	          if(graphTypes.isBlankNode(item)) {
	            itemName = issuer.getId(itemName);
	          }
	          api.createNodeMap(item, graphs, graph, issuer, itemName);
	          util.addValue(
	            subjects[itemName], reverseProperty, referencedNode,
	            {propertyIsArray: true, allowDuplicate: false});
	        }
	      }
	      continue;
	    }

	    // recurse into graph
	    if(property === '@graph') {
	      // add graph subjects map entry
	      if(!(name in graphs)) {
	        graphs[name] = {};
	      }
	      api.createNodeMap(input[property], graphs, name, issuer);
	      continue;
	    }

	    // recurse into included
	    if(property === '@included') {
	      api.createNodeMap(input[property], graphs, graph, issuer);
	      continue;
	    }

	    // copy non-@type keywords
	    if(property !== '@type' && isKeyword(property)) {
	      if(property === '@index' && property in subject &&
	        (input[property] !== subject[property] ||
	        input[property]['@id'] !== subject[property]['@id'])) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; conflicting @index property detected.',
	          'jsonld.SyntaxError',
	          {code: 'conflicting indexes', subject});
	      }
	      subject[property] = input[property];
	      continue;
	    }

	    // iterate over objects
	    const objects = input[property];

	    // if property is a bnode, assign it a new id
	    if(property.indexOf('_:') === 0) {
	      property = issuer.getId(property);
	    }

	    // ensure property is added for empty arrays
	    if(objects.length === 0) {
	      util.addValue(subject, property, [], {propertyIsArray: true});
	      continue;
	    }
	    for(let o of objects) {
	      if(property === '@type') {
	        // rename @type blank nodes
	        o = (o.indexOf('_:') === 0) ? issuer.getId(o) : o;
	      }

	      // handle embedded subject or subject reference
	      if(graphTypes.isSubject(o) || graphTypes.isSubjectReference(o)) {
	        // skip null @id
	        if('@id' in o && !o['@id']) {
	          continue;
	        }

	        // relabel blank node @id
	        const id = graphTypes.isBlankNode(o) ?
	          issuer.getId(o['@id']) : o['@id'];

	        // add reference and recurse
	        util.addValue(
	          subject, property, {'@id': id},
	          {propertyIsArray: true, allowDuplicate: false});
	        api.createNodeMap(o, graphs, graph, issuer, id);
	      } else if(graphTypes.isValue(o)) {
	        util.addValue(
	          subject, property, o,
	          {propertyIsArray: true, allowDuplicate: false});
	      } else if(graphTypes.isList(o)) {
	        // handle @list
	        const _list = [];
	        api.createNodeMap(o['@list'], graphs, graph, issuer, name, _list);
	        o = {'@list': _list};
	        util.addValue(
	          subject, property, o,
	          {propertyIsArray: true, allowDuplicate: false});
	      } else {
	        // handle @value
	        api.createNodeMap(o, graphs, graph, issuer, name);
	        util.addValue(
	          subject, property, o, {propertyIsArray: true, allowDuplicate: false});
	      }
	    }
	  }
	};

	/**
	 * Merge separate named graphs into a single merged graph including
	 * all nodes from the default graph and named graphs.
	 *
	 * @param graphs a map of graph name to subject map.
	 *
	 * @return the merged graph map.
	 */
	api.mergeNodeMapGraphs = graphs => {
	  const merged = {};
	  for(const name of Object.keys(graphs).sort()) {
	    for(const id of Object.keys(graphs[name]).sort()) {
	      const node = graphs[name][id];
	      if(!(id in merged)) {
	        merged[id] = {'@id': id};
	      }
	      const mergedNode = merged[id];

	      for(const property of Object.keys(node).sort()) {
	        if(isKeyword(property) && property !== '@type') {
	          // copy keywords
	          mergedNode[property] = util.clone(node[property]);
	        } else {
	          // merge objects
	          for(const value of node[property]) {
	            util.addValue(
	              mergedNode, property, util.clone(value),
	              {propertyIsArray: true, allowDuplicate: false});
	          }
	        }
	      }
	    }
	  }

	  return merged;
	};

	api.mergeNodeMaps = graphs => {
	  // add all non-default graphs to default graph
	  const defaultGraph = graphs['@default'];
	  const graphNames = Object.keys(graphs).sort();
	  for(const graphName of graphNames) {
	    if(graphName === '@default') {
	      continue;
	    }
	    const nodeMap = graphs[graphName];
	    let subject = defaultGraph[graphName];
	    if(!subject) {
	      defaultGraph[graphName] = subject = {
	        '@id': graphName,
	        '@graph': []
	      };
	    } else if(!('@graph' in subject)) {
	      subject['@graph'] = [];
	    }
	    const graph = subject['@graph'];
	    for(const id of Object.keys(nodeMap).sort()) {
	      const node = nodeMap[id];
	      // only add full subjects
	      if(!graphTypes.isSubjectReference(node)) {
	        graph.push(node);
	      }
	    }
	  }
	  return defaultGraph;
	};
	return nodeMap;
}

/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */

var flatten;
var hasRequiredFlatten;

function requireFlatten () {
	if (hasRequiredFlatten) return flatten;
	hasRequiredFlatten = 1;

	const {
	  isSubjectReference: _isSubjectReference
	} = /*@__PURE__*/ requireGraphTypes();

	const {
	  createMergedNodeMap: _createMergedNodeMap
	} = /*@__PURE__*/ requireNodeMap();

	const api = {};
	flatten = api;

	/**
	 * Performs JSON-LD flattening.
	 *
	 * @param input the expanded JSON-LD to flatten.
	 *
	 * @return the flattened output.
	 */
	api.flatten = input => {
	  const defaultGraph = _createMergedNodeMap(input);

	  // produce flattened output
	  const flattened = [];
	  const keys = Object.keys(defaultGraph).sort();
	  for(let ki = 0; ki < keys.length; ++ki) {
	    const node = defaultGraph[keys[ki]];
	    // only add full subjects to top-level
	    if(!_isSubjectReference(node)) {
	      flattened.push(node);
	    }
	  }
	  return flattened;
	};
	return flatten;
}

/*
 * Copyright (c) 2017-2023 Digital Bazaar, Inc. All rights reserved.
 */

var fromRdf;
var hasRequiredFromRdf;

function requireFromRdf () {
	if (hasRequiredFromRdf) return fromRdf;
	hasRequiredFromRdf = 1;

	const JsonLdError = /*@__PURE__*/ requireJsonLdError();
	const graphTypes = /*@__PURE__*/ requireGraphTypes();
	const types = /*@__PURE__*/ requireTypes();

	const {
	  REGEX_BCP47,
	  addValue: _addValue
	} = /*@__PURE__*/ requireUtil();

	const {
	  handleEvent: _handleEvent
	} = /*@__PURE__*/ requireEvents();

	// constants
	const {
	  // RDF,
	  RDF_LIST,
	  RDF_FIRST,
	  RDF_REST,
	  RDF_NIL,
	  RDF_TYPE,
	  // RDF_PLAIN_LITERAL,
	  // RDF_XML_LITERAL,
	  RDF_JSON_LITERAL,
	  // RDF_OBJECT,
	  // RDF_LANGSTRING,

	  // XSD,
	  XSD_BOOLEAN,
	  XSD_DOUBLE,
	  XSD_INTEGER,
	  XSD_STRING,
	} = /*@__PURE__*/ requireConstants();

	const api = {};
	fromRdf = api;

	/**
	 * Converts an RDF dataset to JSON-LD.
	 *
	 * @param dataset the RDF dataset.
	 * @param options the RDF serialization options.
	 *
	 * @return a Promise that resolves to the JSON-LD output.
	 */
	api.fromRDF = async (
	  dataset,
	  options
	) => {
	  const {
	    useRdfType = false,
	    useNativeTypes = false,
	    rdfDirection = null
	  } = options;
	  // FIXME: use Maps?
	  const defaultGraph = {};
	  const graphMap = {'@default': defaultGraph};
	  const referencedOnce = {};
	  if(rdfDirection) {
	    if(rdfDirection === 'compound-literal') {
	      throw new JsonLdError(
	        'Unsupported rdfDirection value.',
	        'jsonld.InvalidRdfDirection',
	        {value: rdfDirection});
	    } else if(rdfDirection !== 'i18n-datatype') {
	      throw new JsonLdError(
	        'Unknown rdfDirection value.',
	        'jsonld.InvalidRdfDirection',
	        {value: rdfDirection});
	    }
	  }

	  for(const quad of dataset) {
	    // TODO: change 'name' to 'graph'
	    const name = (quad.graph.termType === 'DefaultGraph') ?
	      '@default' : quad.graph.value;
	    if(!(name in graphMap)) {
	      graphMap[name] = {};
	    }
	    if(name !== '@default' && !(name in defaultGraph)) {
	      defaultGraph[name] = {'@id': name};
	    }

	    const nodeMap = graphMap[name];

	    // get subject, predicate, object
	    const s = quad.subject.value;
	    const p = quad.predicate.value;
	    const o = quad.object;

	    if(!(s in nodeMap)) {
	      nodeMap[s] = {'@id': s};
	    }
	    const node = nodeMap[s];

	    const objectIsNode = o.termType.endsWith('Node');
	    if(objectIsNode && !(o.value in nodeMap)) {
	      nodeMap[o.value] = {'@id': o.value};
	    }

	    if(p === RDF_TYPE && !useRdfType && objectIsNode) {
	      _addValue(node, '@type', o.value, {propertyIsArray: true});
	      continue;
	    }

	    const value = _RDFToObject(o, useNativeTypes, rdfDirection, options);
	    _addValue(node, p, value, {propertyIsArray: true});

	    // object may be an RDF list/partial list node but we can't know easily
	    // until all triples are read
	    if(objectIsNode) {
	      if(o.value === RDF_NIL) {
	        // track rdf:nil uniquely per graph
	        const object = nodeMap[o.value];
	        if(!('usages' in object)) {
	          object.usages = [];
	        }
	        object.usages.push({
	          node,
	          property: p,
	          value
	        });
	      } else if(o.value in referencedOnce) {
	        // object referenced more than once
	        referencedOnce[o.value] = false;
	      } else {
	        // keep track of single reference
	        referencedOnce[o.value] = {
	          node,
	          property: p,
	          value
	        };
	      }
	    }
	  }

	  /*
	  for(let name in dataset) {
	    const graph = dataset[name];
	    if(!(name in graphMap)) {
	      graphMap[name] = {};
	    }
	    if(name !== '@default' && !(name in defaultGraph)) {
	      defaultGraph[name] = {'@id': name};
	    }
	    const nodeMap = graphMap[name];
	    for(let ti = 0; ti < graph.length; ++ti) {
	      const triple = graph[ti];

	      // get subject, predicate, object
	      const s = triple.subject.value;
	      const p = triple.predicate.value;
	      const o = triple.object;

	      if(!(s in nodeMap)) {
	        nodeMap[s] = {'@id': s};
	      }
	      const node = nodeMap[s];

	      const objectIsId = (o.type === 'IRI' || o.type === 'blank node');
	      if(objectIsId && !(o.value in nodeMap)) {
	        nodeMap[o.value] = {'@id': o.value};
	      }

	      if(p === RDF_TYPE && !useRdfType && objectIsId) {
	        _addValue(node, '@type', o.value, {propertyIsArray: true});
	        continue;
	      }

	      const value = _RDFToObject(o, useNativeTypes);
	      _addValue(node, p, value, {propertyIsArray: true});

	      // object may be an RDF list/partial list node but we can't know easily
	      // until all triples are read
	      if(objectIsId) {
	        if(o.value === RDF_NIL) {
	          // track rdf:nil uniquely per graph
	          const object = nodeMap[o.value];
	          if(!('usages' in object)) {
	            object.usages = [];
	          }
	          object.usages.push({
	            node: node,
	            property: p,
	            value: value
	          });
	        } else if(o.value in referencedOnce) {
	          // object referenced more than once
	          referencedOnce[o.value] = false;
	        } else {
	          // keep track of single reference
	          referencedOnce[o.value] = {
	            node: node,
	            property: p,
	            value: value
	          };
	        }
	      }
	    }
	  }*/

	  // convert linked lists to @list arrays
	  for(const name in graphMap) {
	    const graphObject = graphMap[name];

	    // no @lists to be converted, continue
	    if(!(RDF_NIL in graphObject)) {
	      continue;
	    }

	    // iterate backwards through each RDF list
	    const nil = graphObject[RDF_NIL];
	    if(!nil.usages) {
	      continue;
	    }
	    for(let usage of nil.usages) {
	      let node = usage.node;
	      let property = usage.property;
	      let head = usage.value;
	      const list = [];
	      const listNodes = [];

	      // ensure node is a well-formed list node; it must:
	      // 1. Be referenced only once.
	      // 2. Have an array for rdf:first that has 1 item.
	      // 3. Have an array for rdf:rest that has 1 item.
	      // 4. Have no keys other than: @id, rdf:first, rdf:rest, and,
	      //   optionally, @type where the value is rdf:List.
	      let nodeKeyCount = Object.keys(node).length;
	      while(property === RDF_REST &&
	        types.isObject(referencedOnce[node['@id']]) &&
	        types.isArray(node[RDF_FIRST]) && node[RDF_FIRST].length === 1 &&
	        types.isArray(node[RDF_REST]) && node[RDF_REST].length === 1 &&
	        (nodeKeyCount === 3 ||
	          (nodeKeyCount === 4 && types.isArray(node['@type']) &&
	          node['@type'].length === 1 && node['@type'][0] === RDF_LIST))) {
	        list.push(node[RDF_FIRST][0]);
	        listNodes.push(node['@id']);

	        // get next node, moving backwards through list
	        usage = referencedOnce[node['@id']];
	        node = usage.node;
	        property = usage.property;
	        head = usage.value;
	        nodeKeyCount = Object.keys(node).length;

	        // if node is not a blank node, then list head found
	        if(!graphTypes.isBlankNode(node)) {
	          break;
	        }
	      }

	      // transform list into @list object
	      delete head['@id'];
	      head['@list'] = list.reverse();
	      for(const listNode of listNodes) {
	        delete graphObject[listNode];
	      }
	    }

	    delete nil.usages;
	  }

	  const result = [];
	  const subjects = Object.keys(defaultGraph).sort();
	  for(const subject of subjects) {
	    const node = defaultGraph[subject];
	    if(subject in graphMap) {
	      const graph = node['@graph'] = [];
	      const graphObject = graphMap[subject];
	      const graphSubjects = Object.keys(graphObject).sort();
	      for(const graphSubject of graphSubjects) {
	        const node = graphObject[graphSubject];
	        // only add full subjects to top-level
	        if(!graphTypes.isSubjectReference(node)) {
	          graph.push(node);
	        }
	      }
	    }
	    // only add full subjects to top-level
	    if(!graphTypes.isSubjectReference(node)) {
	      result.push(node);
	    }
	  }

	  return result;
	};

	/**
	 * Converts an RDF triple object to a JSON-LD object.
	 *
	 * @param o the RDF triple object to convert.
	 * @param useNativeTypes true to output native types, false not to.
	 * @param rdfDirection text direction mode [null, i18n-datatype]
	 * @param options top level API options
	 *
	 * @return the JSON-LD object.
	 */
	function _RDFToObject(o, useNativeTypes, rdfDirection, options) {
	  // convert NamedNode/BlankNode object to JSON-LD
	  if(o.termType.endsWith('Node')) {
	    return {'@id': o.value};
	  }

	  // convert literal to JSON-LD
	  const rval = {'@value': o.value};

	  // add language
	  if(o.language) {
	    if(!o.language.match(REGEX_BCP47)) {
	      if(options.eventHandler) {
	        _handleEvent({
	          event: {
	            type: ['JsonLdEvent'],
	            code: 'invalid @language value',
	            level: 'warning',
	            message: '@language value must be valid BCP47.',
	            details: {
	              language: o.language
	            }
	          },
	          options
	        });
	      }
	    }
	    rval['@language'] = o.language;
	  } else {
	    let type = o.datatype.value;
	    if(!type) {
	      type = XSD_STRING;
	    }
	    if(type === RDF_JSON_LITERAL) {
	      type = '@json';
	      try {
	        rval['@value'] = JSON.parse(rval['@value']);
	      } catch(e) {
	        throw new JsonLdError(
	          'JSON literal could not be parsed.',
	          'jsonld.InvalidJsonLiteral',
	          {code: 'invalid JSON literal', value: rval['@value'], cause: e});
	      }
	    }
	    // use native types for certain xsd types
	    if(useNativeTypes) {
	      if(type === XSD_BOOLEAN) {
	        if(rval['@value'] === 'true') {
	          rval['@value'] = true;
	        } else if(rval['@value'] === 'false') {
	          rval['@value'] = false;
	        }
	      } else if(types.isNumeric(rval['@value'])) {
	        if(type === XSD_INTEGER) {
	          const i = parseInt(rval['@value'], 10);
	          if(i.toFixed(0) === rval['@value']) {
	            rval['@value'] = i;
	          }
	        } else if(type === XSD_DOUBLE) {
	          rval['@value'] = parseFloat(rval['@value']);
	        }
	      }
	      // do not add native type
	      if(![XSD_BOOLEAN, XSD_INTEGER, XSD_DOUBLE, XSD_STRING].includes(type)) {
	        rval['@type'] = type;
	      }
	    } else if(rdfDirection === 'i18n-datatype' &&
	      type.startsWith('https://www.w3.org/ns/i18n#')) {
	      const [, language, direction] = type.split(/[#_]/);
	      if(language.length > 0) {
	        rval['@language'] = language;
	        if(!language.match(REGEX_BCP47)) {
	          if(options.eventHandler) {
	            _handleEvent({
	              event: {
	                type: ['JsonLdEvent'],
	                code: 'invalid @language value',
	                level: 'warning',
	                message: '@language value must be valid BCP47.',
	                details: {
	                  language
	                }
	              },
	              options
	            });
	          }
	        }
	      }
	      rval['@direction'] = direction;
	    } else if(type !== XSD_STRING) {
	      rval['@type'] = type;
	    }
	  }

	  return rval;
	}
	return fromRdf;
}

/* jshint esversion: 6 */

var canonicalize;
var hasRequiredCanonicalize;

function requireCanonicalize () {
	if (hasRequiredCanonicalize) return canonicalize;
	hasRequiredCanonicalize = 1;

	canonicalize = function serialize (object) {
	  if (object === null || typeof object !== 'object' || object.toJSON != null) {
	    return JSON.stringify(object);
	  }

	  if (Array.isArray(object)) {
	    return '[' + object.reduce((t, cv, ci) => {
	      const comma = ci === 0 ? '' : ',';
	      const value = cv === undefined || typeof cv === 'symbol' ? null : cv;
	      return t + comma + serialize(value);
	    }, '') + ']';
	  }

	  return '{' + Object.keys(object).sort().reduce((t, cv, ci) => {
	    if (object[cv] === undefined ||
	        typeof object[cv] === 'symbol') {
	      return t;
	    }
	    const comma = t.length === 0 ? '' : ',';
	    return t + comma + serialize(cv) + ':' + serialize(object[cv]);
	  }, '') + '}';
	};
	return canonicalize;
}

/*
 * Copyright (c) 2017-2023 Digital Bazaar, Inc. All rights reserved.
 */

var toRdf;
var hasRequiredToRdf;

function requireToRdf () {
	if (hasRequiredToRdf) return toRdf;
	hasRequiredToRdf = 1;

	const {createNodeMap} = /*@__PURE__*/ requireNodeMap();
	const {isKeyword} = /*@__PURE__*/ requireContext();
	const graphTypes = /*@__PURE__*/ requireGraphTypes();
	const jsonCanonicalize = /*@__PURE__*/ requireCanonicalize();
	const JsonLdError = /*@__PURE__*/ requireJsonLdError();
	const types = /*@__PURE__*/ requireTypes();
	const util = /*@__PURE__*/ requireUtil();

	const {
	  handleEvent: _handleEvent
	} = /*@__PURE__*/ requireEvents();

	const {
	  // RDF,
	  // RDF_LIST,
	  RDF_FIRST,
	  RDF_REST,
	  RDF_NIL,
	  RDF_TYPE,
	  // RDF_PLAIN_LITERAL,
	  // RDF_XML_LITERAL,
	  RDF_JSON_LITERAL,
	  // RDF_OBJECT,
	  RDF_LANGSTRING,

	  // XSD,
	  XSD_BOOLEAN,
	  XSD_DOUBLE,
	  XSD_INTEGER,
	  XSD_STRING,
	} = /*@__PURE__*/ requireConstants();

	const {
	  isAbsolute: _isAbsoluteIri
	} = /*@__PURE__*/ requireUrl();

	const api = {};
	toRdf = api;

	/**
	 * Outputs an RDF dataset for the expanded JSON-LD input.
	 *
	 * @param input the expanded JSON-LD input.
	 * @param options the RDF serialization options.
	 *
	 * @return the RDF dataset.
	 */
	api.toRDF = (input, options) => {
	  // create node map for default graph (and any named graphs)
	  const issuer = new util.IdentifierIssuer('_:b');
	  const nodeMap = {'@default': {}};
	  createNodeMap(input, nodeMap, '@default', issuer);

	  const dataset = [];
	  const graphNames = Object.keys(nodeMap).sort();
	  for(const graphName of graphNames) {
	    let graphTerm;
	    if(graphName === '@default') {
	      graphTerm = {termType: 'DefaultGraph', value: ''};
	    } else if(_isAbsoluteIri(graphName)) {
	      if(graphName.startsWith('_:')) {
	        graphTerm = {termType: 'BlankNode'};
	      } else {
	        graphTerm = {termType: 'NamedNode'};
	      }
	      graphTerm.value = graphName;
	    } else {
	      // skip relative IRIs (not valid RDF)
	      if(options.eventHandler) {
	        _handleEvent({
	          event: {
	            type: ['JsonLdEvent'],
	            code: 'relative graph reference',
	            level: 'warning',
	            message: 'Relative graph reference found.',
	            details: {
	              graph: graphName
	            }
	          },
	          options
	        });
	      }
	      continue;
	    }
	    _graphToRDF(dataset, nodeMap[graphName], graphTerm, issuer, options);
	  }

	  return dataset;
	};

	/**
	 * Adds RDF quads for a particular graph to the given dataset.
	 *
	 * @param dataset the dataset to append RDF quads to.
	 * @param graph the graph to create RDF quads for.
	 * @param graphTerm the graph term for each quad.
	 * @param issuer a IdentifierIssuer for assigning blank node names.
	 * @param options the RDF serialization options.
	 *
	 * @return the array of RDF triples for the given graph.
	 */
	function _graphToRDF(dataset, graph, graphTerm, issuer, options) {
	  const ids = Object.keys(graph).sort();
	  for(const id of ids) {
	    const node = graph[id];
	    const properties = Object.keys(node).sort();
	    for(let property of properties) {
	      const items = node[property];
	      if(property === '@type') {
	        property = RDF_TYPE;
	      } else if(isKeyword(property)) {
	        continue;
	      }

	      for(const item of items) {
	        // RDF subject
	        const subject = {
	          termType: id.startsWith('_:') ? 'BlankNode' : 'NamedNode',
	          value: id
	        };

	        // skip relative IRI subjects (not valid RDF)
	        if(!_isAbsoluteIri(id)) {
	          if(options.eventHandler) {
	            _handleEvent({
	              event: {
	                type: ['JsonLdEvent'],
	                code: 'relative subject reference',
	                level: 'warning',
	                message: 'Relative subject reference found.',
	                details: {
	                  subject: id
	                }
	              },
	              options
	            });
	          }
	          continue;
	        }

	        // RDF predicate
	        const predicate = {
	          termType: property.startsWith('_:') ? 'BlankNode' : 'NamedNode',
	          value: property
	        };

	        // skip relative IRI predicates (not valid RDF)
	        if(!_isAbsoluteIri(property)) {
	          if(options.eventHandler) {
	            _handleEvent({
	              event: {
	                type: ['JsonLdEvent'],
	                code: 'relative predicate reference',
	                level: 'warning',
	                message: 'Relative predicate reference found.',
	                details: {
	                  predicate: property
	                }
	              },
	              options
	            });
	          }
	          continue;
	        }

	        // skip blank node predicates unless producing generalized RDF
	        if(predicate.termType === 'BlankNode' &&
	          !options.produceGeneralizedRdf) {
	          if(options.eventHandler) {
	            _handleEvent({
	              event: {
	                type: ['JsonLdEvent'],
	                code: 'blank node predicate',
	                level: 'warning',
	                message: 'Dropping blank node predicate.',
	                details: {
	                  // FIXME: add better issuer API to get reverse mapping
	                  property: issuer.getOldIds()
	                    .find(key => issuer.getId(key) === property)
	                }
	              },
	              options
	            });
	          }
	          continue;
	        }

	        // convert list, value or node object to triple
	        const object = _objectToRDF(
	          item, issuer, dataset, graphTerm, options.rdfDirection, options);
	        // skip null objects (they are relative IRIs)
	        if(object) {
	          dataset.push({
	            subject,
	            predicate,
	            object,
	            graph: graphTerm
	          });
	        }
	      }
	    }
	  }
	}

	/**
	 * Converts a @list value into linked list of blank node RDF quads
	 * (an RDF collection).
	 *
	 * @param list the @list value.
	 * @param issuer a IdentifierIssuer for assigning blank node names.
	 * @param dataset the array of quads to append to.
	 * @param graphTerm the graph term for each quad.
	 * @param options the RDF serialization options.
	 *
	 * @return the head of the list.
	 */
	function _listToRDF(list, issuer, dataset, graphTerm, rdfDirection, options) {
	  const first = {termType: 'NamedNode', value: RDF_FIRST};
	  const rest = {termType: 'NamedNode', value: RDF_REST};
	  const nil = {termType: 'NamedNode', value: RDF_NIL};

	  const last = list.pop();
	  // Result is the head of the list
	  const result = last ? {termType: 'BlankNode', value: issuer.getId()} : nil;
	  let subject = result;

	  for(const item of list) {
	    const object = _objectToRDF(
	      item, issuer, dataset, graphTerm, rdfDirection, options);
	    const next = {termType: 'BlankNode', value: issuer.getId()};
	    dataset.push({
	      subject,
	      predicate: first,
	      object,
	      graph: graphTerm
	    });
	    dataset.push({
	      subject,
	      predicate: rest,
	      object: next,
	      graph: graphTerm
	    });
	    subject = next;
	  }

	  // Tail of list
	  if(last) {
	    const object = _objectToRDF(
	      last, issuer, dataset, graphTerm, rdfDirection, options);
	    dataset.push({
	      subject,
	      predicate: first,
	      object,
	      graph: graphTerm
	    });
	    dataset.push({
	      subject,
	      predicate: rest,
	      object: nil,
	      graph: graphTerm
	    });
	  }

	  return result;
	}

	/**
	 * Converts a JSON-LD value object to an RDF literal or a JSON-LD string,
	 * node object to an RDF resource, or adds a list.
	 *
	 * @param item the JSON-LD value or node object.
	 * @param issuer a IdentifierIssuer for assigning blank node names.
	 * @param dataset the dataset to append RDF quads to.
	 * @param graphTerm the graph term for each quad.
	 * @param options the RDF serialization options.
	 *
	 * @return the RDF literal or RDF resource.
	 */
	function _objectToRDF(
	  item, issuer, dataset, graphTerm, rdfDirection, options
	) {
	  const object = {};

	  // convert value object to RDF
	  if(graphTypes.isValue(item)) {
	    object.termType = 'Literal';
	    object.value = undefined;
	    object.datatype = {
	      termType: 'NamedNode'
	    };
	    let value = item['@value'];
	    const datatype = item['@type'] || null;

	    // convert to XSD/JSON datatypes as appropriate
	    if(datatype === '@json') {
	      object.value = jsonCanonicalize(value);
	      object.datatype.value = RDF_JSON_LITERAL;
	    } else if(types.isBoolean(value)) {
	      object.value = value.toString();
	      object.datatype.value = datatype || XSD_BOOLEAN;
	    } else if(types.isDouble(value) || datatype === XSD_DOUBLE) {
	      if(!types.isDouble(value)) {
	        value = parseFloat(value);
	      }
	      // canonical double representation
	      object.value = value.toExponential(15).replace(/(\d)0*e\+?/, '$1E');
	      object.datatype.value = datatype || XSD_DOUBLE;
	    } else if(types.isNumber(value)) {
	      object.value = value.toFixed(0);
	      object.datatype.value = datatype || XSD_INTEGER;
	    } else if('@direction' in item && rdfDirection === 'i18n-datatype') {
	      const language = (item['@language'] || '').toLowerCase();
	      const direction = item['@direction'];
	      const datatype = `https://www.w3.org/ns/i18n#${language}_${direction}`;
	      object.datatype.value = datatype;
	      object.value = value;
	    } else if('@direction' in item && rdfDirection === 'compound-literal') {
	      throw new JsonLdError(
	        'Unsupported rdfDirection value.',
	        'jsonld.InvalidRdfDirection',
	        {value: rdfDirection});
	    } else if('@direction' in item && rdfDirection) {
	      throw new JsonLdError(
	        'Unknown rdfDirection value.',
	        'jsonld.InvalidRdfDirection',
	        {value: rdfDirection});
	    } else if('@language' in item) {
	      if('@direction' in item && !rdfDirection) {
	        if(options.eventHandler) {
	          // FIXME: only emit once?
	          _handleEvent({
	            event: {
	              type: ['JsonLdEvent'],
	              code: 'rdfDirection not set',
	              level: 'warning',
	              message: 'rdfDirection not set for @direction.',
	              details: {
	                object: object.value
	              }
	            },
	            options
	          });
	        }
	      }
	      object.value = value;
	      object.datatype.value = datatype || RDF_LANGSTRING;
	      object.language = item['@language'];
	    } else {
	      if('@direction' in item && !rdfDirection) {
	        if(options.eventHandler) {
	          // FIXME: only emit once?
	          _handleEvent({
	            event: {
	              type: ['JsonLdEvent'],
	              code: 'rdfDirection not set',
	              level: 'warning',
	              message: 'rdfDirection not set for @direction.',
	              details: {
	                object: object.value
	              }
	            },
	            options
	          });
	        }
	      }
	      object.value = value;
	      object.datatype.value = datatype || XSD_STRING;
	    }
	  } else if(graphTypes.isList(item)) {
	    const _list = _listToRDF(
	      item['@list'], issuer, dataset, graphTerm, rdfDirection, options);
	    object.termType = _list.termType;
	    object.value = _list.value;
	  } else {
	    // convert string/node object to RDF
	    const id = types.isObject(item) ? item['@id'] : item;
	    object.termType = id.startsWith('_:') ? 'BlankNode' : 'NamedNode';
	    object.value = id;
	  }

	  // skip relative IRIs, not valid RDF
	  if(object.termType === 'NamedNode' && !_isAbsoluteIri(object.value)) {
	    if(options.eventHandler) {
	      _handleEvent({
	        event: {
	          type: ['JsonLdEvent'],
	          code: 'relative object reference',
	          level: 'warning',
	          message: 'Relative object reference found.',
	          details: {
	            object: object.value
	          }
	        },
	        options
	      });
	    }
	    return null;
	  }

	  return object;
	}
	return toRdf;
}

/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */

var frame;
var hasRequiredFrame;

function requireFrame () {
	if (hasRequiredFrame) return frame;
	hasRequiredFrame = 1;

	const {isKeyword} = /*@__PURE__*/ requireContext();
	const graphTypes = /*@__PURE__*/ requireGraphTypes();
	const types = /*@__PURE__*/ requireTypes();
	const util = /*@__PURE__*/ requireUtil();
	const url = /*@__PURE__*/ requireUrl();
	const JsonLdError = /*@__PURE__*/ requireJsonLdError();
	const {
	  createNodeMap: _createNodeMap,
	  mergeNodeMapGraphs: _mergeNodeMapGraphs
	} = /*@__PURE__*/ requireNodeMap();

	const api = {};
	frame = api;

	/**
	 * Performs JSON-LD `merged` framing.
	 *
	 * @param input the expanded JSON-LD to frame.
	 * @param frame the expanded JSON-LD frame to use.
	 * @param options the framing options.
	 *
	 * @return the framed output.
	 */
	api.frameMergedOrDefault = (input, frame, options) => {
	  // create framing state
	  const state = {
	    options,
	    embedded: false,
	    graph: '@default',
	    graphMap: {'@default': {}},
	    subjectStack: [],
	    link: {},
	    bnodeMap: {}
	  };

	  // produce a map of all graphs and name each bnode
	  // FIXME: currently uses subjects from @merged graph only
	  const issuer = new util.IdentifierIssuer('_:b');
	  _createNodeMap(input, state.graphMap, '@default', issuer);
	  if(options.merged) {
	    state.graphMap['@merged'] = _mergeNodeMapGraphs(state.graphMap);
	    state.graph = '@merged';
	  }
	  state.subjects = state.graphMap[state.graph];

	  // frame the subjects
	  const framed = [];
	  api.frame(state, Object.keys(state.subjects).sort(), frame, framed);

	  // If pruning blank nodes, find those to prune
	  if(options.pruneBlankNodeIdentifiers) {
	    // remove all blank nodes appearing only once, done in compaction
	    options.bnodesToClear =
	      Object.keys(state.bnodeMap).filter(id => state.bnodeMap[id].length === 1);
	  }

	  // remove @preserve from results
	  options.link = {};
	  return _cleanupPreserve(framed, options);
	};

	/**
	 * Frames subjects according to the given frame.
	 *
	 * @param state the current framing state.
	 * @param subjects the subjects to filter.
	 * @param frame the frame.
	 * @param parent the parent subject or top-level array.
	 * @param property the parent property, initialized to null.
	 */
	api.frame = (state, subjects, frame, parent, property = null) => {
	  // validate the frame
	  _validateFrame(frame);
	  frame = frame[0];

	  // get flags for current frame
	  const options = state.options;
	  const flags = {
	    embed: _getFrameFlag(frame, options, 'embed'),
	    explicit: _getFrameFlag(frame, options, 'explicit'),
	    requireAll: _getFrameFlag(frame, options, 'requireAll')
	  };

	  // get link for current graph
	  if(!state.link.hasOwnProperty(state.graph)) {
	    state.link[state.graph] = {};
	  }
	  const link = state.link[state.graph];

	  // filter out subjects that match the frame
	  const matches = _filterSubjects(state, subjects, frame, flags);

	  // add matches to output
	  const ids = Object.keys(matches).sort();
	  for(const id of ids) {
	    const subject = matches[id];

	    /* Note: In order to treat each top-level match as a compartmentalized
	    result, clear the unique embedded subjects map when the property is null,
	    which only occurs at the top-level. */
	    if(property === null) {
	      state.uniqueEmbeds = {[state.graph]: {}};
	    } else {
	      state.uniqueEmbeds[state.graph] = state.uniqueEmbeds[state.graph] || {};
	    }

	    if(flags.embed === '@link' && id in link) {
	      // TODO: may want to also match an existing linked subject against
	      // the current frame ... so different frames could produce different
	      // subjects that are only shared in-memory when the frames are the same

	      // add existing linked subject
	      _addFrameOutput(parent, property, link[id]);
	      continue;
	    }

	    // start output for subject
	    const output = {'@id': id};
	    if(id.indexOf('_:') === 0) {
	      util.addValue(state.bnodeMap, id, output, {propertyIsArray: true});
	    }
	    link[id] = output;

	    // validate @embed
	    if((flags.embed === '@first' || flags.embed === '@last') && state.is11) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; invalid value of @embed.',
	        'jsonld.SyntaxError', {code: 'invalid @embed value', frame});
	    }

	    if(!state.embedded && state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {
	      // skip adding this node object to the top level, as it was
	      // already included in another node object
	      continue;
	    }

	    // if embed is @never or if a circular reference would be created by an
	    // embed, the subject cannot be embedded, just add the reference;
	    // note that a circular reference won't occur when the embed flag is
	    // `@link` as the above check will short-circuit before reaching this point
	    if(state.embedded &&
	      (flags.embed === '@never' ||
	      _createsCircularReference(subject, state.graph, state.subjectStack))) {
	      _addFrameOutput(parent, property, output);
	      continue;
	    }

	    // if only the first (or once) should be embedded
	    if(state.embedded &&
	       (flags.embed == '@first' || flags.embed == '@once') &&
	       state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {
	      _addFrameOutput(parent, property, output);
	      continue;
	    }

	    // if only the last match should be embedded
	    if(flags.embed === '@last') {
	      // remove any existing embed
	      if(id in state.uniqueEmbeds[state.graph]) {
	        _removeEmbed(state, id);
	      }
	    }

	    state.uniqueEmbeds[state.graph][id] = {parent, property};

	    // push matching subject onto stack to enable circular embed checks
	    state.subjectStack.push({subject, graph: state.graph});

	    // subject is also the name of a graph
	    if(id in state.graphMap) {
	      let recurse = false;
	      let subframe = null;
	      if(!('@graph' in frame)) {
	        recurse = state.graph !== '@merged';
	        subframe = {};
	      } else {
	        subframe = frame['@graph'][0];
	        recurse = !(id === '@merged' || id === '@default');
	        if(!types.isObject(subframe)) {
	          subframe = {};
	        }
	      }

	      if(recurse) {
	        // recurse into graph
	        api.frame(
	          {...state, graph: id, embedded: false},
	          Object.keys(state.graphMap[id]).sort(), [subframe], output, '@graph');
	      }
	    }

	    // if frame has @included, recurse over its sub-frame
	    if('@included' in frame) {
	      api.frame(
	        {...state, embedded: false},
	        subjects, frame['@included'], output, '@included');
	    }

	    // iterate over subject properties
	    for(const prop of Object.keys(subject).sort()) {
	      // copy keywords to output
	      if(isKeyword(prop)) {
	        output[prop] = util.clone(subject[prop]);

	        if(prop === '@type') {
	          // count bnode values of @type
	          for(const type of subject['@type']) {
	            if(type.indexOf('_:') === 0) {
	              util.addValue(
	                state.bnodeMap, type, output, {propertyIsArray: true});
	            }
	          }
	        }
	        continue;
	      }

	      // explicit is on and property isn't in the frame, skip processing
	      if(flags.explicit && !(prop in frame)) {
	        continue;
	      }

	      // add objects
	      for(const o of subject[prop]) {
	        const subframe = (prop in frame ?
	          frame[prop] : _createImplicitFrame(flags));

	        // recurse into list
	        if(graphTypes.isList(o)) {
	          const subframe =
	            (frame[prop] && frame[prop][0] && frame[prop][0]['@list']) ?
	              frame[prop][0]['@list'] :
	              _createImplicitFrame(flags);

	          // add empty list
	          const list = {'@list': []};
	          _addFrameOutput(output, prop, list);

	          // add list objects
	          const src = o['@list'];
	          for(const oo of src) {
	            if(graphTypes.isSubjectReference(oo)) {
	              // recurse into subject reference
	              api.frame(
	                {...state, embedded: true},
	                [oo['@id']], subframe, list, '@list');
	            } else {
	              // include other values automatically
	              _addFrameOutput(list, '@list', util.clone(oo));
	            }
	          }
	        } else if(graphTypes.isSubjectReference(o)) {
	          // recurse into subject reference
	          api.frame(
	            {...state, embedded: true},
	            [o['@id']], subframe, output, prop);
	        } else if(_valueMatch(subframe[0], o)) {
	          // include other values, if they match
	          _addFrameOutput(output, prop, util.clone(o));
	        }
	      }
	    }

	    // handle defaults
	    for(const prop of Object.keys(frame).sort()) {
	      // skip keywords
	      if(prop === '@type') {
	        if(!types.isObject(frame[prop][0]) ||
	           !('@default' in frame[prop][0])) {
	          continue;
	        }
	        // allow through default types
	      } else if(isKeyword(prop)) {
	        continue;
	      }

	      // if omit default is off, then include default values for properties
	      // that appear in the next frame but are not in the matching subject
	      const next = frame[prop][0] || {};
	      const omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');
	      if(!omitDefaultOn && !(prop in output)) {
	        let preserve = '@null';
	        if('@default' in next) {
	          preserve = util.clone(next['@default']);
	        }
	        if(!types.isArray(preserve)) {
	          preserve = [preserve];
	        }
	        output[prop] = [{'@preserve': preserve}];
	      }
	    }

	    // if embed reverse values by finding nodes having this subject as a value
	    // of the associated property
	    for(const reverseProp of Object.keys(frame['@reverse'] || {}).sort()) {
	      const subframe = frame['@reverse'][reverseProp];
	      for(const subject of Object.keys(state.subjects)) {
	        const nodeValues =
	          util.getValues(state.subjects[subject], reverseProp);
	        if(nodeValues.some(v => v['@id'] === id)) {
	          // node has property referencing this subject, recurse
	          output['@reverse'] = output['@reverse'] || {};
	          util.addValue(
	            output['@reverse'], reverseProp, [], {propertyIsArray: true});
	          api.frame(
	            {...state, embedded: true},
	            [subject], subframe, output['@reverse'][reverseProp],
	            property);
	        }
	      }
	    }

	    // add output to parent
	    _addFrameOutput(parent, property, output);

	    // pop matching subject from circular ref-checking stack
	    state.subjectStack.pop();
	  }
	};

	/**
	 * Replace `@null` with `null`, removing it from arrays.
	 *
	 * @param input the framed, compacted output.
	 * @param options the framing options used.
	 *
	 * @return the resulting output.
	 */
	api.cleanupNull = (input, options) => {
	  // recurse through arrays
	  if(types.isArray(input)) {
	    const noNulls = input.map(v => api.cleanupNull(v, options));
	    return noNulls.filter(v => v); // removes nulls from array
	  }

	  if(input === '@null') {
	    return null;
	  }

	  if(types.isObject(input)) {
	    // handle in-memory linked nodes
	    if('@id' in input) {
	      const id = input['@id'];
	      if(options.link.hasOwnProperty(id)) {
	        const idx = options.link[id].indexOf(input);
	        if(idx !== -1) {
	          // already visited
	          return options.link[id][idx];
	        }
	        // prevent circular visitation
	        options.link[id].push(input);
	      } else {
	        // prevent circular visitation
	        options.link[id] = [input];
	      }
	    }

	    for(const key in input) {
	      input[key] = api.cleanupNull(input[key], options);
	    }
	  }
	  return input;
	};

	/**
	 * Creates an implicit frame when recursing through subject matches. If
	 * a frame doesn't have an explicit frame for a particular property, then
	 * a wildcard child frame will be created that uses the same flags that the
	 * parent frame used.
	 *
	 * @param flags the current framing flags.
	 *
	 * @return the implicit frame.
	 */
	function _createImplicitFrame(flags) {
	  const frame = {};
	  for(const key in flags) {
	    if(flags[key] !== undefined) {
	      frame['@' + key] = [flags[key]];
	    }
	  }
	  return [frame];
	}

	/**
	 * Checks the current subject stack to see if embedding the given subject
	 * would cause a circular reference.
	 *
	 * @param subjectToEmbed the subject to embed.
	 * @param graph the graph the subject to embed is in.
	 * @param subjectStack the current stack of subjects.
	 *
	 * @return true if a circular reference would be created, false if not.
	 */
	function _createsCircularReference(subjectToEmbed, graph, subjectStack) {
	  for(let i = subjectStack.length - 1; i >= 0; --i) {
	    const subject = subjectStack[i];
	    if(subject.graph === graph &&
	      subject.subject['@id'] === subjectToEmbed['@id']) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Gets the frame flag value for the given flag name.
	 *
	 * @param frame the frame.
	 * @param options the framing options.
	 * @param name the flag name.
	 *
	 * @return the flag value.
	 */
	function _getFrameFlag(frame, options, name) {
	  const flag = '@' + name;
	  let rval = (flag in frame ? frame[flag][0] : options[name]);
	  if(name === 'embed') {
	    // default is "@last"
	    // backwards-compatibility support for "embed" maps:
	    // true => "@last"
	    // false => "@never"
	    if(rval === true) {
	      rval = '@once';
	    } else if(rval === false) {
	      rval = '@never';
	    } else if(rval !== '@always' && rval !== '@never' && rval !== '@link' &&
	      rval !== '@first' && rval !== '@last' && rval !== '@once') {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; invalid value of @embed.',
	        'jsonld.SyntaxError', {code: 'invalid @embed value', frame});
	    }
	  }
	  return rval;
	}

	/**
	 * Validates a JSON-LD frame, throwing an exception if the frame is invalid.
	 *
	 * @param frame the frame to validate.
	 */
	function _validateFrame(frame) {
	  if(!types.isArray(frame) || frame.length !== 1 || !types.isObject(frame[0])) {
	    throw new JsonLdError(
	      'Invalid JSON-LD syntax; a JSON-LD frame must be a single object.',
	      'jsonld.SyntaxError', {frame});
	  }

	  if('@id' in frame[0]) {
	    for(const id of util.asArray(frame[0]['@id'])) {
	      // @id must be wildcard or an IRI
	      if(!(types.isObject(id) || url.isAbsolute(id)) ||
	        (types.isString(id) && id.indexOf('_:') === 0)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; invalid @id in frame.',
	          'jsonld.SyntaxError', {code: 'invalid frame', frame});
	      }
	    }
	  }

	  if('@type' in frame[0]) {
	    for(const type of util.asArray(frame[0]['@type'])) {
	      // @type must be wildcard, IRI, or @json
	      if(!(types.isObject(type) || url.isAbsolute(type) ||
	          (type === '@json')) ||
	        (types.isString(type) && type.indexOf('_:') === 0)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; invalid @type in frame.',
	          'jsonld.SyntaxError', {code: 'invalid frame', frame});
	      }
	    }
	  }
	}

	/**
	 * Returns a map of all of the subjects that match a parsed frame.
	 *
	 * @param state the current framing state.
	 * @param subjects the set of subjects to filter.
	 * @param frame the parsed frame.
	 * @param flags the frame flags.
	 *
	 * @return all of the matched subjects.
	 */
	function _filterSubjects(state, subjects, frame, flags) {
	  // filter subjects in @id order
	  const rval = {};
	  for(const id of subjects) {
	    const subject = state.graphMap[state.graph][id];
	    if(_filterSubject(state, subject, frame, flags)) {
	      rval[id] = subject;
	    }
	  }
	  return rval;
	}

	/**
	 * Returns true if the given subject matches the given frame.
	 *
	 * Matches either based on explicit type inclusion where the node has any
	 * type listed in the frame. If the frame has empty types defined matches
	 * nodes not having a @type. If the frame has a type of {} defined matches
	 * nodes having any type defined.
	 *
	 * Otherwise, does duck typing, where the node must have all of the
	 * properties defined in the frame.
	 *
	 * @param state the current framing state.
	 * @param subject the subject to check.
	 * @param frame the frame to check.
	 * @param flags the frame flags.
	 *
	 * @return true if the subject matches, false if not.
	 */
	function _filterSubject(state, subject, frame, flags) {
	  // check ducktype
	  let wildcard = true;
	  let matchesSome = false;

	  for(const key in frame) {
	    let matchThis = false;
	    const nodeValues = util.getValues(subject, key);
	    const isEmpty = util.getValues(frame, key).length === 0;

	    if(key === '@id') {
	      // match on no @id or any matching @id, including wildcard
	      if(types.isEmptyObject(frame['@id'][0] || {})) {
	        matchThis = true;
	      } else if(frame['@id'].length >= 0) {
	        matchThis = frame['@id'].includes(nodeValues[0]);
	      }
	      if(!flags.requireAll) {
	        return matchThis;
	      }
	    } else if(key === '@type') {
	      // check @type (object value means 'any' type,
	      // fall through to ducktyping)
	      wildcard = false;
	      if(isEmpty) {
	        if(nodeValues.length > 0) {
	          // don't match on no @type
	          return false;
	        }
	        matchThis = true;
	      } else if(frame['@type'].length === 1 &&
	        types.isEmptyObject(frame['@type'][0])) {
	        // match on wildcard @type if there is a type
	        matchThis = nodeValues.length > 0;
	      } else {
	        // match on a specific @type
	        for(const type of frame['@type']) {
	          if(types.isObject(type) && '@default' in type) {
	            // match on default object
	            matchThis = true;
	          } else {
	            matchThis = matchThis || nodeValues.some(tt => tt === type);
	          }
	        }
	      }
	      if(!flags.requireAll) {
	        return matchThis;
	      }
	    } else if(isKeyword(key)) {
	      continue;
	    } else {
	      // Force a copy of this frame entry so it can be manipulated
	      const thisFrame = util.getValues(frame, key)[0];
	      let hasDefault = false;
	      if(thisFrame) {
	        _validateFrame([thisFrame]);
	        hasDefault = '@default' in thisFrame;
	      }

	      // no longer a wildcard pattern if frame has any non-keyword properties
	      wildcard = false;

	      // skip, but allow match if node has no value for property, and frame has
	      // a default value
	      if(nodeValues.length === 0 && hasDefault) {
	        continue;
	      }

	      // if frame value is empty, don't match if subject has any value
	      if(nodeValues.length > 0 && isEmpty) {
	        return false;
	      }

	      if(thisFrame === undefined) {
	        // node does not match if values is not empty and the value of property
	        // in frame is match none.
	        if(nodeValues.length > 0) {
	          return false;
	        }
	        matchThis = true;
	      } else {
	        if(graphTypes.isList(thisFrame)) {
	          const listValue = thisFrame['@list'][0];
	          if(graphTypes.isList(nodeValues[0])) {
	            const nodeListValues = nodeValues[0]['@list'];

	            if(graphTypes.isValue(listValue)) {
	              // match on any matching value
	              matchThis = nodeListValues.some(lv => _valueMatch(listValue, lv));
	            } else if(graphTypes.isSubject(listValue) ||
	              graphTypes.isSubjectReference(listValue)) {
	              matchThis = nodeListValues.some(lv => _nodeMatch(
	                state, listValue, lv, flags));
	            }
	          }
	        } else if(graphTypes.isValue(thisFrame)) {
	          matchThis = nodeValues.some(nv => _valueMatch(thisFrame, nv));
	        } else if(graphTypes.isSubjectReference(thisFrame)) {
	          matchThis =
	            nodeValues.some(nv => _nodeMatch(state, thisFrame, nv, flags));
	        } else if(types.isObject(thisFrame)) {
	          matchThis = nodeValues.length > 0;
	        } else {
	          matchThis = false;
	        }
	      }
	    }

	    // all non-defaulted values must match if requireAll is set
	    if(!matchThis && flags.requireAll) {
	      return false;
	    }

	    matchesSome = matchesSome || matchThis;
	  }

	  // return true if wildcard or subject matches some properties
	  return wildcard || matchesSome;
	}

	/**
	 * Removes an existing embed.
	 *
	 * @param state the current framing state.
	 * @param id the @id of the embed to remove.
	 */
	function _removeEmbed(state, id) {
	  // get existing embed
	  const embeds = state.uniqueEmbeds[state.graph];
	  const embed = embeds[id];
	  const parent = embed.parent;
	  const property = embed.property;

	  // create reference to replace embed
	  const subject = {'@id': id};

	  // remove existing embed
	  if(types.isArray(parent)) {
	    // replace subject with reference
	    for(let i = 0; i < parent.length; ++i) {
	      if(util.compareValues(parent[i], subject)) {
	        parent[i] = subject;
	        break;
	      }
	    }
	  } else {
	    // replace subject with reference
	    const useArray = types.isArray(parent[property]);
	    util.removeValue(parent, property, subject, {propertyIsArray: useArray});
	    util.addValue(parent, property, subject, {propertyIsArray: useArray});
	  }

	  // recursively remove dependent dangling embeds
	  const removeDependents = id => {
	    // get embed keys as a separate array to enable deleting keys in map
	    const ids = Object.keys(embeds);
	    for(const next of ids) {
	      if(next in embeds && types.isObject(embeds[next].parent) &&
	        embeds[next].parent['@id'] === id) {
	        delete embeds[next];
	        removeDependents(next);
	      }
	    }
	  };
	  removeDependents(id);
	}

	/**
	 * Removes the @preserve keywords from expanded result of framing.
	 *
	 * @param input the framed, framed output.
	 * @param options the framing options used.
	 *
	 * @return the resulting output.
	 */
	function _cleanupPreserve(input, options) {
	  // recurse through arrays
	  if(types.isArray(input)) {
	    return input.map(value => _cleanupPreserve(value, options));
	  }

	  if(types.isObject(input)) {
	    // remove @preserve
	    if('@preserve' in input) {
	      return input['@preserve'][0];
	    }

	    // skip @values
	    if(graphTypes.isValue(input)) {
	      return input;
	    }

	    // recurse through @lists
	    if(graphTypes.isList(input)) {
	      input['@list'] = _cleanupPreserve(input['@list'], options);
	      return input;
	    }

	    // handle in-memory linked nodes
	    if('@id' in input) {
	      const id = input['@id'];
	      if(options.link.hasOwnProperty(id)) {
	        const idx = options.link[id].indexOf(input);
	        if(idx !== -1) {
	          // already visited
	          return options.link[id][idx];
	        }
	        // prevent circular visitation
	        options.link[id].push(input);
	      } else {
	        // prevent circular visitation
	        options.link[id] = [input];
	      }
	    }

	    // recurse through properties
	    for(const prop in input) {
	      // potentially remove the id, if it is an unreference bnode
	      if(prop === '@id' && options.bnodesToClear.includes(input[prop])) {
	        delete input['@id'];
	        continue;
	      }

	      input[prop] = _cleanupPreserve(input[prop], options);
	    }
	  }
	  return input;
	}

	/**
	 * Adds framing output to the given parent.
	 *
	 * @param parent the parent to add to.
	 * @param property the parent property.
	 * @param output the output to add.
	 */
	function _addFrameOutput(parent, property, output) {
	  if(types.isObject(parent)) {
	    util.addValue(parent, property, output, {propertyIsArray: true});
	  } else {
	    parent.push(output);
	  }
	}

	/**
	 * Node matches if it is a node, and matches the pattern as a frame.
	 *
	 * @param state the current framing state.
	 * @param pattern used to match value
	 * @param value to check
	 * @param flags the frame flags.
	 */
	function _nodeMatch(state, pattern, value, flags) {
	  if(!('@id' in value)) {
	    return false;
	  }
	  const nodeObject = state.subjects[value['@id']];
	  return nodeObject && _filterSubject(state, nodeObject, pattern, flags);
	}

	/**
	 * Value matches if it is a value and matches the value pattern
	 *
	 * * `pattern` is empty
	 * * @values are the same, or `pattern[@value]` is a wildcard, and
	 * * @types are the same or `value[@type]` is not null
	 *   and `pattern[@type]` is `{}`, or `value[@type]` is null
	 *   and `pattern[@type]` is null or `[]`, and
	 * * @languages are the same or `value[@language]` is not null
	 *   and `pattern[@language]` is `{}`, or `value[@language]` is null
	 *   and `pattern[@language]` is null or `[]`.
	 *
	 * @param pattern used to match value
	 * @param value to check
	 */
	function _valueMatch(pattern, value) {
	  const v1 = value['@value'];
	  const t1 = value['@type'];
	  const l1 = value['@language'];
	  const v2 = pattern['@value'] ?
	    (types.isArray(pattern['@value']) ?
	      pattern['@value'] : [pattern['@value']]) :
	    [];
	  const t2 = pattern['@type'] ?
	    (types.isArray(pattern['@type']) ?
	      pattern['@type'] : [pattern['@type']]) :
	    [];
	  const l2 = pattern['@language'] ?
	    (types.isArray(pattern['@language']) ?
	      pattern['@language'] : [pattern['@language']]) :
	    [];

	  if(v2.length === 0 && t2.length === 0 && l2.length === 0) {
	    return true;
	  }
	  if(!(v2.includes(v1) || types.isEmptyObject(v2[0]))) {
	    return false;
	  }
	  if(!(!t1 && t2.length === 0 || t2.includes(t1) || t1 &&
	    types.isEmptyObject(t2[0]))) {
	    return false;
	  }
	  if(!(!l1 && l2.length === 0 || l2.includes(l1) || l1 &&
	    types.isEmptyObject(l2[0]))) {
	    return false;
	  }
	  return true;
	}
	return frame;
}

/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */

var compact;
var hasRequiredCompact;

function requireCompact () {
	if (hasRequiredCompact) return compact;
	hasRequiredCompact = 1;

	const JsonLdError = /*@__PURE__*/ requireJsonLdError();

	const {
	  isArray: _isArray,
	  isObject: _isObject,
	  isString: _isString,
	  isUndefined: _isUndefined
	} = /*@__PURE__*/ requireTypes();

	const {
	  isList: _isList,
	  isValue: _isValue,
	  isGraph: _isGraph,
	  isSimpleGraph: _isSimpleGraph,
	  isSubjectReference: _isSubjectReference
	} = /*@__PURE__*/ requireGraphTypes();

	const {
	  expandIri: _expandIri,
	  getContextValue: _getContextValue,
	  isKeyword: _isKeyword,
	  process: _processContext,
	  processingMode: _processingMode
	} = /*@__PURE__*/ requireContext();

	const {
	  removeBase: _removeBase,
	  prependBase: _prependBase
	} = /*@__PURE__*/ requireUrl();

	const {
	  REGEX_KEYWORD,
	  addValue: _addValue,
	  asArray: _asArray,
	  compareShortestLeast: _compareShortestLeast
	} = /*@__PURE__*/ requireUtil();

	const api = {};
	compact = api;

	/**
	 * Recursively compacts an element using the given active context. All values
	 * must be in expanded form before this method is called.
	 *
	 * @param activeCtx the active context to use.
	 * @param activeProperty the compacted property associated with the element
	 *          to compact, null for none.
	 * @param element the element to compact.
	 * @param options the compaction options.
	 *
	 * @return a promise that resolves to the compacted value.
	 */
	api.compact = async ({
	  activeCtx,
	  activeProperty = null,
	  element,
	  options = {}
	}) => {
	  // recursively compact array
	  if(_isArray(element)) {
	    let rval = [];
	    for(let i = 0; i < element.length; ++i) {
	      const compacted = await api.compact({
	        activeCtx,
	        activeProperty,
	        element: element[i],
	        options
	      });
	      if(compacted === null) {
	        // FIXME: need event?
	        continue;
	      }
	      rval.push(compacted);
	    }
	    if(options.compactArrays && rval.length === 1) {
	      // use single element if no container is specified
	      const container = _getContextValue(
	        activeCtx, activeProperty, '@container') || [];
	      if(container.length === 0) {
	        rval = rval[0];
	      }
	    }
	    return rval;
	  }

	  // use any scoped context on activeProperty
	  const ctx = _getContextValue(activeCtx, activeProperty, '@context');
	  if(!_isUndefined(ctx)) {
	    activeCtx = await _processContext({
	      activeCtx,
	      localCtx: ctx,
	      propagate: true,
	      overrideProtected: true,
	      options
	    });
	  }

	  // recursively compact object
	  if(_isObject(element)) {
	    if(options.link && '@id' in element &&
	      options.link.hasOwnProperty(element['@id'])) {
	      // check for a linked element to reuse
	      const linked = options.link[element['@id']];
	      for(let i = 0; i < linked.length; ++i) {
	        if(linked[i].expanded === element) {
	          return linked[i].compacted;
	        }
	      }
	    }

	    // do value compaction on @values and subject references
	    if(_isValue(element) || _isSubjectReference(element)) {
	      const rval =
	        api.compactValue({activeCtx, activeProperty, value: element, options});
	      if(options.link && _isSubjectReference(element)) {
	        // store linked element
	        if(!(options.link.hasOwnProperty(element['@id']))) {
	          options.link[element['@id']] = [];
	        }
	        options.link[element['@id']].push({expanded: element, compacted: rval});
	      }
	      return rval;
	    }

	    // if expanded property is @list and we're contained within a list
	    // container, recursively compact this item to an array
	    if(_isList(element)) {
	      const container = _getContextValue(
	        activeCtx, activeProperty, '@container') || [];
	      if(container.includes('@list')) {
	        return api.compact({
	          activeCtx,
	          activeProperty,
	          element: element['@list'],
	          options
	        });
	      }
	    }

	    // FIXME: avoid misuse of active property as an expanded property?
	    const insideReverse = (activeProperty === '@reverse');

	    const rval = {};

	    // original context before applying property-scoped and local contexts
	    const inputCtx = activeCtx;

	    // revert to previous context, if there is one,
	    // and element is not a value object or a node reference
	    if(!_isValue(element) && !_isSubjectReference(element)) {
	      activeCtx = activeCtx.revertToPreviousContext();
	    }

	    // apply property-scoped context after reverting term-scoped context
	    const propertyScopedCtx =
	      _getContextValue(inputCtx, activeProperty, '@context');
	    if(!_isUndefined(propertyScopedCtx)) {
	      activeCtx = await _processContext({
	        activeCtx,
	        localCtx: propertyScopedCtx,
	        propagate: true,
	        overrideProtected: true,
	        options
	      });
	    }

	    if(options.link && '@id' in element) {
	      // store linked element
	      if(!options.link.hasOwnProperty(element['@id'])) {
	        options.link[element['@id']] = [];
	      }
	      options.link[element['@id']].push({expanded: element, compacted: rval});
	    }

	    // apply any context defined on an alias of @type
	    // if key is @type and any compacted value is a term having a local
	    // context, overlay that context
	    let types = element['@type'] || [];
	    if(types.length > 1) {
	      types = Array.from(types).sort();
	    }
	    // find all type-scoped contexts based on current context, prior to
	    // updating it
	    const typeContext = activeCtx;
	    for(const type of types) {
	      const compactedType = api.compactIri(
	        {activeCtx: typeContext, iri: type, relativeTo: {vocab: true}});

	      // Use any type-scoped context defined on this value
	      const ctx = _getContextValue(inputCtx, compactedType, '@context');
	      if(!_isUndefined(ctx)) {
	        activeCtx = await _processContext({
	          activeCtx,
	          localCtx: ctx,
	          options,
	          propagate: false
	        });
	      }
	    }

	    // process element keys in order
	    const keys = Object.keys(element).sort();
	    for(const expandedProperty of keys) {
	      const expandedValue = element[expandedProperty];

	      // compact @id
	      if(expandedProperty === '@id') {
	        let compactedValue = _asArray(expandedValue).map(
	          expandedIri => api.compactIri({
	            activeCtx,
	            iri: expandedIri,
	            relativeTo: {vocab: false},
	            base: options.base
	          }));
	        if(compactedValue.length === 1) {
	          compactedValue = compactedValue[0];
	        }

	        // use keyword alias and add value
	        const alias = api.compactIri(
	          {activeCtx, iri: '@id', relativeTo: {vocab: true}});

	        rval[alias] = compactedValue;
	        continue;
	      }

	      // compact @type(s)
	      if(expandedProperty === '@type') {
	        // resolve type values against previous context
	        let compactedValue = _asArray(expandedValue).map(
	          expandedIri => api.compactIri({
	            activeCtx: inputCtx,
	            iri: expandedIri,
	            relativeTo: {vocab: true}
	          }));
	        if(compactedValue.length === 1) {
	          compactedValue = compactedValue[0];
	        }

	        // use keyword alias and add value
	        const alias = api.compactIri(
	          {activeCtx, iri: '@type', relativeTo: {vocab: true}});
	        const container = _getContextValue(
	          activeCtx, alias, '@container') || [];

	        // treat as array for @type if @container includes @set
	        const typeAsSet =
	          container.includes('@set') &&
	          _processingMode(activeCtx, 1.1);
	        const isArray =
	          typeAsSet || (_isArray(compactedValue) && expandedValue.length === 0);
	        _addValue(rval, alias, compactedValue, {propertyIsArray: isArray});
	        continue;
	      }

	      // handle @reverse
	      if(expandedProperty === '@reverse') {
	        // recursively compact expanded value
	        const compactedValue = await api.compact({
	          activeCtx,
	          activeProperty: '@reverse',
	          element: expandedValue,
	          options
	        });

	        // handle double-reversed properties
	        for(const compactedProperty in compactedValue) {
	          if(activeCtx.mappings.has(compactedProperty) &&
	            activeCtx.mappings.get(compactedProperty).reverse) {
	            const value = compactedValue[compactedProperty];
	            const container = _getContextValue(
	              activeCtx, compactedProperty, '@container') || [];
	            const useArray = (
	              container.includes('@set') || !options.compactArrays);
	            _addValue(
	              rval, compactedProperty, value, {propertyIsArray: useArray});
	            delete compactedValue[compactedProperty];
	          }
	        }

	        if(Object.keys(compactedValue).length > 0) {
	          // use keyword alias and add value
	          const alias = api.compactIri({
	            activeCtx,
	            iri: expandedProperty,
	            relativeTo: {vocab: true}
	          });
	          _addValue(rval, alias, compactedValue);
	        }

	        continue;
	      }

	      if(expandedProperty === '@preserve') {
	        // compact using activeProperty
	        const compactedValue = await api.compact({
	          activeCtx,
	          activeProperty,
	          element: expandedValue,
	          options
	        });

	        if(!(_isArray(compactedValue) && compactedValue.length === 0)) {
	          _addValue(rval, expandedProperty, compactedValue);
	        }
	        continue;
	      }

	      // handle @index property
	      if(expandedProperty === '@index') {
	        // drop @index if inside an @index container
	        const container = _getContextValue(
	          activeCtx, activeProperty, '@container') || [];
	        if(container.includes('@index')) {
	          continue;
	        }

	        // use keyword alias and add value
	        const alias = api.compactIri({
	          activeCtx,
	          iri: expandedProperty,
	          relativeTo: {vocab: true}
	        });
	        _addValue(rval, alias, expandedValue);
	        continue;
	      }

	      // skip array processing for keywords that aren't
	      // @graph, @list, or @included
	      if(expandedProperty !== '@graph' && expandedProperty !== '@list' &&
	        expandedProperty !== '@included' &&
	        _isKeyword(expandedProperty)) {
	        // use keyword alias and add value as is
	        const alias = api.compactIri({
	          activeCtx,
	          iri: expandedProperty,
	          relativeTo: {vocab: true}
	        });
	        _addValue(rval, alias, expandedValue);
	        continue;
	      }

	      // Note: expanded value must be an array due to expansion algorithm.
	      if(!_isArray(expandedValue)) {
	        throw new JsonLdError(
	          'JSON-LD expansion error; expanded value must be an array.',
	          'jsonld.SyntaxError');
	      }

	      // preserve empty arrays
	      if(expandedValue.length === 0) {
	        const itemActiveProperty = api.compactIri({
	          activeCtx,
	          iri: expandedProperty,
	          value: expandedValue,
	          relativeTo: {vocab: true},
	          reverse: insideReverse
	        });
	        const nestProperty = activeCtx.mappings.has(itemActiveProperty) ?
	          activeCtx.mappings.get(itemActiveProperty)['@nest'] : null;
	        let nestResult = rval;
	        if(nestProperty) {
	          _checkNestProperty(activeCtx, nestProperty, options);
	          if(!_isObject(rval[nestProperty])) {
	            rval[nestProperty] = {};
	          }
	          nestResult = rval[nestProperty];
	        }
	        _addValue(
	          nestResult, itemActiveProperty, expandedValue, {
	            propertyIsArray: true
	          });
	      }

	      // recusively process array values
	      for(const expandedItem of expandedValue) {
	        // compact property and get container type
	        const itemActiveProperty = api.compactIri({
	          activeCtx,
	          iri: expandedProperty,
	          value: expandedItem,
	          relativeTo: {vocab: true},
	          reverse: insideReverse
	        });

	        // if itemActiveProperty is a @nest property, add values to nestResult,
	        // otherwise rval
	        const nestProperty = activeCtx.mappings.has(itemActiveProperty) ?
	          activeCtx.mappings.get(itemActiveProperty)['@nest'] : null;
	        let nestResult = rval;
	        if(nestProperty) {
	          _checkNestProperty(activeCtx, nestProperty, options);
	          if(!_isObject(rval[nestProperty])) {
	            rval[nestProperty] = {};
	          }
	          nestResult = rval[nestProperty];
	        }

	        const container = _getContextValue(
	          activeCtx, itemActiveProperty, '@container') || [];

	        // get simple @graph or @list value if appropriate
	        const isGraph = _isGraph(expandedItem);
	        const isList = _isList(expandedItem);
	        let inner;
	        if(isList) {
	          inner = expandedItem['@list'];
	        } else if(isGraph) {
	          inner = expandedItem['@graph'];
	        }

	        // recursively compact expanded item
	        let compactedItem = await api.compact({
	          activeCtx,
	          activeProperty: itemActiveProperty,
	          element: (isList || isGraph) ? inner : expandedItem,
	          options
	        });

	        // handle @list
	        if(isList) {
	          // ensure @list value is an array
	          if(!_isArray(compactedItem)) {
	            compactedItem = [compactedItem];
	          }

	          if(!container.includes('@list')) {
	            // wrap using @list alias
	            compactedItem = {
	              [api.compactIri({
	                activeCtx,
	                iri: '@list',
	                relativeTo: {vocab: true}
	              })]: compactedItem
	            };

	            // include @index from expanded @list, if any
	            if('@index' in expandedItem) {
	              compactedItem[api.compactIri({
	                activeCtx,
	                iri: '@index',
	                relativeTo: {vocab: true}
	              })] = expandedItem['@index'];
	            }
	          } else {
	            _addValue(nestResult, itemActiveProperty, compactedItem, {
	              valueIsArray: true,
	              allowDuplicate: true
	            });
	            continue;
	          }
	        }

	        // Graph object compaction cases
	        if(isGraph) {
	          if(container.includes('@graph') && (container.includes('@id') ||
	            container.includes('@index') && _isSimpleGraph(expandedItem))) {
	            // get or create the map object
	            let mapObject;
	            if(nestResult.hasOwnProperty(itemActiveProperty)) {
	              mapObject = nestResult[itemActiveProperty];
	            } else {
	              nestResult[itemActiveProperty] = mapObject = {};
	            }

	            // index on @id or @index or alias of @none
	            const key = (container.includes('@id') ?
	              expandedItem['@id'] : expandedItem['@index']) ||
	              api.compactIri({activeCtx, iri: '@none',
	                relativeTo: {vocab: true}});
	            // add compactedItem to map, using value of `@id` or a new blank
	            // node identifier

	            _addValue(
	              mapObject, key, compactedItem, {
	                propertyIsArray:
	                  (!options.compactArrays || container.includes('@set'))
	              });
	          } else if(container.includes('@graph') &&
	            _isSimpleGraph(expandedItem)) {
	            // container includes @graph but not @id or @index and value is a
	            // simple graph object add compact value
	            // if compactedItem contains multiple values, it is wrapped in
	            // `@included`
	            if(_isArray(compactedItem) && compactedItem.length > 1) {
	              compactedItem = {'@included': compactedItem};
	            }
	            _addValue(
	              nestResult, itemActiveProperty, compactedItem, {
	                propertyIsArray:
	                  (!options.compactArrays || container.includes('@set'))
	              });
	          } else {
	            // wrap using @graph alias, remove array if only one item and
	            // compactArrays not set
	            if(_isArray(compactedItem) && compactedItem.length === 1 &&
	              options.compactArrays) {
	              compactedItem = compactedItem[0];
	            }
	            compactedItem = {
	              [api.compactIri({
	                activeCtx,
	                iri: '@graph',
	                relativeTo: {vocab: true}
	              })]: compactedItem
	            };

	            // include @id from expanded graph, if any
	            if('@id' in expandedItem) {
	              compactedItem[api.compactIri({
	                activeCtx,
	                iri: '@id',
	                relativeTo: {vocab: true}
	              })] = expandedItem['@id'];
	            }

	            // include @index from expanded graph, if any
	            if('@index' in expandedItem) {
	              compactedItem[api.compactIri({
	                activeCtx,
	                iri: '@index',
	                relativeTo: {vocab: true}
	              })] = expandedItem['@index'];
	            }
	            _addValue(
	              nestResult, itemActiveProperty, compactedItem, {
	                propertyIsArray:
	                  (!options.compactArrays || container.includes('@set'))
	              });
	          }
	        } else if(container.includes('@language') ||
	          container.includes('@index') || container.includes('@id') ||
	          container.includes('@type')) {
	          // handle language and index maps
	          // get or create the map object
	          let mapObject;
	          if(nestResult.hasOwnProperty(itemActiveProperty)) {
	            mapObject = nestResult[itemActiveProperty];
	          } else {
	            nestResult[itemActiveProperty] = mapObject = {};
	          }

	          let key;
	          if(container.includes('@language')) {
	            // if container is a language map, simplify compacted value to
	            // a simple string
	            if(_isValue(compactedItem)) {
	              compactedItem = compactedItem['@value'];
	            }
	            key = expandedItem['@language'];
	          } else if(container.includes('@index')) {
	            const indexKey = _getContextValue(
	              activeCtx, itemActiveProperty, '@index') || '@index';
	            const containerKey = api.compactIri(
	              {activeCtx, iri: indexKey, relativeTo: {vocab: true}});
	            if(indexKey === '@index') {
	              key = expandedItem['@index'];
	              delete compactedItem[containerKey];
	            } else {
	              let others;
	              [key, ...others] = _asArray(compactedItem[indexKey] || []);
	              if(!_isString(key)) {
	                // Will use @none if it isn't a string.
	                key = null;
	              } else {
	                switch(others.length) {
	                  case 0:
	                    delete compactedItem[indexKey];
	                    break;
	                  case 1:
	                    compactedItem[indexKey] = others[0];
	                    break;
	                  default:
	                    compactedItem[indexKey] = others;
	                    break;
	                }
	              }
	            }
	          } else if(container.includes('@id')) {
	            const idKey = api.compactIri({activeCtx, iri: '@id',
	              relativeTo: {vocab: true}});
	            key = compactedItem[idKey];
	            delete compactedItem[idKey];
	          } else if(container.includes('@type')) {
	            const typeKey = api.compactIri({
	              activeCtx,
	              iri: '@type',
	              relativeTo: {vocab: true}
	            });
	            let types;
	            [key, ...types] = _asArray(compactedItem[typeKey] || []);
	            switch(types.length) {
	              case 0:
	                delete compactedItem[typeKey];
	                break;
	              case 1:
	                compactedItem[typeKey] = types[0];
	                break;
	              default:
	                compactedItem[typeKey] = types;
	                break;
	            }

	            // If compactedItem contains a single entry
	            // whose key maps to @id, recompact without @type
	            if(Object.keys(compactedItem).length === 1 &&
	              '@id' in expandedItem) {
	              compactedItem = await api.compact({
	                activeCtx,
	                activeProperty: itemActiveProperty,
	                element: {'@id': expandedItem['@id']},
	                options
	              });
	            }
	          }

	          // if compacting this value which has no key, index on @none
	          if(!key) {
	            key = api.compactIri({activeCtx, iri: '@none',
	              relativeTo: {vocab: true}});
	          }
	          // add compact value to map object using key from expanded value
	          // based on the container type
	          _addValue(
	            mapObject, key, compactedItem, {
	              propertyIsArray: container.includes('@set')
	            });
	        } else {
	          // use an array if: compactArrays flag is false,
	          // @container is @set or @list , value is an empty
	          // array, or key is @graph
	          const isArray = (!options.compactArrays ||
	            container.includes('@set') || container.includes('@list') ||
	            (_isArray(compactedItem) && compactedItem.length === 0) ||
	            expandedProperty === '@list' || expandedProperty === '@graph');

	          // add compact value
	          _addValue(
	            nestResult, itemActiveProperty, compactedItem,
	            {propertyIsArray: isArray});
	        }
	      }
	    }

	    return rval;
	  }

	  // only primitives remain which are already compact
	  return element;
	};

	/**
	 * Compacts an IRI or keyword into a term or prefix if it can be. If the
	 * IRI has an associated value it may be passed.
	 *
	 * @param activeCtx the active context to use.
	 * @param iri the IRI to compact.
	 * @param value the value to check or null.
	 * @param relativeTo options for how to compact IRIs:
	 *          vocab: true to split after @vocab, false not to.
	 * @param reverse true if a reverse property is being compacted, false if not.
	 * @param base the absolute URL to use for compacting document-relative IRIs.
	 *
	 * @return the compacted term, prefix, keyword alias, or the original IRI.
	 */
	api.compactIri = ({
	  activeCtx,
	  iri,
	  value = null,
	  relativeTo = {vocab: false},
	  reverse = false,
	  base = null
	}) => {
	  // can't compact null
	  if(iri === null) {
	    return iri;
	  }

	  // if context is from a property term scoped context composed with a
	  // type-scoped context, then use the previous context instead
	  if(activeCtx.isPropertyTermScoped && activeCtx.previousContext) {
	    activeCtx = activeCtx.previousContext;
	  }

	  const inverseCtx = activeCtx.getInverse();

	  // if term is a keyword, it may be compacted to a simple alias
	  if(_isKeyword(iri) &&
	    iri in inverseCtx &&
	    '@none' in inverseCtx[iri] &&
	    '@type' in inverseCtx[iri]['@none'] &&
	    '@none' in inverseCtx[iri]['@none']['@type']) {
	    return inverseCtx[iri]['@none']['@type']['@none'];
	  }

	  // use inverse context to pick a term if iri is relative to vocab
	  if(relativeTo.vocab && iri in inverseCtx) {
	    const defaultLanguage = activeCtx['@language'] || '@none';

	    // prefer @index if available in value
	    const containers = [];
	    if(_isObject(value) && '@index' in value && !('@graph' in value)) {
	      containers.push('@index', '@index@set');
	    }

	    // if value is a preserve object, use its value
	    if(_isObject(value) && '@preserve' in value) {
	      value = value['@preserve'][0];
	    }

	    // prefer most specific container including @graph, prefering @set
	    // variations
	    if(_isGraph(value)) {
	      // favor indexmap if the graph is indexed
	      if('@index' in value) {
	        containers.push(
	          '@graph@index', '@graph@index@set', '@index', '@index@set');
	      }
	      // favor idmap if the graph is has an @id
	      if('@id' in value) {
	        containers.push(
	          '@graph@id', '@graph@id@set');
	      }
	      containers.push('@graph', '@graph@set', '@set');
	      // allow indexmap if the graph is not indexed
	      if(!('@index' in value)) {
	        containers.push(
	          '@graph@index', '@graph@index@set', '@index', '@index@set');
	      }
	      // allow idmap if the graph does not have an @id
	      if(!('@id' in value)) {
	        containers.push('@graph@id', '@graph@id@set');
	      }
	    } else if(_isObject(value) && !_isValue(value)) {
	      containers.push('@id', '@id@set', '@type', '@set@type');
	    }

	    // defaults for term selection based on type/language
	    let typeOrLanguage = '@language';
	    let typeOrLanguageValue = '@null';

	    if(reverse) {
	      typeOrLanguage = '@type';
	      typeOrLanguageValue = '@reverse';
	      containers.push('@set');
	    } else if(_isList(value)) {
	      // choose the most specific term that works for all elements in @list
	      // only select @list containers if @index is NOT in value
	      if(!('@index' in value)) {
	        containers.push('@list');
	      }
	      const list = value['@list'];
	      if(list.length === 0) {
	        // any empty list can be matched against any term that uses the
	        // @list container regardless of @type or @language
	        typeOrLanguage = '@any';
	        typeOrLanguageValue = '@none';
	      } else {
	        let commonLanguage = (list.length === 0) ? defaultLanguage : null;
	        let commonType = null;
	        for(let i = 0; i < list.length; ++i) {
	          const item = list[i];
	          let itemLanguage = '@none';
	          let itemType = '@none';
	          if(_isValue(item)) {
	            if('@direction' in item) {
	              const lang = (item['@language'] || '').toLowerCase();
	              const dir = item['@direction'];
	              itemLanguage = `${lang}_${dir}`;
	            } else if('@language' in item) {
	              itemLanguage = item['@language'].toLowerCase();
	            } else if('@type' in item) {
	              itemType = item['@type'];
	            } else {
	              // plain literal
	              itemLanguage = '@null';
	            }
	          } else {
	            itemType = '@id';
	          }
	          if(commonLanguage === null) {
	            commonLanguage = itemLanguage;
	          } else if(itemLanguage !== commonLanguage && _isValue(item)) {
	            commonLanguage = '@none';
	          }
	          if(commonType === null) {
	            commonType = itemType;
	          } else if(itemType !== commonType) {
	            commonType = '@none';
	          }
	          // there are different languages and types in the list, so choose
	          // the most generic term, no need to keep iterating the list
	          if(commonLanguage === '@none' && commonType === '@none') {
	            break;
	          }
	        }
	        commonLanguage = commonLanguage || '@none';
	        commonType = commonType || '@none';
	        if(commonType !== '@none') {
	          typeOrLanguage = '@type';
	          typeOrLanguageValue = commonType;
	        } else {
	          typeOrLanguageValue = commonLanguage;
	        }
	      }
	    } else {
	      if(_isValue(value)) {
	        if('@language' in value && !('@index' in value)) {
	          containers.push('@language', '@language@set');
	          typeOrLanguageValue = value['@language'];
	          const dir = value['@direction'];
	          if(dir) {
	            typeOrLanguageValue = `${typeOrLanguageValue}_${dir}`;
	          }
	        } else if('@direction' in value && !('@index' in value)) {
	          typeOrLanguageValue = `_${value['@direction']}`;
	        } else if('@type' in value) {
	          typeOrLanguage = '@type';
	          typeOrLanguageValue = value['@type'];
	        }
	      } else {
	        typeOrLanguage = '@type';
	        typeOrLanguageValue = '@id';
	      }
	      containers.push('@set');
	    }

	    // do term selection
	    containers.push('@none');

	    // an index map can be used to index values using @none, so add as a low
	    // priority
	    if(_isObject(value) && !('@index' in value)) {
	      // allow indexing even if no @index present
	      containers.push('@index', '@index@set');
	    }

	    // values without type or language can use @language map
	    if(_isValue(value) && Object.keys(value).length === 1) {
	      // allow indexing even if no @index present
	      containers.push('@language', '@language@set');
	    }

	    const term = _selectTerm(
	      activeCtx, iri, value, containers, typeOrLanguage, typeOrLanguageValue);
	    if(term !== null) {
	      return term;
	    }
	  }

	  // no term match, use @vocab if available
	  if(relativeTo.vocab) {
	    if('@vocab' in activeCtx) {
	      // determine if vocab is a prefix of the iri
	      const vocab = activeCtx['@vocab'];
	      if(iri.indexOf(vocab) === 0 && iri !== vocab) {
	        // use suffix as relative iri if it is not a term in the active context
	        const suffix = iri.substr(vocab.length);
	        if(!activeCtx.mappings.has(suffix)) {
	          return suffix;
	        }
	      }
	    }
	  }

	  // no term or @vocab match, check for possible CURIEs
	  let choice = null;
	  // TODO: make FastCurieMap a class with a method to do this lookup
	  const partialMatches = [];
	  let iriMap = activeCtx.fastCurieMap;
	  // check for partial matches of against `iri`, which means look until
	  // iri.length - 1, not full length
	  const maxPartialLength = iri.length - 1;
	  for(let i = 0; i < maxPartialLength && iri[i] in iriMap; ++i) {
	    iriMap = iriMap[iri[i]];
	    if('' in iriMap) {
	      partialMatches.push(iriMap[''][0]);
	    }
	  }
	  // check partial matches in reverse order to prefer longest ones first
	  for(let i = partialMatches.length - 1; i >= 0; --i) {
	    const entry = partialMatches[i];
	    const terms = entry.terms;
	    for(const term of terms) {
	      // a CURIE is usable if:
	      // 1. it has no mapping, OR
	      // 2. value is null, which means we're not compacting an @value, AND
	      //   the mapping matches the IRI
	      const curie = term + ':' + iri.substr(entry.iri.length);
	      const isUsableCurie = (activeCtx.mappings.get(term)._prefix &&
	        (!activeCtx.mappings.has(curie) ||
	        (value === null && activeCtx.mappings.get(curie)['@id'] === iri)));

	      // select curie if it is shorter or the same length but lexicographically
	      // less than the current choice
	      if(isUsableCurie && (choice === null ||
	        _compareShortestLeast(curie, choice) < 0)) {
	        choice = curie;
	      }
	    }
	  }

	  // return chosen curie
	  if(choice !== null) {
	    return choice;
	  }

	  // If iri could be confused with a compact IRI using a term in this context,
	  // signal an error
	  for(const [term, td] of activeCtx.mappings) {
	    if(td && td._prefix && iri.startsWith(term + ':')) {
	      throw new JsonLdError(
	        `Absolute IRI "${iri}" confused with prefix "${term}".`,
	        'jsonld.SyntaxError',
	        {code: 'IRI confused with prefix', context: activeCtx});
	    }
	  }

	  // compact IRI relative to base
	  if(!relativeTo.vocab) {
	    if('@base' in activeCtx) {
	      if(!activeCtx['@base']) {
	        // The None case preserves rval as potentially relative
	        return iri;
	      } else {
	        const _iri = _removeBase(_prependBase(base, activeCtx['@base']), iri);
	        return REGEX_KEYWORD.test(_iri) ? `./${_iri}` : _iri;
	      }
	    } else {
	      return _removeBase(base, iri);
	    }
	  }

	  // return IRI as is
	  return iri;
	};

	/**
	 * Performs value compaction on an object with '@value' or '@id' as the only
	 * property.
	 *
	 * @param activeCtx the active context.
	 * @param activeProperty the active property that points to the value.
	 * @param value the value to compact.
	 * @param {Object} [options] - processing options.
	 *
	 * @return the compaction result.
	 */
	api.compactValue = ({activeCtx, activeProperty, value, options}) => {
	  // value is a @value
	  if(_isValue(value)) {
	    // get context rules
	    const type = _getContextValue(activeCtx, activeProperty, '@type');
	    const language = _getContextValue(activeCtx, activeProperty, '@language');
	    const direction = _getContextValue(activeCtx, activeProperty, '@direction');
	    const container =
	      _getContextValue(activeCtx, activeProperty, '@container') || [];

	    // whether or not the value has an @index that must be preserved
	    const preserveIndex = '@index' in value && !container.includes('@index');

	    // if there's no @index to preserve ...
	    if(!preserveIndex && type !== '@none') {
	      // matching @type or @language specified in context, compact value
	      if(value['@type'] === type) {
	        return value['@value'];
	      }
	      if('@language' in value && value['@language'] === language &&
	         '@direction' in value && value['@direction'] === direction) {
	        return value['@value'];
	      }
	      if('@language' in value && value['@language'] === language) {
	        return value['@value'];
	      }
	      if('@direction' in value && value['@direction'] === direction) {
	        return value['@value'];
	      }
	    }

	    // return just the value of @value if all are true:
	    // 1. @value is the only key or @index isn't being preserved
	    // 2. there is no default language or @value is not a string or
	    //   the key has a mapping with a null @language
	    const keyCount = Object.keys(value).length;
	    const isValueOnlyKey = (keyCount === 1 ||
	      (keyCount === 2 && '@index' in value && !preserveIndex));
	    const hasDefaultLanguage = ('@language' in activeCtx);
	    const isValueString = _isString(value['@value']);
	    const hasNullMapping = (activeCtx.mappings.has(activeProperty) &&
	      activeCtx.mappings.get(activeProperty)['@language'] === null);
	    if(isValueOnlyKey &&
	      type !== '@none' &&
	      (!hasDefaultLanguage || !isValueString || hasNullMapping)) {
	      return value['@value'];
	    }

	    const rval = {};

	    // preserve @index
	    if(preserveIndex) {
	      rval[api.compactIri({
	        activeCtx,
	        iri: '@index',
	        relativeTo: {vocab: true}
	      })] = value['@index'];
	    }

	    if('@type' in value) {
	      // compact @type IRI
	      rval[api.compactIri({
	        activeCtx,
	        iri: '@type',
	        relativeTo: {vocab: true}
	      })] = api.compactIri(
	        {activeCtx, iri: value['@type'], relativeTo: {vocab: true}});
	    } else if('@language' in value) {
	      // alias @language
	      rval[api.compactIri({
	        activeCtx,
	        iri: '@language',
	        relativeTo: {vocab: true}
	      })] = value['@language'];
	    }

	    if('@direction' in value) {
	      // alias @direction
	      rval[api.compactIri({
	        activeCtx,
	        iri: '@direction',
	        relativeTo: {vocab: true}
	      })] = value['@direction'];
	    }

	    // alias @value
	    rval[api.compactIri({
	      activeCtx,
	      iri: '@value',
	      relativeTo: {vocab: true}
	    })] = value['@value'];

	    return rval;
	  }

	  // value is a subject reference
	  const expandedProperty = _expandIri(activeCtx, activeProperty, {vocab: true},
	    options);
	  const type = _getContextValue(activeCtx, activeProperty, '@type');
	  const compacted = api.compactIri({
	    activeCtx,
	    iri: value['@id'],
	    relativeTo: {vocab: type === '@vocab'},
	    base: options.base});

	  // compact to scalar
	  if(type === '@id' || type === '@vocab' || expandedProperty === '@graph') {
	    return compacted;
	  }

	  return {
	    [api.compactIri({
	      activeCtx,
	      iri: '@id',
	      relativeTo: {vocab: true}
	    })]: compacted
	  };
	};

	/**
	 * Picks the preferred compaction term from the given inverse context entry.
	 *
	 * @param activeCtx the active context.
	 * @param iri the IRI to pick the term for.
	 * @param value the value to pick the term for.
	 * @param containers the preferred containers.
	 * @param typeOrLanguage either '@type' or '@language'.
	 * @param typeOrLanguageValue the preferred value for '@type' or '@language'.
	 *
	 * @return the preferred term.
	 */
	function _selectTerm(
	  activeCtx, iri, value, containers, typeOrLanguage, typeOrLanguageValue) {
	  if(typeOrLanguageValue === null) {
	    typeOrLanguageValue = '@null';
	  }

	  // preferences for the value of @type or @language
	  const prefs = [];

	  // determine prefs for @id based on whether or not value compacts to a term
	  if((typeOrLanguageValue === '@id' || typeOrLanguageValue === '@reverse') &&
	    _isObject(value) && '@id' in value) {
	    // prefer @reverse first
	    if(typeOrLanguageValue === '@reverse') {
	      prefs.push('@reverse');
	    }
	    // try to compact value to a term
	    const term = api.compactIri(
	      {activeCtx, iri: value['@id'], relativeTo: {vocab: true}});
	    if(activeCtx.mappings.has(term) &&
	      activeCtx.mappings.get(term) &&
	      activeCtx.mappings.get(term)['@id'] === value['@id']) {
	      // prefer @vocab
	      prefs.push.apply(prefs, ['@vocab', '@id']);
	    } else {
	      // prefer @id
	      prefs.push.apply(prefs, ['@id', '@vocab']);
	    }
	  } else {
	    prefs.push(typeOrLanguageValue);

	    // consider direction only
	    const langDir = prefs.find(el => el.includes('_'));
	    if(langDir) {
	      // consider _dir portion
	      prefs.push(langDir.replace(/^[^_]+_/, '_'));
	    }
	  }
	  prefs.push('@none');

	  const containerMap = activeCtx.inverse[iri];
	  for(const container of containers) {
	    // if container not available in the map, continue
	    if(!(container in containerMap)) {
	      continue;
	    }

	    const typeOrLanguageValueMap = containerMap[container][typeOrLanguage];
	    for(const pref of prefs) {
	      // if type/language option not available in the map, continue
	      if(!(pref in typeOrLanguageValueMap)) {
	        continue;
	      }

	      // select term
	      return typeOrLanguageValueMap[pref];
	    }
	  }

	  return null;
	}

	/**
	 * The value of `@nest` in the term definition must either be `@nest`, or a term
	 * which resolves to `@nest`.
	 *
	 * @param activeCtx the active context.
	 * @param nestProperty a term in the active context or `@nest`.
	 * @param {Object} [options] - processing options.
	 */
	function _checkNestProperty(activeCtx, nestProperty, options) {
	  if(_expandIri(activeCtx, nestProperty, {vocab: true}, options) !== '@nest') {
	    throw new JsonLdError(
	      'JSON-LD compact error; nested property must have an @nest value ' +
	      'resolving to @nest.',
	      'jsonld.SyntaxError', {code: 'invalid @nest value'});
	  }
	}
	return compact;
}

/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */

var JsonLdProcessor;
var hasRequiredJsonLdProcessor;

function requireJsonLdProcessor () {
	if (hasRequiredJsonLdProcessor) return JsonLdProcessor;
	hasRequiredJsonLdProcessor = 1;

	JsonLdProcessor = jsonld => {
	  class JsonLdProcessor {
	    toString() {
	      return '[object JsonLdProcessor]';
	    }
	  }
	  Object.defineProperty(JsonLdProcessor, 'prototype', {
	    writable: false,
	    enumerable: false
	  });
	  Object.defineProperty(JsonLdProcessor.prototype, 'constructor', {
	    writable: true,
	    enumerable: false,
	    configurable: true,
	    value: JsonLdProcessor
	  });

	  // The Web IDL test harness will check the number of parameters defined in
	  // the functions below. The number of parameters must exactly match the
	  // required (non-optional) parameters of the JsonLdProcessor interface as
	  // defined here:
	  // https://www.w3.org/TR/json-ld-api/#the-jsonldprocessor-interface

	  JsonLdProcessor.compact = function(input, ctx) {
	    if(arguments.length < 2) {
	      return Promise.reject(
	        new TypeError('Could not compact, too few arguments.'));
	    }
	    return jsonld.compact(input, ctx);
	  };
	  JsonLdProcessor.expand = function(input) {
	    if(arguments.length < 1) {
	      return Promise.reject(
	        new TypeError('Could not expand, too few arguments.'));
	    }
	    return jsonld.expand(input);
	  };
	  JsonLdProcessor.flatten = function(input) {
	    if(arguments.length < 1) {
	      return Promise.reject(
	        new TypeError('Could not flatten, too few arguments.'));
	    }
	    return jsonld.flatten(input);
	  };

	  return JsonLdProcessor;
	};
	return JsonLdProcessor;
}

/**
 * A JavaScript implementation of the JSON-LD API.
 *
 * @author Dave Longley
 *
 * @license BSD 3-Clause License
 * Copyright (c) 2011-2022 Digital Bazaar, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the Digital Bazaar, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var jsonld;
var hasRequiredJsonld;

function requireJsonld () {
	if (hasRequiredJsonld) return jsonld;
	hasRequiredJsonld = 1;
	const canonize = /*@__PURE__*/ requireRdfCanonize();
	const platform = /*@__PURE__*/ requirePlatformBrowser();
	const util = /*@__PURE__*/ requireUtil();
	const ContextResolver = /*@__PURE__*/ requireContextResolver();
	const IdentifierIssuer = util.IdentifierIssuer;
	const JsonLdError = /*@__PURE__*/ requireJsonLdError();
	const LRU = /*@__PURE__*/ requireLruCache();
	const NQuads = /*@__PURE__*/ requireNQuads();

	const {expand: _expand} = /*@__PURE__*/ requireExpand();
	const {flatten: _flatten} = /*@__PURE__*/ requireFlatten();
	const {fromRDF: _fromRDF} = /*@__PURE__*/ requireFromRdf();
	const {toRDF: _toRDF} = /*@__PURE__*/ requireToRdf();

	const {
	  frameMergedOrDefault: _frameMergedOrDefault,
	  cleanupNull: _cleanupNull
	} = /*@__PURE__*/ requireFrame();

	const {
	  isArray: _isArray,
	  isObject: _isObject,
	  isString: _isString
	} = /*@__PURE__*/ requireTypes();

	const {
	  isSubjectReference: _isSubjectReference,
	} = /*@__PURE__*/ requireGraphTypes();

	const {
	  expandIri: _expandIri,
	  getInitialContext: _getInitialContext,
	  process: _processContext,
	  processingMode: _processingMode
	} = /*@__PURE__*/ requireContext();

	const {
	  compact: _compact,
	  compactIri: _compactIri
	} = /*@__PURE__*/ requireCompact();

	const {
	  createNodeMap: _createNodeMap,
	  createMergedNodeMap: _createMergedNodeMap,
	  mergeNodeMaps: _mergeNodeMaps
	} = /*@__PURE__*/ requireNodeMap();

	const {
	  logEventHandler: _logEventHandler,
	  logWarningEventHandler: _logWarningEventHandler,
	  safeEventHandler: _safeEventHandler,
	  setDefaultEventHandler: _setDefaultEventHandler,
	  setupEventHandler: _setupEventHandler,
	  strictEventHandler: _strictEventHandler,
	  unhandledEventHandler: _unhandledEventHandler
	} = /*@__PURE__*/ requireEvents();

	/* eslint-disable indent */
	// attaches jsonld API to the given object
	const wrapper = function(jsonld) {

	/** Registered RDF dataset parsers hashed by content-type. */
	const _rdfParsers = {};

	// resolved context cache
	// TODO: consider basing max on context size rather than number
	const RESOLVED_CONTEXT_CACHE_MAX_SIZE = 100;
	const _resolvedContextCache = new LRU({max: RESOLVED_CONTEXT_CACHE_MAX_SIZE});

	/* Core API */

	/**
	 * Performs JSON-LD compaction.
	 *
	 * @param input the JSON-LD input to compact.
	 * @param ctx the context to compact with.
	 * @param [options] options to use:
	 *          [base] the base IRI to use.
	 *          [compactArrays] true to compact arrays to single values when
	 *            appropriate, false not to (default: true).
	 *          [compactToRelative] true to compact IRIs to be relative to document
	 *            base, false to keep absolute (default: true)
	 *          [graph] true to always output a top-level graph (default: false).
	 *          [expandContext] a context to expand with.
	 *          [skipExpansion] true to assume the input is expanded and skip
	 *            expansion, false not to, defaults to false. Some well-formed
	 *            and safe-mode checks may be omitted.
	 *          [documentLoader(url, options)] the document loader.
	 *          [framing] true if compaction is occuring during a framing operation.
	 *          [safe] true to use safe mode. (default: false)
	 *          [contextResolver] internal use only.
	 *
	 * @return a Promise that resolves to the compacted output.
	 */
	jsonld.compact = async function(input, ctx, options) {
	  if(arguments.length < 2) {
	    throw new TypeError('Could not compact, too few arguments.');
	  }

	  if(ctx === null) {
	    throw new JsonLdError(
	      'The compaction context must not be null.',
	      'jsonld.CompactError', {code: 'invalid local context'});
	  }

	  // nothing to compact
	  if(input === null) {
	    return null;
	  }

	  // set default options
	  options = _setDefaults(options, {
	    base: _isString(input) ? input : '',
	    compactArrays: true,
	    compactToRelative: true,
	    graph: false,
	    skipExpansion: false,
	    link: false,
	    issuer: new IdentifierIssuer('_:b'),
	    contextResolver: new ContextResolver(
	      {sharedCache: _resolvedContextCache})
	  });
	  if(options.link) {
	    // force skip expansion when linking, "link" is not part of the public
	    // API, it should only be called from framing
	    options.skipExpansion = true;
	  }
	  if(!options.compactToRelative) {
	    delete options.base;
	  }

	  // expand input
	  let expanded;
	  if(options.skipExpansion) {
	    expanded = input;
	  } else {
	    expanded = await jsonld.expand(input, options);
	  }

	  // process context
	  const activeCtx = await jsonld.processContext(
	    _getInitialContext(options), ctx, options);

	  // do compaction
	  let compacted = await _compact({
	    activeCtx,
	    element: expanded,
	    options
	  });

	  // perform clean up
	  if(options.compactArrays && !options.graph && _isArray(compacted)) {
	    if(compacted.length === 1) {
	      // simplify to a single item
	      compacted = compacted[0];
	    } else if(compacted.length === 0) {
	      // simplify to an empty object
	      compacted = {};
	    }
	  } else if(options.graph && _isObject(compacted)) {
	    // always use array if graph option is on
	    compacted = [compacted];
	  }

	  // follow @context key
	  if(_isObject(ctx) && '@context' in ctx) {
	    ctx = ctx['@context'];
	  }

	  // build output context
	  ctx = util.clone(ctx);
	  if(!_isArray(ctx)) {
	    ctx = [ctx];
	  }
	  // remove empty contexts
	  const tmp = ctx;
	  ctx = [];
	  for(let i = 0; i < tmp.length; ++i) {
	    if(!_isObject(tmp[i]) || Object.keys(tmp[i]).length > 0) {
	      ctx.push(tmp[i]);
	    }
	  }

	  // remove array if only one context
	  const hasContext = (ctx.length > 0);
	  if(ctx.length === 1) {
	    ctx = ctx[0];
	  }

	  // add context and/or @graph
	  if(_isArray(compacted)) {
	    // use '@graph' keyword
	    const graphAlias = _compactIri({
	      activeCtx, iri: '@graph', relativeTo: {vocab: true}
	    });
	    const graph = compacted;
	    compacted = {};
	    if(hasContext) {
	      compacted['@context'] = ctx;
	    }
	    compacted[graphAlias] = graph;
	  } else if(_isObject(compacted) && hasContext) {
	    // reorder keys so @context is first
	    const graph = compacted;
	    compacted = {'@context': ctx};
	    for(const key in graph) {
	      compacted[key] = graph[key];
	    }
	  }

	  return compacted;
	};

	/**
	 * Performs JSON-LD expansion.
	 *
	 * @param input the JSON-LD input to expand.
	 * @param [options] the options to use:
	 *          [base] the base IRI to use.
	 *          [expandContext] a context to expand with.
	 *          [keepFreeFloatingNodes] true to keep free-floating nodes,
	 *            false not to, defaults to false.
	 *          [documentLoader(url, options)] the document loader.
	 *          [safe] true to use safe mode. (default: false)
	 *          [contextResolver] internal use only.
	 *
	 * @return a Promise that resolves to the expanded output.
	 */
	jsonld.expand = async function(input, options) {
	  if(arguments.length < 1) {
	    throw new TypeError('Could not expand, too few arguments.');
	  }

	  // set default options
	  options = _setDefaults(options, {
	    keepFreeFloatingNodes: false,
	    contextResolver: new ContextResolver(
	      {sharedCache: _resolvedContextCache})
	  });

	  // build set of objects that may have @contexts to resolve
	  const toResolve = {};

	  // build set of contexts to process prior to expansion
	  const contextsToProcess = [];

	  // if an `expandContext` has been given ensure it gets resolved
	  if('expandContext' in options) {
	    const expandContext = util.clone(options.expandContext);
	    if(_isObject(expandContext) && '@context' in expandContext) {
	      toResolve.expandContext = expandContext;
	    } else {
	      toResolve.expandContext = {'@context': expandContext};
	    }
	    contextsToProcess.push(toResolve.expandContext);
	  }

	  // if input is a string, attempt to dereference remote document
	  let defaultBase;
	  if(!_isString(input)) {
	    // input is not a URL, do not need to retrieve it first
	    toResolve.input = util.clone(input);
	  } else {
	    // load remote doc
	    const remoteDoc = await jsonld.get(input, options);
	    defaultBase = remoteDoc.documentUrl;
	    toResolve.input = remoteDoc.document;
	    if(remoteDoc.contextUrl) {
	      // context included in HTTP link header and must be resolved
	      toResolve.remoteContext = {'@context': remoteDoc.contextUrl};
	      contextsToProcess.push(toResolve.remoteContext);
	    }
	  }

	  // set default base
	  if(!('base' in options)) {
	    options.base = defaultBase || '';
	  }

	  // process any additional contexts
	  let activeCtx = _getInitialContext(options);
	  for(const localCtx of contextsToProcess) {
	    activeCtx = await _processContext({activeCtx, localCtx, options});
	  }

	  // expand resolved input
	  let expanded = await _expand({
	    activeCtx,
	    element: toResolve.input,
	    options
	  });

	  // optimize away @graph with no other properties
	  if(_isObject(expanded) && ('@graph' in expanded) &&
	    Object.keys(expanded).length === 1) {
	    expanded = expanded['@graph'];
	  } else if(expanded === null) {
	    expanded = [];
	  }

	  // normalize to an array
	  if(!_isArray(expanded)) {
	    expanded = [expanded];
	  }

	  return expanded;
	};

	/**
	 * Performs JSON-LD flattening.
	 *
	 * @param input the JSON-LD to flatten.
	 * @param ctx the context to use to compact the flattened output, or null.
	 * @param [options] the options to use:
	 *          [base] the base IRI to use.
	 *          [expandContext] a context to expand with.
	 *          [documentLoader(url, options)] the document loader.
	 *          [contextResolver] internal use only.
	 *
	 * @return a Promise that resolves to the flattened output.
	 */
	jsonld.flatten = async function(input, ctx, options) {
	  if(arguments.length < 1) {
	    return new TypeError('Could not flatten, too few arguments.');
	  }

	  if(typeof ctx === 'function') {
	    ctx = null;
	  } else {
	    ctx = ctx || null;
	  }

	  // set default options
	  options = _setDefaults(options, {
	    base: _isString(input) ? input : '',
	    contextResolver: new ContextResolver(
	      {sharedCache: _resolvedContextCache})
	  });

	  // expand input
	  const expanded = await jsonld.expand(input, options);

	  // do flattening
	  const flattened = _flatten(expanded);

	  if(ctx === null) {
	    // no compaction required
	    return flattened;
	  }

	  // compact result (force @graph option to true, skip expansion)
	  options.graph = true;
	  options.skipExpansion = true;
	  const compacted = await jsonld.compact(flattened, ctx, options);

	  return compacted;
	};

	/**
	 * Performs JSON-LD framing.
	 *
	 * @param input the JSON-LD input to frame.
	 * @param frame the JSON-LD frame to use.
	 * @param [options] the framing options.
	 *          [base] the base IRI to use.
	 *          [expandContext] a context to expand with.
	 *          [embed] default @embed flag: '@last', '@always', '@never', '@link'
	 *            (default: '@last').
	 *          [explicit] default @explicit flag (default: false).
	 *          [requireAll] default @requireAll flag (default: true).
	 *          [omitDefault] default @omitDefault flag (default: false).
	 *          [documentLoader(url, options)] the document loader.
	 *          [safe] true to use safe mode. (default: false)
	 *          [contextResolver] internal use only.
	 *
	 * @return a Promise that resolves to the framed output.
	 */
	jsonld.frame = async function(input, frame, options) {
	  if(arguments.length < 2) {
	    throw new TypeError('Could not frame, too few arguments.');
	  }

	  // set default options
	  options = _setDefaults(options, {
	    base: _isString(input) ? input : '',
	    embed: '@once',
	    explicit: false,
	    requireAll: false,
	    omitDefault: false,
	    bnodesToClear: [],
	    contextResolver: new ContextResolver(
	      {sharedCache: _resolvedContextCache})
	  });

	  // if frame is a string, attempt to dereference remote document
	  if(_isString(frame)) {
	    // load remote doc
	    const remoteDoc = await jsonld.get(frame, options);
	    frame = remoteDoc.document;

	    if(remoteDoc.contextUrl) {
	      // inject link header @context into frame
	      let ctx = frame['@context'];
	      if(!ctx) {
	        ctx = remoteDoc.contextUrl;
	      } else if(_isArray(ctx)) {
	        ctx.push(remoteDoc.contextUrl);
	      } else {
	        ctx = [ctx, remoteDoc.contextUrl];
	      }
	      frame['@context'] = ctx;
	    }
	  }

	  const frameContext = frame ? frame['@context'] || {} : {};

	  // process context
	  const activeCtx = await jsonld.processContext(
	    _getInitialContext(options), frameContext, options);

	  // mode specific defaults
	  if(!options.hasOwnProperty('omitGraph')) {
	    options.omitGraph = _processingMode(activeCtx, 1.1);
	  }
	  if(!options.hasOwnProperty('pruneBlankNodeIdentifiers')) {
	    options.pruneBlankNodeIdentifiers = _processingMode(activeCtx, 1.1);
	  }

	  // expand input
	  const expanded = await jsonld.expand(input, options);

	  // expand frame
	  const opts = {...options};
	  opts.isFrame = true;
	  opts.keepFreeFloatingNodes = true;
	  const expandedFrame = await jsonld.expand(frame, opts);

	  // if the unexpanded frame includes a key expanding to @graph, frame the
	  // default graph, otherwise, the merged graph
	  const frameKeys = Object.keys(frame)
	    .map(key => _expandIri(activeCtx, key, {vocab: true}));
	  opts.merged = !frameKeys.includes('@graph');
	  opts.is11 = _processingMode(activeCtx, 1.1);

	  // do framing
	  const framed = _frameMergedOrDefault(expanded, expandedFrame, opts);

	  opts.graph = !options.omitGraph;
	  opts.skipExpansion = true;
	  opts.link = {};
	  opts.framing = true;
	  let compacted = await jsonld.compact(framed, frameContext, opts);

	  // replace @null with null, compacting arrays
	  opts.link = {};
	  compacted = _cleanupNull(compacted, opts);

	  return compacted;
	};

	/**
	 * **Experimental**
	 *
	 * Links a JSON-LD document's nodes in memory.
	 *
	 * @param input the JSON-LD document to link.
	 * @param [ctx] the JSON-LD context to apply.
	 * @param [options] the options to use:
	 *          [base] the base IRI to use.
	 *          [expandContext] a context to expand with.
	 *          [documentLoader(url, options)] the document loader.
	 *          [safe] true to use safe mode. (default: false)
	 *          [contextResolver] internal use only.
	 *
	 * @return a Promise that resolves to the linked output.
	 */
	jsonld.link = async function(input, ctx, options) {
	  // API matches running frame with a wildcard frame and embed: '@link'
	  // get arguments
	  const frame = {};
	  if(ctx) {
	    frame['@context'] = ctx;
	  }
	  frame['@embed'] = '@link';
	  return jsonld.frame(input, frame, options);
	};

	/**
	 * Performs RDF dataset normalization on the given input. The input is JSON-LD
	 * unless the 'inputFormat' option is used. The output is an RDF dataset
	 * unless the 'format' option is used.
	 *
	 * Note: Canonicalization sets `safe` to `true` and `base` to `null` by
	 * default in order to produce safe outputs and "fail closed" by default. This
	 * is different from the other API transformations in this version which
	 * allow unsafe defaults (for cryptographic usage) in order to comply with the
	 * JSON-LD 1.1 specification.
	 *
	 * @param input the input to normalize as JSON-LD or as a format specified by
	 *          the 'inputFormat' option.
	 * @param [options] the options to use:
	 *          [algorithm] the normalization algorithm to use, `URDNA2015` or
	 *            `URGNA2012` (default: `URDNA2015`).
	 *          [base] the base IRI to use (default: `null`).
	 *          [expandContext] a context to expand with.
	 *          [skipExpansion] true to assume the input is expanded and skip
	 *            expansion, false not to, defaults to false. Some well-formed
	 *            and safe-mode checks may be omitted.
	 *          [inputFormat] the format if input is not JSON-LD:
	 *            'application/n-quads' for N-Quads.
	 *          [format] the format if output is a string:
	 *            'application/n-quads' for N-Quads.
	 *          [documentLoader(url, options)] the document loader.
	 *          [useNative] true to use a native canonize algorithm
	 *          [rdfDirection] null or 'i18n-datatype' to support RDF
	 *             transformation of @direction (default: null).
	 *          [safe] true to use safe mode. (default: true).
	 *          [contextResolver] internal use only.
	 *
	 * @return a Promise that resolves to the normalized output.
	 */
	jsonld.normalize = jsonld.canonize = async function(input, options) {
	  if(arguments.length < 1) {
	    throw new TypeError('Could not canonize, too few arguments.');
	  }

	  // set default options
	  options = _setDefaults(options, {
	    base: _isString(input) ? input : null,
	    algorithm: 'URDNA2015',
	    skipExpansion: false,
	    safe: true,
	    contextResolver: new ContextResolver(
	      {sharedCache: _resolvedContextCache})
	  });
	  if('inputFormat' in options) {
	    if(options.inputFormat !== 'application/n-quads' &&
	      options.inputFormat !== 'application/nquads') {
	      throw new JsonLdError(
	        'Unknown canonicalization input format.',
	        'jsonld.CanonizeError');
	    }
	    // TODO: `await` for async parsers
	    const parsedInput = NQuads.parse(input);

	    // do canonicalization
	    return canonize.canonize(parsedInput, options);
	  }

	  // convert to RDF dataset then do normalization
	  const opts = {...options};
	  delete opts.format;
	  opts.produceGeneralizedRdf = false;
	  const dataset = await jsonld.toRDF(input, opts);

	  // do canonicalization
	  return canonize.canonize(dataset, options);
	};

	/**
	 * Converts an RDF dataset to JSON-LD.
	 *
	 * @param dataset a serialized string of RDF in a format specified by the
	 *          format option or an RDF dataset to convert.
	 * @param [options] the options to use:
	 *          [format] the format if dataset param must first be parsed:
	 *            'application/n-quads' for N-Quads (default).
	 *          [rdfParser] a custom RDF-parser to use to parse the dataset.
	 *          [useRdfType] true to use rdf:type, false to use @type
	 *            (default: false).
	 *          [useNativeTypes] true to convert XSD types into native types
	 *            (boolean, integer, double), false not to (default: false).
	 *          [rdfDirection] null or 'i18n-datatype' to support RDF
	 *             transformation of @direction (default: null).
	 *          [safe] true to use safe mode. (default: false)
	 *
	 * @return a Promise that resolves to the JSON-LD document.
	 */
	jsonld.fromRDF = async function(dataset, options) {
	  if(arguments.length < 1) {
	    throw new TypeError('Could not convert from RDF, too few arguments.');
	  }

	  // set default options
	  options = _setDefaults(options, {
	    format: _isString(dataset) ? 'application/n-quads' : undefined
	  });

	  const {format} = options;
	  let {rdfParser} = options;

	  // handle special format
	  if(format) {
	    // check supported formats
	    rdfParser = rdfParser || _rdfParsers[format];
	    if(!rdfParser) {
	      throw new JsonLdError(
	        'Unknown input format.',
	        'jsonld.UnknownFormat', {format});
	    }
	  } else {
	    // no-op parser, assume dataset already parsed
	    rdfParser = () => dataset;
	  }

	  // rdfParser must be synchronous or return a promise, no callback support
	  const parsedDataset = await rdfParser(dataset);
	  return _fromRDF(parsedDataset, options);
	};

	/**
	 * Outputs the RDF dataset found in the given JSON-LD object.
	 *
	 * @param input the JSON-LD input.
	 * @param [options] the options to use:
	 *          [base] the base IRI to use.
	 *          [expandContext] a context to expand with.
	 *          [skipExpansion] true to assume the input is expanded and skip
	 *            expansion, false not to, defaults to false. Some well-formed
	 *            and safe-mode checks may be omitted.
	 *          [format] the format to use to output a string:
	 *            'application/n-quads' for N-Quads.
	 *          [produceGeneralizedRdf] true to output generalized RDF, false
	 *            to produce only standard RDF (default: false).
	 *          [documentLoader(url, options)] the document loader.
	 *          [safe] true to use safe mode. (default: false)
	 *          [rdfDirection] null or 'i18n-datatype' to support RDF
	 *             transformation of @direction (default: null).
	 *          [contextResolver] internal use only.
	 *
	 * @return a Promise that resolves to the RDF dataset.
	 */
	jsonld.toRDF = async function(input, options) {
	  if(arguments.length < 1) {
	    throw new TypeError('Could not convert to RDF, too few arguments.');
	  }

	  // set default options
	  options = _setDefaults(options, {
	    base: _isString(input) ? input : '',
	    skipExpansion: false,
	    contextResolver: new ContextResolver(
	      {sharedCache: _resolvedContextCache})
	  });

	  // TODO: support toRDF custom map?
	  let expanded;
	  if(options.skipExpansion) {
	    expanded = input;
	  } else {
	    // expand input
	    expanded = await jsonld.expand(input, options);
	  }

	  // output RDF dataset
	  const dataset = _toRDF(expanded, options);
	  if(options.format) {
	    if(options.format === 'application/n-quads' ||
	      options.format === 'application/nquads') {
	      return NQuads.serialize(dataset);
	    }
	    throw new JsonLdError(
	      'Unknown output format.',
	      'jsonld.UnknownFormat', {format: options.format});
	  }

	  return dataset;
	};

	/**
	 * **Experimental**
	 *
	 * Recursively flattens the nodes in the given JSON-LD input into a merged
	 * map of node ID => node. All graphs will be merged into the default graph.
	 *
	 * @param input the JSON-LD input.
	 * @param [options] the options to use:
	 *          [base] the base IRI to use.
	 *          [expandContext] a context to expand with.
	 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
	 *          [documentLoader(url, options)] the document loader.
	 *          [contextResolver] internal use only.
	 *
	 * @return a Promise that resolves to the merged node map.
	 */
	jsonld.createNodeMap = async function(input, options) {
	  if(arguments.length < 1) {
	    throw new TypeError('Could not create node map, too few arguments.');
	  }

	  // set default options
	  options = _setDefaults(options, {
	    base: _isString(input) ? input : '',
	    contextResolver: new ContextResolver(
	      {sharedCache: _resolvedContextCache})
	  });

	  // expand input
	  const expanded = await jsonld.expand(input, options);

	  return _createMergedNodeMap(expanded, options);
	};

	/**
	 * **Experimental**
	 *
	 * Merges two or more JSON-LD documents into a single flattened document.
	 *
	 * @param docs the JSON-LD documents to merge together.
	 * @param ctx the context to use to compact the merged result, or null.
	 * @param [options] the options to use:
	 *          [base] the base IRI to use.
	 *          [expandContext] a context to expand with.
	 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
	 *          [mergeNodes] true to merge properties for nodes with the same ID,
	 *            false to ignore new properties for nodes with the same ID once
	 *            the ID has been defined; note that this may not prevent merging
	 *            new properties where a node is in the `object` position
	 *            (default: true).
	 *          [documentLoader(url, options)] the document loader.
	 *          [safe] true to use safe mode. (default: false)
	 *          [contextResolver] internal use only.
	 *
	 * @return a Promise that resolves to the merged output.
	 */
	jsonld.merge = async function(docs, ctx, options) {
	  if(arguments.length < 1) {
	    throw new TypeError('Could not merge, too few arguments.');
	  }
	  if(!_isArray(docs)) {
	    throw new TypeError('Could not merge, "docs" must be an array.');
	  }

	  if(typeof ctx === 'function') {
	    ctx = null;
	  } else {
	    ctx = ctx || null;
	  }

	  // set default options
	  options = _setDefaults(options, {
	    contextResolver: new ContextResolver(
	      {sharedCache: _resolvedContextCache})
	  });

	  // expand all documents
	  const expanded = await Promise.all(docs.map(doc => {
	    const opts = {...options};
	    return jsonld.expand(doc, opts);
	  }));

	  let mergeNodes = true;
	  if('mergeNodes' in options) {
	    mergeNodes = options.mergeNodes;
	  }

	  const issuer = options.issuer || new IdentifierIssuer('_:b');
	  const graphs = {'@default': {}};

	  for(let i = 0; i < expanded.length; ++i) {
	    // uniquely relabel blank nodes
	    const doc = util.relabelBlankNodes(expanded[i], {
	      issuer: new IdentifierIssuer('_:b' + i + '-')
	    });

	    // add nodes to the shared node map graphs if merging nodes, to a
	    // separate graph set if not
	    const _graphs = (mergeNodes || i === 0) ? graphs : {'@default': {}};
	    _createNodeMap(doc, _graphs, '@default', issuer);

	    if(_graphs !== graphs) {
	      // merge document graphs but don't merge existing nodes
	      for(const graphName in _graphs) {
	        const _nodeMap = _graphs[graphName];
	        if(!(graphName in graphs)) {
	          graphs[graphName] = _nodeMap;
	          continue;
	        }
	        const nodeMap = graphs[graphName];
	        for(const key in _nodeMap) {
	          if(!(key in nodeMap)) {
	            nodeMap[key] = _nodeMap[key];
	          }
	        }
	      }
	    }
	  }

	  // add all non-default graphs to default graph
	  const defaultGraph = _mergeNodeMaps(graphs);

	  // produce flattened output
	  const flattened = [];
	  const keys = Object.keys(defaultGraph).sort();
	  for(let ki = 0; ki < keys.length; ++ki) {
	    const node = defaultGraph[keys[ki]];
	    // only add full subjects to top-level
	    if(!_isSubjectReference(node)) {
	      flattened.push(node);
	    }
	  }

	  if(ctx === null) {
	    return flattened;
	  }

	  // compact result (force @graph option to true, skip expansion)
	  options.graph = true;
	  options.skipExpansion = true;
	  const compacted = await jsonld.compact(flattened, ctx, options);

	  return compacted;
	};

	/**
	 * The default document loader for external documents.
	 *
	 * @param url the URL to load.
	 *
	 * @return a promise that resolves to the remote document.
	 */
	Object.defineProperty(jsonld, 'documentLoader', {
	  get: () => jsonld._documentLoader,
	  set: v => jsonld._documentLoader = v
	});
	// default document loader not implemented
	jsonld.documentLoader = async url => {
	  throw new JsonLdError(
	    'Could not retrieve a JSON-LD document from the URL. URL ' +
	    'dereferencing not implemented.', 'jsonld.LoadDocumentError',
	    {code: 'loading document failed', url});
	};

	/**
	 * Gets a remote JSON-LD document using the default document loader or
	 * one given in the passed options.
	 *
	 * @param url the URL to fetch.
	 * @param [options] the options to use:
	 *          [documentLoader] the document loader to use.
	 *
	 * @return a Promise that resolves to the retrieved remote document.
	 */
	jsonld.get = async function(url, options) {
	  let load;
	  if(typeof options.documentLoader === 'function') {
	    load = options.documentLoader;
	  } else {
	    load = jsonld.documentLoader;
	  }

	  const remoteDoc = await load(url);

	  try {
	    if(!remoteDoc.document) {
	      throw new JsonLdError(
	        'No remote document found at the given URL.',
	        'jsonld.NullRemoteDocument');
	    }
	    if(_isString(remoteDoc.document)) {
	      remoteDoc.document = JSON.parse(remoteDoc.document);
	    }
	  } catch(e) {
	    throw new JsonLdError(
	      'Could not retrieve a JSON-LD document from the URL.',
	      'jsonld.LoadDocumentError', {
	        code: 'loading document failed',
	        cause: e,
	        remoteDoc
	      });
	  }

	  return remoteDoc;
	};

	/**
	 * Processes a local context, resolving any URLs as necessary, and returns a
	 * new active context.
	 *
	 * @param activeCtx the current active context.
	 * @param localCtx the local context to process.
	 * @param [options] the options to use:
	 *          [documentLoader(url, options)] the document loader.
	 *          [safe] true to use safe mode. (default: false)
	 *          [contextResolver] internal use only.
	 *
	 * @return a Promise that resolves to the new active context.
	 */
	jsonld.processContext = async function(
	  activeCtx, localCtx, options) {
	  // set default options
	  options = _setDefaults(options, {
	    base: '',
	    contextResolver: new ContextResolver(
	      {sharedCache: _resolvedContextCache})
	  });

	  // return initial context early for null context
	  if(localCtx === null) {
	    return _getInitialContext(options);
	  }

	  // get URLs in localCtx
	  localCtx = util.clone(localCtx);
	  if(!(_isObject(localCtx) && '@context' in localCtx)) {
	    localCtx = {'@context': localCtx};
	  }

	  return _processContext({activeCtx, localCtx, options});
	};

	// backwards compatibility
	jsonld.getContextValue = /*@__PURE__*/ requireContext().getContextValue;

	/**
	 * Document loaders.
	 */
	jsonld.documentLoaders = {};

	/**
	 * Assigns the default document loader for external document URLs to a built-in
	 * default. Supported types currently include: 'xhr' and 'node'.
	 *
	 * @param type the type to set.
	 * @param [params] the parameters required to use the document loader.
	 */
	jsonld.useDocumentLoader = function(type) {
	  if(!(type in jsonld.documentLoaders)) {
	    throw new JsonLdError(
	      'Unknown document loader type: "' + type + '"',
	      'jsonld.UnknownDocumentLoader',
	      {type});
	  }

	  // set document loader
	  jsonld.documentLoader = jsonld.documentLoaders[type].apply(
	    jsonld, Array.prototype.slice.call(arguments, 1));
	};

	/**
	 * Registers an RDF dataset parser by content-type, for use with
	 * jsonld.fromRDF. An RDF dataset parser will always be given one parameter,
	 * a string of input. An RDF dataset parser can be synchronous or
	 * asynchronous (by returning a promise).
	 *
	 * @param contentType the content-type for the parser.
	 * @param parser(input) the parser function (takes a string as a parameter
	 *          and either returns an RDF dataset or a Promise that resolves to one.
	 */
	jsonld.registerRDFParser = function(contentType, parser) {
	  _rdfParsers[contentType] = parser;
	};

	/**
	 * Unregisters an RDF dataset parser by content-type.
	 *
	 * @param contentType the content-type for the parser.
	 */
	jsonld.unregisterRDFParser = function(contentType) {
	  delete _rdfParsers[contentType];
	};

	// register the N-Quads RDF parser
	jsonld.registerRDFParser('application/n-quads', NQuads.parse);
	jsonld.registerRDFParser('application/nquads', NQuads.parse);

	/* URL API */
	jsonld.url = /*@__PURE__*/ requireUrl();

	/* Events API and handlers */
	jsonld.logEventHandler = _logEventHandler;
	jsonld.logWarningEventHandler = _logWarningEventHandler;
	jsonld.safeEventHandler = _safeEventHandler;
	jsonld.setDefaultEventHandler = _setDefaultEventHandler;
	jsonld.strictEventHandler = _strictEventHandler;
	jsonld.unhandledEventHandler = _unhandledEventHandler;

	/* Utility API */
	jsonld.util = util;
	// backwards compatibility
	Object.assign(jsonld, util);

	// reexpose API as jsonld.promises for backwards compatability
	jsonld.promises = jsonld;

	// backwards compatibility
	jsonld.RequestQueue = /*@__PURE__*/ requireRequestQueue();

	/* WebIDL API */
	jsonld.JsonLdProcessor = /*@__PURE__*/ requireJsonLdProcessor()(jsonld);

	platform.setupGlobals(jsonld);
	platform.setupDocumentLoaders(jsonld);

	function _setDefaults(options, {
	  documentLoader = jsonld.documentLoader,
	  ...defaults
	}) {
	  // fail if obsolete options present
	  if(options && 'compactionMap' in options) {
	    throw new JsonLdError(
	      '"compactionMap" not supported.',
	      'jsonld.OptionsError');
	  }
	  if(options && 'expansionMap' in options) {
	    throw new JsonLdError(
	      '"expansionMap" not supported.',
	      'jsonld.OptionsError');
	  }
	  return Object.assign(
	    {},
	    {documentLoader},
	    defaults,
	    options,
	    {eventHandler: _setupEventHandler({options})}
	  );
	}

	// end of jsonld API `wrapper` factory
	return jsonld;
	};

	// external APIs:

	// used to generate a new jsonld API instance
	const factory = function() {
	  return wrapper(function() {
	    return factory();
	  });
	};

	// wrap the main jsonld API instance
	wrapper(factory);
	// export API
	jsonld = factory;
	return jsonld;
}

var jsonldExports = /*@__PURE__*/ requireJsonld();

function commonjsRequire(path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

var n3_min = {exports: {}};

var hasRequiredN3_min;

function requireN3_min () {
	if (hasRequiredN3_min) return n3_min.exports;
	hasRequiredN3_min = 1;
	(function (module, exports) {
		(function(f){{module.exports=f();}})(function(){return function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof commonjsRequire&&commonjsRequire;if(!f&&c)return c(i,true);if(u)return u(i,true);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t);}return n[i].exports}for(var u="function"==typeof commonjsRequire&&commonjsRequire,i=0;i<t.length;i++)o(t[i]);return o}return r}()({1:[function(require,module,exports){Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;const RDF="http://www.w3.org/1999/02/22-rdf-syntax-ns#",XSD="http://www.w3.org/2001/XMLSchema#",SWAP="http://www.w3.org/2000/10/swap/";exports.default={xsd:{decimal:`${XSD}decimal`,boolean:`${XSD}boolean`,double:`${XSD}double`,integer:`${XSD}integer`,string:`${XSD}string`},rdf:{type:`${RDF}type`,nil:`${RDF}nil`,first:`${RDF}first`,rest:`${RDF}rest`,langString:`${RDF}langString`},owl:{sameAs:"http://www.w3.org/2002/07/owl#sameAs"},r:{forSome:`${SWAP}reify#forSome`,forAll:`${SWAP}reify#forAll`},log:{implies:`${SWAP}log#implies`}};},{}],2:[function(require,module,exports){Object.defineProperty(exports,"__esModule",{value:true});exports.default=exports.Variable=exports.Triple=exports.Term=exports.Quad=exports.NamedNode=exports.Literal=exports.DefaultGraph=exports.BlankNode=void 0;exports.escapeQuotes=escapeQuotes;exports.termFromId=termFromId;exports.termToId=termToId;exports.unescapeQuotes=unescapeQuotes;var _IRIs=_interopRequireDefault(require("./IRIs"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const{rdf,xsd}=_IRIs.default;let DEFAULTGRAPH;let _blankNodeCounter=0;const escapedLiteral=/^"(.*".*)(?="[^"]*$)/;const DataFactory={namedNode:namedNode,blankNode:blankNode,variable:variable,literal:literal,defaultGraph:defaultGraph,quad:quad,triple:quad};exports.default=DataFactory;class Term{constructor(id){this.id=id;}get value(){return this.id}equals(other){if(other instanceof Term)return this.id===other.id;return !!other&&this.termType===other.termType&&this.value===other.value}hashCode(){return 0}toJSON(){return {termType:this.termType,value:this.value}}}exports.Term=Term;class NamedNode extends Term{get termType(){return "NamedNode"}}exports.NamedNode=NamedNode;class Literal extends Term{get termType(){return "Literal"}get value(){return this.id.substring(1,this.id.lastIndexOf('"'))}get language(){const id=this.id;let atPos=id.lastIndexOf('"')+1;return atPos<id.length&&id[atPos++]==="@"?id.substr(atPos).toLowerCase():""}get datatype(){return new NamedNode(this.datatypeString)}get datatypeString(){const id=this.id,dtPos=id.lastIndexOf('"')+1;const char=dtPos<id.length?id[dtPos]:"";return char==="^"?id.substr(dtPos+2):char!=="@"?xsd.string:rdf.langString}equals(other){if(other instanceof Literal)return this.id===other.id;return !!other&&!!other.datatype&&this.termType===other.termType&&this.value===other.value&&this.language===other.language&&this.datatype.value===other.datatype.value}toJSON(){return {termType:this.termType,value:this.value,language:this.language,datatype:{termType:"NamedNode",value:this.datatypeString}}}}exports.Literal=Literal;class BlankNode extends Term{constructor(name){super(`_:${name}`);}get termType(){return "BlankNode"}get value(){return this.id.substr(2)}}exports.BlankNode=BlankNode;class Variable extends Term{constructor(name){super(`?${name}`);}get termType(){return "Variable"}get value(){return this.id.substr(1)}}exports.Variable=Variable;class DefaultGraph extends Term{constructor(){super("");return DEFAULTGRAPH||this}get termType(){return "DefaultGraph"}equals(other){return this===other||!!other&&this.termType===other.termType}}exports.DefaultGraph=DefaultGraph;DEFAULTGRAPH=new DefaultGraph;function termFromId(id,factory,nested){factory=factory||DataFactory;if(!id)return factory.defaultGraph();switch(id[0]){case "?":return factory.variable(id.substr(1));case "_":return factory.blankNode(id.substr(2));case '"':if(factory===DataFactory)return new Literal(id);if(id[id.length-1]==='"')return factory.literal(id.substr(1,id.length-2));const endPos=id.lastIndexOf('"',id.length-1);return factory.literal(id.substr(1,endPos-1),id[endPos+1]==="@"?id.substr(endPos+2):factory.namedNode(id.substr(endPos+3)));case "[":id=JSON.parse(id);break;default:if(!nested||!Array.isArray(id)){return factory.namedNode(id)}}return factory.quad(termFromId(id[0],factory,true),termFromId(id[1],factory,true),termFromId(id[2],factory,true),id[3]&&termFromId(id[3],factory,true))}function termToId(term,nested){if(typeof term==="string")return term;if(term instanceof Term&&term.termType!=="Quad")return term.id;if(!term)return DEFAULTGRAPH.id;switch(term.termType){case "NamedNode":return term.value;case "BlankNode":return `_:${term.value}`;case "Variable":return `?${term.value}`;case "DefaultGraph":return "";case "Literal":return `"${term.value}"${term.language?`@${term.language}`:term.datatype&&term.datatype.value!==xsd.string?`^^${term.datatype.value}`:""}`;case "Quad":const res=[termToId(term.subject,true),termToId(term.predicate,true),termToId(term.object,true)];if(term.graph&&term.graph.termType!=="DefaultGraph"){res.push(termToId(term.graph,true));}return nested?res:JSON.stringify(res);default:throw new Error(`Unexpected termType: ${term.termType}`)}}class Quad extends Term{constructor(subject,predicate,object,graph){super("");this._subject=subject;this._predicate=predicate;this._object=object;this._graph=graph||DEFAULTGRAPH;}get termType(){return "Quad"}get subject(){return this._subject}get predicate(){return this._predicate}get object(){return this._object}get graph(){return this._graph}toJSON(){return {termType:this.termType,subject:this._subject.toJSON(),predicate:this._predicate.toJSON(),object:this._object.toJSON(),graph:this._graph.toJSON()}}equals(other){return !!other&&this._subject.equals(other.subject)&&this._predicate.equals(other.predicate)&&this._object.equals(other.object)&&this._graph.equals(other.graph)}}exports.Triple=exports.Quad=Quad;function escapeQuotes(id){return id.replace(escapedLiteral,(_,quoted)=>`"${quoted.replace(/"/g,'""')}`)}function unescapeQuotes(id){return id.replace(escapedLiteral,(_,quoted)=>`"${quoted.replace(/""/g,'"')}`)}function namedNode(iri){return new NamedNode(iri)}function blankNode(name){return new BlankNode(name||`n3-${_blankNodeCounter++}`)}function literal(value,languageOrDataType){if(typeof languageOrDataType==="string")return new Literal(`"${value}"@${languageOrDataType.toLowerCase()}`);let datatype=languageOrDataType?languageOrDataType.value:"";if(datatype===""){if(typeof value==="boolean")datatype=xsd.boolean;else if(typeof value==="number"){if(Number.isFinite(value))datatype=Number.isInteger(value)?xsd.integer:xsd.double;else {datatype=xsd.double;if(!Number.isNaN(value))value=value>0?"INF":"-INF";}}}return datatype===""||datatype===xsd.string?new Literal(`"${value}"`):new Literal(`"${value}"^^${datatype}`)}function variable(name){return new Variable(name)}function defaultGraph(){return DEFAULTGRAPH}function quad(subject,predicate,object,graph){return new Quad(subject,predicate,object,graph)}},{"./IRIs":1}],3:[function(require,module,exports){(function(Buffer){(function(){Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _queueMicrotask=_interopRequireDefault(require("queue-microtask"));var _IRIs=_interopRequireDefault(require("./IRIs"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const{xsd}=_IRIs.default;const escapeSequence=/\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\([^])/g;const escapeReplacements={"\\":"\\","'":"'",'"':'"',n:"\n",r:"\r",t:"\t",f:"\f",b:"\b",_:"_","~":"~",".":".","-":"-","!":"!",$:"$","&":"&","(":"(",")":")","*":"*","+":"+",",":",",";":";","=":"=","/":"/","?":"?","#":"#","@":"@","%":"%"};const illegalIriChars=/[\x00-\x20<>\\"\{\}\|\^\`]/;const lineModeRegExps={_iri:true,_unescapedIri:true,_simpleQuotedString:true,_langcode:true,_blank:true,_newline:true,_comment:true,_whitespace:true,_endOfFile:true};const invalidRegExp=/$0^/;class N3Lexer{constructor(options){this._iri=/^<((?:[^ <>{}\\]|\\[uU])+)>[ \t]*/;this._unescapedIri=/^<([^\x00-\x20<>\\"\{\}\|\^\`]*)>[ \t]*/;this._simpleQuotedString=/^"([^"\\\r\n]*)"(?=[^"])/;this._simpleApostropheString=/^'([^'\\\r\n]*)'(?=[^'])/;this._langcode=/^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\-])/i;this._prefix=/^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:(?=[#\s<])/;this._prefixed=/^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:((?:(?:[0-:A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])(?:(?:[\.\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])*(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~]))?)?)(?:[ \t]+|(?=\.?[,;!\^\s#()\[\]\{\}"'<>]))/;this._variable=/^\?(?:(?:[A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?=[.,;!\^\s#()\[\]\{\}"'<>])/;this._blank=/^_:((?:[0-9A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?:[ \t]+|(?=\.?[,;:\s#()\[\]\{\}"'<>]))/;this._number=/^[\-+]?(?:(\d+\.\d*|\.?\d+)[eE][\-+]?|\d*(\.)?)\d+(?=\.?[,;:\s#()\[\]\{\}"'<>])/;this._boolean=/^(?:true|false)(?=[.,;\s#()\[\]\{\}"'<>])/;this._keyword=/^@[a-z]+(?=[\s#<:])/i;this._sparqlKeyword=/^(?:PREFIX|BASE|GRAPH)(?=[\s#<])/i;this._shortPredicates=/^a(?=[\s#()\[\]\{\}"'<>])/;this._newline=/^[ \t]*(?:#[^\n\r]*)?(?:\r\n|\n|\r)[ \t]*/;this._comment=/#([^\n\r]*)/;this._whitespace=/^[ \t]+/;this._endOfFile=/^(?:#[^\n\r]*)?$/;options=options||{};if(this._lineMode=!!options.lineMode){this._n3Mode=false;for(const key in this){if(!(key in lineModeRegExps)&&this[key]instanceof RegExp)this[key]=invalidRegExp;}}else {this._n3Mode=options.n3!==false;}this._comments=!!options.comments;this._literalClosingPos=0;}_tokenizeToEnd(callback,inputFinished){let input=this._input;let currentLineLength=input.length;while(true){let whiteSpaceMatch,comment;while(whiteSpaceMatch=this._newline.exec(input)){if(this._comments&&(comment=this._comment.exec(whiteSpaceMatch[0])))emitToken("comment",comment[1],"",this._line,whiteSpaceMatch[0].length);input=input.substr(whiteSpaceMatch[0].length,input.length);currentLineLength=input.length;this._line++;}if(!whiteSpaceMatch&&(whiteSpaceMatch=this._whitespace.exec(input)))input=input.substr(whiteSpaceMatch[0].length,input.length);if(this._endOfFile.test(input)){if(inputFinished){if(this._comments&&(comment=this._comment.exec(input)))emitToken("comment",comment[1],"",this._line,input.length);input=null;emitToken("eof","","",this._line,0);}return this._input=input}const line=this._line,firstChar=input[0];let type="",value="",prefix="",match=null,matchLength=0,inconclusive=false;switch(firstChar){case "^":if(input.length<3)break;else if(input[1]==="^"){this._previousMarker="^^";input=input.substr(2);if(input[0]!=="<"){inconclusive=true;break}}else {if(this._n3Mode){matchLength=1;type="^";}break}case "<":if(match=this._unescapedIri.exec(input))type="IRI",value=match[1];else if(match=this._iri.exec(input)){value=this._unescape(match[1]);if(value===null||illegalIriChars.test(value))return reportSyntaxError(this);type="IRI";}else if(input.length>1&&input[1]==="<")type="<<",matchLength=2;else if(this._n3Mode&&input.length>1&&input[1]==="=")type="inverse",matchLength=2,value=">";break;case ">":if(input.length>1&&input[1]===">")type=">>",matchLength=2;break;case "_":if((match=this._blank.exec(input))||inputFinished&&(match=this._blank.exec(`${input} `)))type="blank",prefix="_",value=match[1];break;case '"':if(match=this._simpleQuotedString.exec(input))value=match[1];else {({value,matchLength}=this._parseLiteral(input));if(value===null)return reportSyntaxError(this)}if(match!==null||matchLength!==0){type="literal";this._literalClosingPos=0;}break;case "'":if(!this._lineMode){if(match=this._simpleApostropheString.exec(input))value=match[1];else {({value,matchLength}=this._parseLiteral(input));if(value===null)return reportSyntaxError(this)}if(match!==null||matchLength!==0){type="literal";this._literalClosingPos=0;}}break;case "?":if(this._n3Mode&&(match=this._variable.exec(input)))type="var",value=match[0];break;case "@":if(this._previousMarker==="literal"&&(match=this._langcode.exec(input)))type="langcode",value=match[1];else if(match=this._keyword.exec(input))type=match[0];break;case ".":if(input.length===1?inputFinished:input[1]<"0"||input[1]>"9"){type=".";matchLength=1;break}case "0":case "1":case "2":case "3":case "4":case "5":case "6":case "7":case "8":case "9":case "+":case "-":if(match=this._number.exec(input)||inputFinished&&(match=this._number.exec(`${input} `))){type="literal",value=match[0];prefix=typeof match[1]==="string"?xsd.double:typeof match[2]==="string"?xsd.decimal:xsd.integer;}break;case "B":case "b":case "p":case "P":case "G":case "g":if(match=this._sparqlKeyword.exec(input))type=match[0].toUpperCase();else inconclusive=true;break;case "f":case "t":if(match=this._boolean.exec(input))type="literal",value=match[0],prefix=xsd.boolean;else inconclusive=true;break;case "a":if(match=this._shortPredicates.exec(input))type="abbreviation",value="a";else inconclusive=true;break;case "=":if(this._n3Mode&&input.length>1){type="abbreviation";if(input[1]!==">")matchLength=1,value="=";else matchLength=2,value=">";}break;case "!":if(!this._n3Mode)break;case ",":case ";":case "[":case "]":case "(":case ")":case "}":if(!this._lineMode){matchLength=1;type=firstChar;}break;case "{":if(!this._lineMode&&input.length>=2){if(input[1]==="|")type="{|",matchLength=2;else type=firstChar,matchLength=1;}break;case "|":if(input.length>=2&&input[1]==="}")type="|}",matchLength=2;break;default:inconclusive=true;}if(inconclusive){if((this._previousMarker==="@prefix"||this._previousMarker==="PREFIX")&&(match=this._prefix.exec(input)))type="prefix",value=match[1]||"";else if((match=this._prefixed.exec(input))||inputFinished&&(match=this._prefixed.exec(`${input} `)))type="prefixed",prefix=match[1]||"",value=this._unescape(match[2]);}if(this._previousMarker==="^^"){switch(type){case "prefixed":type="type";break;case "IRI":type="typeIRI";break;default:type="";}}if(!type){if(inputFinished||!/^'''|^"""/.test(input)&&/\n|\r/.test(input))return reportSyntaxError(this);else return this._input=input}const length=matchLength||match[0].length;const token=emitToken(type,value,prefix,line,length);this.previousToken=token;this._previousMarker=type;input=input.substr(length,input.length);}function emitToken(type,value,prefix,line,length){const start=input?currentLineLength-input.length:currentLineLength;const end=start+length;const token={type:type,value:value,prefix:prefix,line:line,start:start,end:end};callback(null,token);return token}function reportSyntaxError(self){callback(self._syntaxError(/^\S*/.exec(input)[0]));}}_unescape(item){let invalid=false;const replaced=item.replace(escapeSequence,(sequence,unicode4,unicode8,escapedChar)=>{if(typeof unicode4==="string")return String.fromCharCode(Number.parseInt(unicode4,16));if(typeof unicode8==="string"){let charCode=Number.parseInt(unicode8,16);return charCode<=65535?String.fromCharCode(Number.parseInt(unicode8,16)):String.fromCharCode(55296+((charCode-=65536)>>10),56320+(charCode&1023))}if(escapedChar in escapeReplacements)return escapeReplacements[escapedChar];invalid=true;return ""});return invalid?null:replaced}_parseLiteral(input){if(input.length>=3){const opening=input.match(/^(?:"""|"|'''|'|)/)[0];const openingLength=opening.length;let closingPos=Math.max(this._literalClosingPos,openingLength);while((closingPos=input.indexOf(opening,closingPos))>0){let backslashCount=0;while(input[closingPos-backslashCount-1]==="\\")backslashCount++;if(backslashCount%2===0){const raw=input.substring(openingLength,closingPos);const lines=raw.split(/\r\n|\r|\n/).length-1;const matchLength=closingPos+openingLength;if(openingLength===1&&lines!==0||openingLength===3&&this._lineMode)break;this._line+=lines;return {value:this._unescape(raw),matchLength:matchLength}}closingPos++;}this._literalClosingPos=input.length-openingLength+1;}return {value:"",matchLength:0}}_syntaxError(issue){this._input=null;const err=new Error(`Unexpected "${issue}" on line ${this._line}.`);err.context={token:undefined,line:this._line,previousToken:this.previousToken};return err}_readStartingBom(input){return input.startsWith("\ufeff")?input.substr(1):input}tokenize(input,callback){this._line=1;if(typeof input==="string"){this._input=this._readStartingBom(input);if(typeof callback==="function")(0, _queueMicrotask.default)(()=>this._tokenizeToEnd(callback,true));else {const tokens=[];let error;this._tokenizeToEnd((e,t)=>e?error=e:tokens.push(t),true);if(error)throw error;return tokens}}else {this._pendingBuffer=null;if(typeof input.setEncoding==="function")input.setEncoding("utf8");input.on("data",data=>{if(this._input!==null&&data.length!==0){if(this._pendingBuffer){data=Buffer.concat([this._pendingBuffer,data]);this._pendingBuffer=null;}if(data[data.length-1]&128){this._pendingBuffer=data;}else {if(typeof this._input==="undefined")this._input=this._readStartingBom(typeof data==="string"?data:data.toString());else this._input+=data;this._tokenizeToEnd(callback,false);}}});input.on("end",()=>{if(typeof this._input==="string")this._tokenizeToEnd(callback,true);});input.on("error",callback);}}}exports.default=N3Lexer;}).call(this);}).call(this,require("buffer").Buffer);},{"./IRIs":1,buffer:15,"queue-microtask":19}],4:[function(require,module,exports){Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _N3Lexer=_interopRequireDefault(require("./N3Lexer"));var _N3DataFactory=_interopRequireDefault(require("./N3DataFactory"));var _IRIs=_interopRequireDefault(require("./IRIs"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}let blankNodePrefix=0;class N3Parser{constructor(options){this._contextStack=[];this._graph=null;options=options||{};this._setBase(options.baseIRI);options.factory&&initDataFactory(this,options.factory);const format=typeof options.format==="string"?options.format.match(/\w*$/)[0].toLowerCase():"",isTurtle=/turtle/.test(format),isTriG=/trig/.test(format),isNTriples=/triple/.test(format),isNQuads=/quad/.test(format),isN3=this._n3Mode=/n3/.test(format),isLineMode=isNTriples||isNQuads;if(!(this._supportsNamedGraphs=!(isTurtle||isN3)))this._readPredicateOrNamedGraph=this._readPredicate;this._supportsQuads=!(isTurtle||isTriG||isNTriples||isN3);this._supportsRDFStar=format===""||/star|\*$/.test(format);if(isLineMode)this._resolveRelativeIRI=iri=>{return null};this._blankNodePrefix=typeof options.blankNodePrefix!=="string"?"":options.blankNodePrefix.replace(/^(?!_:)/,"_:");this._lexer=options.lexer||new _N3Lexer.default({lineMode:isLineMode,n3:isN3});this._explicitQuantifiers=!!options.explicitQuantifiers;}static _resetBlankNodePrefix(){blankNodePrefix=0;}_setBase(baseIRI){if(!baseIRI){this._base="";this._basePath="";}else {const fragmentPos=baseIRI.indexOf("#");if(fragmentPos>=0)baseIRI=baseIRI.substr(0,fragmentPos);this._base=baseIRI;this._basePath=baseIRI.indexOf("/")<0?baseIRI:baseIRI.replace(/[^\/?]*(?:\?.*)?$/,"");baseIRI=baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i);this._baseRoot=baseIRI[0];this._baseScheme=baseIRI[1];}}_saveContext(type,graph,subject,predicate,object){const n3Mode=this._n3Mode;this._contextStack.push({type:type,subject:subject,predicate:predicate,object:object,graph:graph,inverse:n3Mode?this._inversePredicate:false,blankPrefix:n3Mode?this._prefixes._:"",quantified:n3Mode?this._quantified:null});if(n3Mode){this._inversePredicate=false;this._prefixes._=this._graph?`${this._graph.value}.`:".";this._quantified=Object.create(this._quantified);}}_restoreContext(type,token){const context=this._contextStack.pop();if(!context||context.type!==type)return this._error(`Unexpected ${token.type}`,token);this._subject=context.subject;this._predicate=context.predicate;this._object=context.object;this._graph=context.graph;if(this._n3Mode){this._inversePredicate=context.inverse;this._prefixes._=context.blankPrefix;this._quantified=context.quantified;}}_readInTopContext(token){switch(token.type){case "eof":if(this._graph!==null)return this._error("Unclosed graph",token);delete this._prefixes._;return this._callback(null,null,this._prefixes);case "PREFIX":this._sparqlStyle=true;case "@prefix":return this._readPrefix;case "BASE":this._sparqlStyle=true;case "@base":return this._readBaseIRI;case "{":if(this._supportsNamedGraphs){this._graph="";this._subject=null;return this._readSubject}case "GRAPH":if(this._supportsNamedGraphs)return this._readNamedGraphLabel;default:return this._readSubject(token)}}_readEntity(token,quantifier){let value;switch(token.type){case "IRI":case "typeIRI":const iri=this._resolveIRI(token.value);if(iri===null)return this._error("Invalid IRI",token);value=this._namedNode(iri);break;case "type":case "prefixed":const prefix=this._prefixes[token.prefix];if(prefix===undefined)return this._error(`Undefined prefix "${token.prefix}:"`,token);value=this._namedNode(prefix+token.value);break;case "blank":value=this._blankNode(this._prefixes[token.prefix]+token.value);break;case "var":value=this._variable(token.value.substr(1));break;default:return this._error(`Expected entity but got ${token.type}`,token)}if(!quantifier&&this._n3Mode&&value.id in this._quantified)value=this._quantified[value.id];return value}_readSubject(token){this._predicate=null;switch(token.type){case "[":this._saveContext("blank",this._graph,this._subject=this._blankNode(),null,null);return this._readBlankNodeHead;case "(":this._saveContext("list",this._graph,this.RDF_NIL,null,null);this._subject=null;return this._readListItem;case "{":if(!this._n3Mode)return this._error("Unexpected graph",token);this._saveContext("formula",this._graph,this._graph=this._blankNode(),null,null);return this._readSubject;case "}":return this._readPunctuation(token);case "@forSome":if(!this._n3Mode)return this._error('Unexpected "@forSome"',token);this._subject=null;this._predicate=this.N3_FORSOME;this._quantifier=this._blankNode;return this._readQuantifierList;case "@forAll":if(!this._n3Mode)return this._error('Unexpected "@forAll"',token);this._subject=null;this._predicate=this.N3_FORALL;this._quantifier=this._variable;return this._readQuantifierList;case "literal":if(!this._n3Mode)return this._error("Unexpected literal",token);if(token.prefix.length===0){this._literalValue=token.value;return this._completeSubjectLiteral}else this._subject=this._literal(token.value,this._namedNode(token.prefix));break;case "<<":if(!this._supportsRDFStar)return this._error("Unexpected RDF* syntax",token);this._saveContext("<<",this._graph,null,null,null);this._graph=null;return this._readSubject;default:if((this._subject=this._readEntity(token))===undefined)return;if(this._n3Mode)return this._getPathReader(this._readPredicateOrNamedGraph)}return this._readPredicateOrNamedGraph}_readPredicate(token){const type=token.type;switch(type){case "inverse":this._inversePredicate=true;case "abbreviation":this._predicate=this.ABBREVIATIONS[token.value];break;case ".":case "]":case "}":if(this._predicate===null)return this._error(`Unexpected ${type}`,token);this._subject=null;return type==="]"?this._readBlankNodeTail(token):this._readPunctuation(token);case ";":return this._predicate!==null?this._readPredicate:this._error("Expected predicate but got ;",token);case "[":if(this._n3Mode){this._saveContext("blank",this._graph,this._subject,this._subject=this._blankNode(),null);return this._readBlankNodeHead}case "blank":if(!this._n3Mode)return this._error("Disallowed blank node as predicate",token);default:if((this._predicate=this._readEntity(token))===undefined)return}return this._readObject}_readObject(token){switch(token.type){case "literal":if(token.prefix.length===0){this._literalValue=token.value;return this._readDataTypeOrLang}else this._object=this._literal(token.value,this._namedNode(token.prefix));break;case "[":this._saveContext("blank",this._graph,this._subject,this._predicate,this._subject=this._blankNode());return this._readBlankNodeHead;case "(":this._saveContext("list",this._graph,this._subject,this._predicate,this.RDF_NIL);this._subject=null;return this._readListItem;case "{":if(!this._n3Mode)return this._error("Unexpected graph",token);this._saveContext("formula",this._graph,this._subject,this._predicate,this._graph=this._blankNode());return this._readSubject;case "<<":if(!this._supportsRDFStar)return this._error("Unexpected RDF* syntax",token);this._saveContext("<<",this._graph,this._subject,this._predicate,null);this._graph=null;return this._readSubject;default:if((this._object=this._readEntity(token))===undefined)return;if(this._n3Mode)return this._getPathReader(this._getContextEndReader())}return this._getContextEndReader()}_readPredicateOrNamedGraph(token){return token.type==="{"?this._readGraph(token):this._readPredicate(token)}_readGraph(token){if(token.type!=="{")return this._error(`Expected graph but got ${token.type}`,token);this._graph=this._subject,this._subject=null;return this._readSubject}_readBlankNodeHead(token){if(token.type==="]"){this._subject=null;return this._readBlankNodeTail(token)}else {this._predicate=null;return this._readPredicate(token)}}_readBlankNodeTail(token){if(token.type!=="]")return this._readBlankNodePunctuation(token);if(this._subject!==null)this._emit(this._subject,this._predicate,this._object,this._graph);const empty=this._predicate===null;this._restoreContext("blank",token);if(this._object!==null)return this._getContextEndReader();else if(this._predicate!==null)return this._readObject;else return empty?this._readPredicateOrNamedGraph:this._readPredicateAfterBlank}_readPredicateAfterBlank(token){switch(token.type){case ".":case "}":this._subject=null;return this._readPunctuation(token);default:return this._readPredicate(token)}}_readListItem(token){let item=null,list=null,next=this._readListItem;const previousList=this._subject,stack=this._contextStack,parent=stack[stack.length-1];switch(token.type){case "[":this._saveContext("blank",this._graph,list=this._blankNode(),this.RDF_FIRST,this._subject=item=this._blankNode());next=this._readBlankNodeHead;break;case "(":this._saveContext("list",this._graph,list=this._blankNode(),this.RDF_FIRST,this.RDF_NIL);this._subject=null;break;case ")":this._restoreContext("list",token);if(stack.length!==0&&stack[stack.length-1].type==="list")this._emit(this._subject,this._predicate,this._object,this._graph);if(this._predicate===null){next=this._readPredicate;if(this._subject===this.RDF_NIL)return next}else {next=this._getContextEndReader();if(this._object===this.RDF_NIL)return next}list=this.RDF_NIL;break;case "literal":if(token.prefix.length===0){this._literalValue=token.value;next=this._readListItemDataTypeOrLang;}else {item=this._literal(token.value,this._namedNode(token.prefix));next=this._getContextEndReader();}break;case "{":if(!this._n3Mode)return this._error("Unexpected graph",token);this._saveContext("formula",this._graph,this._subject,this._predicate,this._graph=this._blankNode());return this._readSubject;default:if((item=this._readEntity(token))===undefined)return}if(list===null)this._subject=list=this._blankNode();if(previousList===null){if(parent.predicate===null)parent.subject=list;else parent.object=list;}else {this._emit(previousList,this.RDF_REST,list,this._graph);}if(item!==null){if(this._n3Mode&&(token.type==="IRI"||token.type==="prefixed")){this._saveContext("item",this._graph,list,this.RDF_FIRST,item);this._subject=item,this._predicate=null;return this._getPathReader(this._readListItem)}this._emit(list,this.RDF_FIRST,item,this._graph);}return next}_readDataTypeOrLang(token){return this._completeObjectLiteral(token,false)}_readListItemDataTypeOrLang(token){return this._completeObjectLiteral(token,true)}_completeLiteral(token){let literal=this._literal(this._literalValue);switch(token.type){case "type":case "typeIRI":const datatype=this._readEntity(token);if(datatype===undefined)return;literal=this._literal(this._literalValue,datatype);token=null;break;case "langcode":literal=this._literal(this._literalValue,token.value);token=null;break}return {token:token,literal:literal}}_completeSubjectLiteral(token){this._subject=this._completeLiteral(token).literal;return this._readPredicateOrNamedGraph}_completeObjectLiteral(token,listItem){const completed=this._completeLiteral(token);if(!completed)return;this._object=completed.literal;if(listItem)this._emit(this._subject,this.RDF_FIRST,this._object,this._graph);if(completed.token===null)return this._getContextEndReader();else {this._readCallback=this._getContextEndReader();return this._readCallback(completed.token)}}_readFormulaTail(token){if(token.type!=="}")return this._readPunctuation(token);if(this._subject!==null)this._emit(this._subject,this._predicate,this._object,this._graph);this._restoreContext("formula",token);return this._object===null?this._readPredicate:this._getContextEndReader()}_readPunctuation(token){let next,graph=this._graph;const subject=this._subject,inversePredicate=this._inversePredicate;switch(token.type){case "}":if(this._graph===null)return this._error("Unexpected graph closing",token);if(this._n3Mode)return this._readFormulaTail(token);this._graph=null;case ".":this._subject=null;next=this._contextStack.length?this._readSubject:this._readInTopContext;if(inversePredicate)this._inversePredicate=false;break;case ";":next=this._readPredicate;break;case ",":next=this._readObject;break;case "{|":if(!this._supportsRDFStar)return this._error("Unexpected RDF* syntax",token);const predicate=this._predicate,object=this._object;this._subject=this._quad(subject,predicate,object,this.DEFAULTGRAPH);next=this._readPredicate;break;case "|}":if(this._subject.termType!=="Quad")return this._error("Unexpected asserted triple closing",token);this._subject=null;next=this._readPunctuation;break;default:if(this._supportsQuads&&this._graph===null&&(graph=this._readEntity(token))!==undefined){next=this._readQuadPunctuation;break}return this._error(`Expected punctuation to follow "${this._object.id}"`,token)}if(subject!==null){const predicate=this._predicate,object=this._object;if(!inversePredicate)this._emit(subject,predicate,object,graph);else this._emit(object,predicate,subject,graph);}return next}_readBlankNodePunctuation(token){let next;switch(token.type){case ";":next=this._readPredicate;break;case ",":next=this._readObject;break;default:return this._error(`Expected punctuation to follow "${this._object.id}"`,token)}this._emit(this._subject,this._predicate,this._object,this._graph);return next}_readQuadPunctuation(token){if(token.type!==".")return this._error("Expected dot to follow quad",token);return this._readInTopContext}_readPrefix(token){if(token.type!=="prefix")return this._error("Expected prefix to follow @prefix",token);this._prefix=token.value;return this._readPrefixIRI}_readPrefixIRI(token){if(token.type!=="IRI")return this._error(`Expected IRI to follow prefix "${this._prefix}:"`,token);const prefixNode=this._readEntity(token);this._prefixes[this._prefix]=prefixNode.value;this._prefixCallback(this._prefix,prefixNode);return this._readDeclarationPunctuation}_readBaseIRI(token){const iri=token.type==="IRI"&&this._resolveIRI(token.value);if(!iri)return this._error("Expected valid IRI to follow base declaration",token);this._setBase(iri);return this._readDeclarationPunctuation}_readNamedGraphLabel(token){switch(token.type){case "IRI":case "blank":case "prefixed":return this._readSubject(token),this._readGraph;case "[":return this._readNamedGraphBlankLabel;default:return this._error("Invalid graph label",token)}}_readNamedGraphBlankLabel(token){if(token.type!=="]")return this._error("Invalid graph label",token);this._subject=this._blankNode();return this._readGraph}_readDeclarationPunctuation(token){if(this._sparqlStyle){this._sparqlStyle=false;return this._readInTopContext(token)}if(token.type!==".")return this._error("Expected declaration to end with a dot",token);return this._readInTopContext}_readQuantifierList(token){let entity;switch(token.type){case "IRI":case "prefixed":if((entity=this._readEntity(token,true))!==undefined)break;default:return this._error(`Unexpected ${token.type}`,token)}if(!this._explicitQuantifiers)this._quantified[entity.id]=this._quantifier(this._blankNode().value);else {if(this._subject===null)this._emit(this._graph||this.DEFAULTGRAPH,this._predicate,this._subject=this._blankNode(),this.QUANTIFIERS_GRAPH);else this._emit(this._subject,this.RDF_REST,this._subject=this._blankNode(),this.QUANTIFIERS_GRAPH);this._emit(this._subject,this.RDF_FIRST,entity,this.QUANTIFIERS_GRAPH);}return this._readQuantifierPunctuation}_readQuantifierPunctuation(token){if(token.type===",")return this._readQuantifierList;else {if(this._explicitQuantifiers){this._emit(this._subject,this.RDF_REST,this.RDF_NIL,this.QUANTIFIERS_GRAPH);this._subject=null;}this._readCallback=this._getContextEndReader();return this._readCallback(token)}}_getPathReader(afterPath){this._afterPath=afterPath;return this._readPath}_readPath(token){switch(token.type){case "!":return this._readForwardPath;case "^":return this._readBackwardPath;default:const stack=this._contextStack,parent=stack.length&&stack[stack.length-1];if(parent&&parent.type==="item"){const item=this._subject;this._restoreContext("item",token);this._emit(this._subject,this.RDF_FIRST,item,this._graph);}return this._afterPath(token)}}_readForwardPath(token){let subject,predicate;const object=this._blankNode();if((predicate=this._readEntity(token))===undefined)return;if(this._predicate===null)subject=this._subject,this._subject=object;else subject=this._object,this._object=object;this._emit(subject,predicate,object,this._graph);return this._readPath}_readBackwardPath(token){const subject=this._blankNode();let predicate,object;if((predicate=this._readEntity(token))===undefined)return;if(this._predicate===null)object=this._subject,this._subject=subject;else object=this._object,this._object=subject;this._emit(subject,predicate,object,this._graph);return this._readPath}_readRDFStarTailOrGraph(token){if(token.type!==">>"){if(this._supportsQuads&&this._graph===null&&(this._graph=this._readEntity(token))!==undefined)return this._readRDFStarTail;return this._error(`Expected >> to follow "${this._object.id}"`,token)}return this._readRDFStarTail(token)}_readRDFStarTail(token){if(token.type!==">>")return this._error(`Expected >> but got ${token.type}`,token);const quad=this._quad(this._subject,this._predicate,this._object,this._graph||this.DEFAULTGRAPH);this._restoreContext("<<",token);if(this._subject===null){this._subject=quad;return this._readPredicate}else {this._object=quad;return this._getContextEndReader()}}_getContextEndReader(){const contextStack=this._contextStack;if(!contextStack.length)return this._readPunctuation;switch(contextStack[contextStack.length-1].type){case "blank":return this._readBlankNodeTail;case "list":return this._readListItem;case "formula":return this._readFormulaTail;case "<<":return this._readRDFStarTailOrGraph}}_emit(subject,predicate,object,graph){this._callback(null,this._quad(subject,predicate,object,graph||this.DEFAULTGRAPH));}_error(message,token){const err=new Error(`${message} on line ${token.line}.`);err.context={token:token,line:token.line,previousToken:this._lexer.previousToken};this._callback(err);this._callback=noop;}_resolveIRI(iri){return /^[a-z][a-z0-9+.-]*:/i.test(iri)?iri:this._resolveRelativeIRI(iri)}_resolveRelativeIRI(iri){if(!iri.length)return this._base;switch(iri[0]){case "#":return this._base+iri;case "?":return this._base.replace(/(?:\?.*)?$/,iri);case "/":return (iri[1]==="/"?this._baseScheme:this._baseRoot)+this._removeDotSegments(iri);default:return /^[^/:]*:/.test(iri)?null:this._removeDotSegments(this._basePath+iri)}}_removeDotSegments(iri){if(!/(^|\/)\.\.?($|[/#?])/.test(iri))return iri;const length=iri.length;let result="",i=-1,pathStart=-1,segmentStart=0,next="/";while(i<length){switch(next){case ":":if(pathStart<0){if(iri[++i]==="/"&&iri[++i]==="/")while((pathStart=i+1)<length&&iri[pathStart]!=="/")i=pathStart;}break;case "?":case "#":i=length;break;case "/":if(iri[i+1]==="."){next=iri[++i+1];switch(next){case "/":result+=iri.substring(segmentStart,i-1);segmentStart=i+1;break;case undefined:case "?":case "#":return result+iri.substring(segmentStart,i)+iri.substr(i+1);case ".":next=iri[++i+1];if(next===undefined||next==="/"||next==="?"||next==="#"){result+=iri.substring(segmentStart,i-2);if((segmentStart=result.lastIndexOf("/"))>=pathStart)result=result.substr(0,segmentStart);if(next!=="/")return `${result}/${iri.substr(i+1)}`;segmentStart=i+1;}}}}next=iri[++i];}return result+iri.substring(segmentStart)}parse(input,quadCallback,prefixCallback){this._readCallback=this._readInTopContext;this._sparqlStyle=false;this._prefixes=Object.create(null);this._prefixes._=this._blankNodePrefix?this._blankNodePrefix.substr(2):`b${blankNodePrefix++}_`;this._prefixCallback=prefixCallback||noop;this._inversePredicate=false;this._quantified=Object.create(null);if(!quadCallback){const quads=[];let error;this._callback=(e,t)=>{e?error=e:t&&quads.push(t);};this._lexer.tokenize(input).every(token=>{return this._readCallback=this._readCallback(token)});if(error)throw error;return quads}this._callback=quadCallback;this._lexer.tokenize(input,(error,token)=>{if(error!==null)this._callback(error),this._callback=noop;else if(this._readCallback)this._readCallback=this._readCallback(token);});}}exports.default=N3Parser;function noop(){}function initDataFactory(parser,factory){const namedNode=factory.namedNode;parser._namedNode=namedNode;parser._blankNode=factory.blankNode;parser._literal=factory.literal;parser._variable=factory.variable;parser._quad=factory.quad;parser.DEFAULTGRAPH=factory.defaultGraph();parser.RDF_FIRST=namedNode(_IRIs.default.rdf.first);parser.RDF_REST=namedNode(_IRIs.default.rdf.rest);parser.RDF_NIL=namedNode(_IRIs.default.rdf.nil);parser.N3_FORALL=namedNode(_IRIs.default.r.forAll);parser.N3_FORSOME=namedNode(_IRIs.default.r.forSome);parser.ABBREVIATIONS={a:namedNode(_IRIs.default.rdf.type),"=":namedNode(_IRIs.default.owl.sameAs),">":namedNode(_IRIs.default.log.implies)};parser.QUANTIFIERS_GRAPH=namedNode("urn:n3:quantifiers");}initDataFactory(N3Parser.prototype,_N3DataFactory.default);},{"./IRIs":1,"./N3DataFactory":2,"./N3Lexer":3}],5:[function(require,module,exports){Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _readableStream=require("readable-stream");var _N3DataFactory=_interopRequireWildcard(require("./N3DataFactory"));var _IRIs=_interopRequireDefault(require("./IRIs"));var _N3Util=require("./N3Util");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return (_getRequireWildcardCache=function(e){return e?t:r})(e)}function _interopRequireWildcard(e,r){if(e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return {default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n}class N3Store{constructor(quads,options){this._size=0;this._graphs=Object.create(null);this._id=0;this._ids=Object.create(null);this._entities=Object.create(null);this._blankNodeIndex=0;if(!options&&quads&&!quads[0])options=quads,quads=null;options=options||{};this._factory=options.factory||_N3DataFactory.default;if(quads)this.addQuads(quads);}_termFromId(id,factory){if(id[0]==="."){const entities=this._entities;const terms=id.split(".");const q=this._factory.quad(this._termFromId(entities[terms[1]]),this._termFromId(entities[terms[2]]),this._termFromId(entities[terms[3]]),terms[4]&&this._termFromId(entities[terms[4]]));return q}return (0, _N3DataFactory.termFromId)(id,factory)}_termToNumericId(term){if(term.termType==="Quad"){const s=this._termToNumericId(term.subject),p=this._termToNumericId(term.predicate),o=this._termToNumericId(term.object);let g;return s&&p&&o&&((0, _N3Util.isDefaultGraph)(term.graph)||(g=this._termToNumericId(term.graph)))&&this._ids[g?`.${s}.${p}.${o}.${g}`:`.${s}.${p}.${o}`]}return this._ids[(0, _N3DataFactory.termToId)(term)]}_termToNewNumericId(term){const str=term&&term.termType==="Quad"?`.${this._termToNewNumericId(term.subject)}.${this._termToNewNumericId(term.predicate)}.${this._termToNewNumericId(term.object)}${(0, _N3Util.isDefaultGraph)(term.graph)?"":`.${this._termToNewNumericId(term.graph)}`}`:(0, _N3DataFactory.termToId)(term);return this._ids[str]||(this._ids[this._entities[++this._id]=str]=this._id)}get size(){let size=this._size;if(size!==null)return size;size=0;const graphs=this._graphs;let subjects,subject;for(const graphKey in graphs)for(const subjectKey in subjects=graphs[graphKey].subjects)for(const predicateKey in subject=subjects[subjectKey])size+=Object.keys(subject[predicateKey]).length;return this._size=size}_addToIndex(index0,key0,key1,key2){const index1=index0[key0]||(index0[key0]={});const index2=index1[key1]||(index1[key1]={});const existed=key2 in index2;if(!existed)index2[key2]=null;return !existed}_removeFromIndex(index0,key0,key1,key2){const index1=index0[key0],index2=index1[key1];delete index2[key2];for(const key in index2)return;delete index1[key1];for(const key in index1)return;delete index0[key0];}*_findInIndex(index0,key0,key1,key2,name0,name1,name2,graphId){let tmp,index1,index2;const entityKeys=this._entities;const graph=this._termFromId(graphId,this._factory);const parts={subject:null,predicate:null,object:null};if(key0)(tmp=index0,index0={})[key0]=tmp[key0];for(const value0 in index0){if(index1=index0[value0]){parts[name0]=this._termFromId(entityKeys[value0],this._factory);if(key1)(tmp=index1,index1={})[key1]=tmp[key1];for(const value1 in index1){if(index2=index1[value1]){parts[name1]=this._termFromId(entityKeys[value1],this._factory);const values=key2?key2 in index2?[key2]:[]:Object.keys(index2);for(let l=0;l<values.length;l++){parts[name2]=this._termFromId(entityKeys[values[l]],this._factory);yield this._factory.quad(parts.subject,parts.predicate,parts.object,graph);}}}}}}_loop(index0,callback){for(const key0 in index0)callback(key0);}_loopByKey0(index0,key0,callback){let index1,key1;if(index1=index0[key0]){for(key1 in index1)callback(key1);}}_loopByKey1(index0,key1,callback){let key0,index1;for(key0 in index0){index1=index0[key0];if(index1[key1])callback(key0);}}_loopBy2Keys(index0,key0,key1,callback){let index1,index2,key2;if((index1=index0[key0])&&(index2=index1[key1])){for(key2 in index2)callback(key2);}}_countInIndex(index0,key0,key1,key2){let count=0,tmp,index1,index2;if(key0)(tmp=index0,index0={})[key0]=tmp[key0];for(const value0 in index0){if(index1=index0[value0]){if(key1)(tmp=index1,index1={})[key1]=tmp[key1];for(const value1 in index1){if(index2=index1[value1]){if(key2)key2 in index2&&count++;else count+=Object.keys(index2).length;}}}}return count}_getGraphs(graph){if(!isString(graph))return this._graphs;const graphs={};graphs[graph]=this._graphs[graph];return graphs}_uniqueEntities(callback){const uniqueIds=Object.create(null);return id=>{if(!(id in uniqueIds)){uniqueIds[id]=true;callback(this._termFromId(this._entities[id],this._factory));}}}add(quad){this.addQuad(quad);return this}addQuad(subject,predicate,object,graph){if(!predicate)graph=subject.graph,object=subject.object,predicate=subject.predicate,subject=subject.subject;graph=(0, _N3DataFactory.termToId)(graph);let graphItem=this._graphs[graph];if(!graphItem){graphItem=this._graphs[graph]={subjects:{},predicates:{},objects:{}};Object.freeze(graphItem);}subject=this._termToNewNumericId(subject);predicate=this._termToNewNumericId(predicate);object=this._termToNewNumericId(object);const changed=this._addToIndex(graphItem.subjects,subject,predicate,object);this._addToIndex(graphItem.predicates,predicate,object,subject);this._addToIndex(graphItem.objects,object,subject,predicate);this._size=null;return changed}addQuads(quads){for(let i=0;i<quads.length;i++)this.addQuad(quads[i]);}delete(quad){this.removeQuad(quad);return this}has(subjectOrQuad,predicate,object,graph){if(subjectOrQuad&&subjectOrQuad.subject)({subject:subjectOrQuad,predicate,object,graph}=subjectOrQuad);return !this.readQuads(subjectOrQuad,predicate,object,graph).next().done}importStream(stream){stream.on("data",quad=>{this.addQuad(quad);});return stream}removeQuad(subject,predicate,object,graph){if(!predicate)graph=subject.graph,object=subject.object,predicate=subject.predicate,subject=subject.subject;graph=(0, _N3DataFactory.termToId)(graph);const graphs=this._graphs;let graphItem,subjects,predicates;if(!(subject=subject&&this._termToNumericId(subject))||!(predicate=predicate&&this._termToNumericId(predicate))||!(object=object&&this._termToNumericId(object))||!(graphItem=graphs[graph])||!(subjects=graphItem.subjects[subject])||!(predicates=subjects[predicate])||!(object in predicates))return false;this._removeFromIndex(graphItem.subjects,subject,predicate,object);this._removeFromIndex(graphItem.predicates,predicate,object,subject);this._removeFromIndex(graphItem.objects,object,subject,predicate);if(this._size!==null)this._size--;for(subject in graphItem.subjects)return true;delete graphs[graph];return true}removeQuads(quads){for(let i=0;i<quads.length;i++)this.removeQuad(quads[i]);}remove(stream){stream.on("data",quad=>{this.removeQuad(quad);});return stream}removeMatches(subject,predicate,object,graph){const stream=new _readableStream.Readable({objectMode:true});stream._read=()=>{for(const quad of this.readQuads(subject,predicate,object,graph))stream.push(quad);stream.push(null);};return this.remove(stream)}deleteGraph(graph){return this.removeMatches(null,null,null,graph)}getQuads(subject,predicate,object,graph){return [...this.readQuads(subject,predicate,object,graph)]}*readQuads(subject,predicate,object,graph){graph=graph&&(0, _N3DataFactory.termToId)(graph);const graphs=this._getGraphs(graph);let content,subjectId,predicateId,objectId;if(subject&&!(subjectId=this._termToNumericId(subject))||predicate&&!(predicateId=this._termToNumericId(predicate))||object&&!(objectId=this._termToNumericId(object)))return;for(const graphId in graphs){if(content=graphs[graphId]){if(subjectId){if(objectId)yield*this._findInIndex(content.objects,objectId,subjectId,predicateId,"object","subject","predicate",graphId);else yield*this._findInIndex(content.subjects,subjectId,predicateId,null,"subject","predicate","object",graphId);}else if(predicateId)yield*this._findInIndex(content.predicates,predicateId,objectId,null,"predicate","object","subject",graphId);else if(objectId)yield*this._findInIndex(content.objects,objectId,null,null,"object","subject","predicate",graphId);else yield*this._findInIndex(content.subjects,null,null,null,"subject","predicate","object",graphId);}}}match(subject,predicate,object,graph){return new DatasetCoreAndReadableStream(this,subject,predicate,object,graph)}countQuads(subject,predicate,object,graph){graph=graph&&(0, _N3DataFactory.termToId)(graph);const graphs=this._getGraphs(graph);let count=0,content,subjectId,predicateId,objectId;if(subject&&!(subjectId=this._termToNumericId(subject))||predicate&&!(predicateId=this._termToNumericId(predicate))||object&&!(objectId=this._termToNumericId(object)))return 0;for(const graphId in graphs){if(content=graphs[graphId]){if(subject){if(object)count+=this._countInIndex(content.objects,objectId,subjectId,predicateId);else count+=this._countInIndex(content.subjects,subjectId,predicateId,objectId);}else if(predicate){count+=this._countInIndex(content.predicates,predicateId,objectId,subjectId);}else {count+=this._countInIndex(content.objects,objectId,subjectId,predicateId);}}}return count}forEach(callback,subject,predicate,object,graph){this.some(quad=>{callback(quad);return false},subject,predicate,object,graph);}every(callback,subject,predicate,object,graph){let some=false;const every=!this.some(quad=>{some=true;return !callback(quad)},subject,predicate,object,graph);return some&&every}some(callback,subject,predicate,object,graph){for(const quad of this.readQuads(subject,predicate,object,graph))if(callback(quad))return true;return false}getSubjects(predicate,object,graph){const results=[];this.forSubjects(s=>{results.push(s);},predicate,object,graph);return results}forSubjects(callback,predicate,object,graph){graph=graph&&(0, _N3DataFactory.termToId)(graph);const graphs=this._getGraphs(graph);let content,predicateId,objectId;callback=this._uniqueEntities(callback);if(predicate&&!(predicateId=this._termToNumericId(predicate))||object&&!(objectId=this._termToNumericId(object)))return;for(graph in graphs){if(content=graphs[graph]){if(predicateId){if(objectId)this._loopBy2Keys(content.predicates,predicateId,objectId,callback);else this._loopByKey1(content.subjects,predicateId,callback);}else if(objectId)this._loopByKey0(content.objects,objectId,callback);else this._loop(content.subjects,callback);}}}getPredicates(subject,object,graph){const results=[];this.forPredicates(p=>{results.push(p);},subject,object,graph);return results}forPredicates(callback,subject,object,graph){graph=graph&&(0, _N3DataFactory.termToId)(graph);const graphs=this._getGraphs(graph);let content,subjectId,objectId;callback=this._uniqueEntities(callback);if(subject&&!(subjectId=this._termToNumericId(subject))||object&&!(objectId=this._termToNumericId(object)))return;for(graph in graphs){if(content=graphs[graph]){if(subjectId){if(objectId)this._loopBy2Keys(content.objects,objectId,subjectId,callback);else this._loopByKey0(content.subjects,subjectId,callback);}else if(objectId)this._loopByKey1(content.predicates,objectId,callback);else this._loop(content.predicates,callback);}}}getObjects(subject,predicate,graph){const results=[];this.forObjects(o=>{results.push(o);},subject,predicate,graph);return results}forObjects(callback,subject,predicate,graph){graph=graph&&(0, _N3DataFactory.termToId)(graph);const graphs=this._getGraphs(graph);let content,subjectId,predicateId;callback=this._uniqueEntities(callback);if(subject&&!(subjectId=this._termToNumericId(subject))||predicate&&!(predicateId=this._termToNumericId(predicate)))return;for(graph in graphs){if(content=graphs[graph]){if(subjectId){if(predicateId)this._loopBy2Keys(content.subjects,subjectId,predicateId,callback);else this._loopByKey1(content.objects,subjectId,callback);}else if(predicateId)this._loopByKey0(content.predicates,predicateId,callback);else this._loop(content.objects,callback);}}}getGraphs(subject,predicate,object){const results=[];this.forGraphs(g=>{results.push(g);},subject,predicate,object);return results}forGraphs(callback,subject,predicate,object){for(const graph in this._graphs){this.some(quad=>{callback(quad.graph);return true},subject,predicate,object,graph);}}createBlankNode(suggestedName){let name,index;if(suggestedName){name=suggestedName=`_:${suggestedName}`,index=1;while(this._ids[name])name=suggestedName+index++;}else {do{name=`_:b${this._blankNodeIndex++}`;}while(this._ids[name])}this._ids[name]=++this._id;this._entities[this._id]=name;return this._factory.blankNode(name.substr(2))}extractLists({remove=false,ignoreErrors=false}={}){const lists={};const onError=ignoreErrors?()=>true:(node,message)=>{throw new Error(`${node.value} ${message}`)};const tails=this.getQuads(null,_IRIs.default.rdf.rest,_IRIs.default.rdf.nil,null);const toRemove=remove?[...tails]:[];tails.forEach(tailQuad=>{const items=[];let malformed=false;let head;let headPos;const graph=tailQuad.graph;let current=tailQuad.subject;while(current&&!malformed){const objectQuads=this.getQuads(null,null,current,null);const subjectQuads=this.getQuads(current,null,null,null);let quad,first=null,rest=null,parent=null;for(let i=0;i<subjectQuads.length&&!malformed;i++){quad=subjectQuads[i];if(!quad.graph.equals(graph))malformed=onError(current,"not confined to single graph");else if(head)malformed=onError(current,"has non-list arcs out");else if(quad.predicate.value===_IRIs.default.rdf.first){if(first)malformed=onError(current,"has multiple rdf:first arcs");else toRemove.push(first=quad);}else if(quad.predicate.value===_IRIs.default.rdf.rest){if(rest)malformed=onError(current,"has multiple rdf:rest arcs");else toRemove.push(rest=quad);}else if(objectQuads.length)malformed=onError(current,"can't be subject and object");else {head=quad;headPos="subject";}}for(let i=0;i<objectQuads.length&&!malformed;++i){quad=objectQuads[i];if(head)malformed=onError(current,"can't have coreferences");else if(quad.predicate.value===_IRIs.default.rdf.rest){if(parent)malformed=onError(current,"has incoming rdf:rest arcs");else parent=quad;}else {head=quad;headPos="object";}}if(!first)malformed=onError(current,"has no list head");else items.unshift(first.object);current=parent&&parent.subject;}if(malformed)remove=false;else if(head)lists[head[headPos].value]=items;});if(remove)this.removeQuads(toRemove);return lists}*[Symbol.iterator](){yield*this.readQuads();}}exports.default=N3Store;function isString(s){return typeof s==="string"||s instanceof String}class DatasetCoreAndReadableStream extends _readableStream.Readable{constructor(n3Store,subject,predicate,object,graph){super({objectMode:true});Object.assign(this,{n3Store:n3Store,subject:subject,predicate:predicate,object:object,graph:graph});}get filtered(){if(!this._filtered){const{n3Store,graph,object,predicate,subject}=this;const newStore=this._filtered=new N3Store({factory:n3Store._factory});for(const quad of n3Store.readQuads(subject,predicate,object,graph))newStore.addQuad(quad);}return this._filtered}get size(){return this.filtered.size}_read(){for(const quad of this)this.push(quad);this.push(null);}add(quad){return this.filtered.add(quad)}delete(quad){return this.filtered.delete(quad)}has(quad){return this.filtered.has(quad)}match(subject,predicate,object,graph){return new DatasetCoreAndReadableStream(this.filtered,subject,predicate,object,graph)}*[Symbol.iterator](){yield*this._filtered||this.n3Store.readQuads(this.subject,this.predicate,this.object,this.graph);}}},{"./IRIs":1,"./N3DataFactory":2,"./N3Util":8,"readable-stream":38}],6:[function(require,module,exports){Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _readableStream=require("readable-stream");var _N3Parser=_interopRequireDefault(require("./N3Parser"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}class N3StreamParser extends _readableStream.Transform{constructor(options){super({decodeStrings:true});this._readableState.objectMode=true;const parser=new _N3Parser.default(options);let onData,onEnd;parser.parse({on:(event,callback)=>{switch(event){case "data":onData=callback;break;case "end":onEnd=callback;break}}},(error,quad)=>{error&&this.emit("error",error)||quad&&this.push(quad);},(prefix,uri)=>{this.emit("prefix",prefix,uri);});this._transform=(chunk,encoding,done)=>{onData(chunk);done();};this._flush=done=>{onEnd();done();};}importStream(stream){stream.on("data",chunk=>{this.write(chunk);});stream.on("end",()=>{this.end();});stream.on("error",error=>{this.emit("error",error);});return this}}exports.default=N3StreamParser;},{"./N3Parser":4,"readable-stream":38}],7:[function(require,module,exports){Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _readableStream=require("readable-stream");var _N3Writer=_interopRequireDefault(require("./N3Writer"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}class N3StreamWriter extends _readableStream.Transform{constructor(options){super({encoding:"utf8",writableObjectMode:true});const writer=this._writer=new _N3Writer.default({write:(quad,encoding,callback)=>{this.push(quad);callback&&callback();},end:callback=>{this.push(null);callback&&callback();}},options);this._transform=(quad,encoding,done)=>{writer.addQuad(quad,done);};this._flush=done=>{writer.end(done);};}importStream(stream){stream.on("data",quad=>{this.write(quad);});stream.on("end",()=>{this.end();});stream.on("error",error=>{this.emit("error",error);});stream.on("prefix",(prefix,iri)=>{this._writer.addPrefix(prefix,iri);});return this}}exports.default=N3StreamWriter;},{"./N3Writer":9,"readable-stream":38}],8:[function(require,module,exports){Object.defineProperty(exports,"__esModule",{value:true});exports.inDefaultGraph=inDefaultGraph;exports.isBlankNode=isBlankNode;exports.isDefaultGraph=isDefaultGraph;exports.isLiteral=isLiteral;exports.isNamedNode=isNamedNode;exports.isVariable=isVariable;exports.prefix=prefix;exports.prefixes=prefixes;var _N3DataFactory=_interopRequireDefault(require("./N3DataFactory"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function isNamedNode(term){return !!term&&term.termType==="NamedNode"}function isBlankNode(term){return !!term&&term.termType==="BlankNode"}function isLiteral(term){return !!term&&term.termType==="Literal"}function isVariable(term){return !!term&&term.termType==="Variable"}function isDefaultGraph(term){return !!term&&term.termType==="DefaultGraph"}function inDefaultGraph(quad){return isDefaultGraph(quad.graph)}function prefix(iri,factory){return prefixes({"":iri.value||iri},factory)("")}function prefixes(defaultPrefixes,factory){const prefixes=Object.create(null);for(const prefix in defaultPrefixes)processPrefix(prefix,defaultPrefixes[prefix]);factory=factory||_N3DataFactory.default;function processPrefix(prefix,iri){if(typeof iri==="string"){const cache=Object.create(null);prefixes[prefix]=local=>{return cache[local]||(cache[local]=factory.namedNode(iri+local))};}else if(!(prefix in prefixes)){throw new Error(`Unknown prefix: ${prefix}`)}return prefixes[prefix]}return processPrefix}},{"./N3DataFactory":2}],9:[function(require,module,exports){Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _IRIs=_interopRequireDefault(require("./IRIs"));var _N3DataFactory=_interopRequireWildcard(require("./N3DataFactory"));var _N3Util=require("./N3Util");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return (_getRequireWildcardCache=function(e){return e?t:r})(e)}function _interopRequireWildcard(e,r){if(e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return {default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const DEFAULTGRAPH=_N3DataFactory.default.defaultGraph();const{rdf,xsd}=_IRIs.default;const escape=/["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,escapeAll=/["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,escapedCharacters={"\\":"\\\\",'"':'\\"',"\t":"\\t","\n":"\\n","\r":"\\r","\b":"\\b","\f":"\\f"};class SerializedTerm extends _N3DataFactory.Term{equals(other){return other===this}}class N3Writer{constructor(outputStream,options){this._prefixRegex=/$0^/;if(outputStream&&typeof outputStream.write!=="function")options=outputStream,outputStream=null;options=options||{};this._lists=options.lists;if(!outputStream){let output="";this._outputStream={write(chunk,encoding,done){output+=chunk;done&&done();},end:done=>{done&&done(null,output);}};this._endStream=true;}else {this._outputStream=outputStream;this._endStream=options.end===undefined?true:!!options.end;}this._subject=null;if(!/triple|quad/i.test(options.format)){this._lineMode=false;this._graph=DEFAULTGRAPH;this._prefixIRIs=Object.create(null);options.prefixes&&this.addPrefixes(options.prefixes);if(options.baseIRI){this._baseMatcher=new RegExp(`^${escapeRegex(options.baseIRI)}${options.baseIRI.endsWith("/")?"":"[#?]"}`);this._baseLength=options.baseIRI.length;}}else {this._lineMode=true;this._writeQuad=this._writeQuadLine;}}get _inDefaultGraph(){return DEFAULTGRAPH.equals(this._graph)}_write(string,callback){this._outputStream.write(string,"utf8",callback);}_writeQuad(subject,predicate,object,graph,done){try{if(!graph.equals(this._graph)){this._write((this._subject===null?"":this._inDefaultGraph?".\n":"\n}\n")+(DEFAULTGRAPH.equals(graph)?"":`${this._encodeIriOrBlank(graph)} {\n`));this._graph=graph;this._subject=null;}if(subject.equals(this._subject)){if(predicate.equals(this._predicate))this._write(`, ${this._encodeObject(object)}`,done);else this._write(`;\n    ${this._encodePredicate(this._predicate=predicate)} ${this._encodeObject(object)}`,done);}else this._write(`${(this._subject===null?"":".\n")+this._encodeSubject(this._subject=subject)} ${this._encodePredicate(this._predicate=predicate)} ${this._encodeObject(object)}`,done);}catch(error){done&&done(error);}}_writeQuadLine(subject,predicate,object,graph,done){delete this._prefixMatch;this._write(this.quadToString(subject,predicate,object,graph),done);}quadToString(subject,predicate,object,graph){return `${this._encodeSubject(subject)} ${this._encodeIriOrBlank(predicate)} ${this._encodeObject(object)}${graph&&graph.value?` ${this._encodeIriOrBlank(graph)} .\n`:" .\n"}`}quadsToString(quads){return quads.map(t=>{return this.quadToString(t.subject,t.predicate,t.object,t.graph)}).join("")}_encodeSubject(entity){return entity.termType==="Quad"?this._encodeQuad(entity):this._encodeIriOrBlank(entity)}_encodeIriOrBlank(entity){if(entity.termType!=="NamedNode"){if(this._lists&&entity.value in this._lists)entity=this.list(this._lists[entity.value]);return "id"in entity?entity.id:`_:${entity.value}`}let iri=entity.value;if(this._baseMatcher&&this._baseMatcher.test(iri))iri=iri.substr(this._baseLength);if(escape.test(iri))iri=iri.replace(escapeAll,characterReplacer);const prefixMatch=this._prefixRegex.exec(iri);return !prefixMatch?`<${iri}>`:!prefixMatch[1]?iri:this._prefixIRIs[prefixMatch[1]]+prefixMatch[2]}_encodeLiteral(literal){let value=literal.value;if(escape.test(value))value=value.replace(escapeAll,characterReplacer);if(literal.language)return `"${value}"@${literal.language}`;if(this._lineMode){if(literal.datatype.value===xsd.string)return `"${value}"`}else {switch(literal.datatype.value){case xsd.string:return `"${value}"`;case xsd.boolean:if(value==="true"||value==="false")return value;break;case xsd.integer:if(/^[+-]?\d+$/.test(value))return value;break;case xsd.decimal:if(/^[+-]?\d*\.\d+$/.test(value))return value;break;case xsd.double:if(/^[+-]?(?:\d+\.\d*|\.?\d+)[eE][+-]?\d+$/.test(value))return value;break}}return `"${value}"^^${this._encodeIriOrBlank(literal.datatype)}`}_encodePredicate(predicate){return predicate.value===rdf.type?"a":this._encodeIriOrBlank(predicate)}_encodeObject(object){switch(object.termType){case "Quad":return this._encodeQuad(object);case "Literal":return this._encodeLiteral(object);default:return this._encodeIriOrBlank(object)}}_encodeQuad({subject,predicate,object,graph}){return `<<${this._encodeSubject(subject)} ${this._encodePredicate(predicate)} ${this._encodeObject(object)}${(0, _N3Util.isDefaultGraph)(graph)?"":` ${this._encodeIriOrBlank(graph)}`}>>`}_blockedWrite(){throw new Error("Cannot write because the writer has been closed.")}addQuad(subject,predicate,object,graph,done){if(object===undefined)this._writeQuad(subject.subject,subject.predicate,subject.object,subject.graph,predicate);else if(typeof graph==="function")this._writeQuad(subject,predicate,object,DEFAULTGRAPH,graph);else this._writeQuad(subject,predicate,object,graph||DEFAULTGRAPH,done);}addQuads(quads){for(let i=0;i<quads.length;i++)this.addQuad(quads[i]);}addPrefix(prefix,iri,done){const prefixes={};prefixes[prefix]=iri;this.addPrefixes(prefixes,done);}addPrefixes(prefixes,done){if(!this._prefixIRIs)return done&&done();let hasPrefixes=false;for(let prefix in prefixes){let iri=prefixes[prefix];if(typeof iri!=="string")iri=iri.value;hasPrefixes=true;if(this._subject!==null){this._write(this._inDefaultGraph?".\n":"\n}\n");this._subject=null,this._graph="";}this._prefixIRIs[iri]=prefix+=":";this._write(`@prefix ${prefix} <${iri}>.\n`);}if(hasPrefixes){let IRIlist="",prefixList="";for(const prefixIRI in this._prefixIRIs){IRIlist+=IRIlist?`|${prefixIRI}`:prefixIRI;prefixList+=(prefixList?"|":"")+this._prefixIRIs[prefixIRI];}IRIlist=escapeRegex(IRIlist);this._prefixRegex=new RegExp(`^(?:${prefixList})[^\/]*$|`+`^(${IRIlist})([_a-zA-Z][\\-_a-zA-Z0-9]*)$`);}this._write(hasPrefixes?"\n":"",done);}blank(predicate,object){let children=predicate,child,length;if(predicate===undefined)children=[];else if(predicate.termType)children=[{predicate:predicate,object:object}];else if(!("length"in predicate))children=[predicate];switch(length=children.length){case 0:return new SerializedTerm("[]");case 1:child=children[0];if(!(child.object instanceof SerializedTerm))return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${this._encodeObject(child.object)} ]`);default:let contents="[";for(let i=0;i<length;i++){child=children[i];if(child.predicate.equals(predicate))contents+=`, ${this._encodeObject(child.object)}`;else {contents+=`${(i?";\n  ":"\n  ")+this._encodePredicate(child.predicate)} ${this._encodeObject(child.object)}`;predicate=child.predicate;}}return new SerializedTerm(`${contents}\n]`)}}list(elements){const length=elements&&elements.length||0,contents=new Array(length);for(let i=0;i<length;i++)contents[i]=this._encodeObject(elements[i]);return new SerializedTerm(`(${contents.join(" ")})`)}end(done){if(this._subject!==null){this._write(this._inDefaultGraph?".\n":"\n}\n");this._subject=null;}this._write=this._blockedWrite;let singleDone=done&&((error,result)=>{singleDone=null,done(error,result);});if(this._endStream){try{return this._outputStream.end(singleDone)}catch(error){}}singleDone&&singleDone();}}exports.default=N3Writer;function characterReplacer(character){let result=escapedCharacters[character];if(result===undefined){if(character.length===1){result=character.charCodeAt(0).toString(16);result="\\u0000".substr(0,6-result.length)+result;}else {result=((character.charCodeAt(0)-55296)*1024+character.charCodeAt(1)+9216).toString(16);result="\\U00000000".substr(0,10-result.length)+result;}}return result}function escapeRegex(regex){return regex.replace(/[\]\/\(\)\*\+\?\.\\\$]/g,"\\$&")}},{"./IRIs":1,"./N3DataFactory":2,"./N3Util":8}],10:[function(require,module,exports){Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"BlankNode",{enumerable:true,get:function(){return _N3DataFactory.BlankNode}});Object.defineProperty(exports,"DataFactory",{enumerable:true,get:function(){return _N3DataFactory.default}});Object.defineProperty(exports,"DefaultGraph",{enumerable:true,get:function(){return _N3DataFactory.DefaultGraph}});Object.defineProperty(exports,"Lexer",{enumerable:true,get:function(){return _N3Lexer.default}});Object.defineProperty(exports,"Literal",{enumerable:true,get:function(){return _N3DataFactory.Literal}});Object.defineProperty(exports,"NamedNode",{enumerable:true,get:function(){return _N3DataFactory.NamedNode}});Object.defineProperty(exports,"Parser",{enumerable:true,get:function(){return _N3Parser.default}});Object.defineProperty(exports,"Quad",{enumerable:true,get:function(){return _N3DataFactory.Quad}});Object.defineProperty(exports,"Store",{enumerable:true,get:function(){return _N3Store.default}});Object.defineProperty(exports,"StreamParser",{enumerable:true,get:function(){return _N3StreamParser.default}});Object.defineProperty(exports,"StreamWriter",{enumerable:true,get:function(){return _N3StreamWriter.default}});Object.defineProperty(exports,"Term",{enumerable:true,get:function(){return _N3DataFactory.Term}});Object.defineProperty(exports,"Triple",{enumerable:true,get:function(){return _N3DataFactory.Triple}});exports.Util=void 0;Object.defineProperty(exports,"Variable",{enumerable:true,get:function(){return _N3DataFactory.Variable}});Object.defineProperty(exports,"Writer",{enumerable:true,get:function(){return _N3Writer.default}});exports.default=void 0;Object.defineProperty(exports,"termFromId",{enumerable:true,get:function(){return _N3DataFactory.termFromId}});Object.defineProperty(exports,"termToId",{enumerable:true,get:function(){return _N3DataFactory.termToId}});var _N3Lexer=_interopRequireDefault(require("./N3Lexer"));var _N3Parser=_interopRequireDefault(require("./N3Parser"));var _N3Writer=_interopRequireDefault(require("./N3Writer"));var _N3Store=_interopRequireDefault(require("./N3Store"));var _N3StreamParser=_interopRequireDefault(require("./N3StreamParser"));var _N3StreamWriter=_interopRequireDefault(require("./N3StreamWriter"));var Util=_interopRequireWildcard(require("./N3Util"));exports.Util=Util;var _N3DataFactory=_interopRequireWildcard(require("./N3DataFactory"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return (_getRequireWildcardCache=function(e){return e?t:r})(e)}function _interopRequireWildcard(e,r){if(e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return {default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.default={Lexer:_N3Lexer.default,Parser:_N3Parser.default,Writer:_N3Writer.default,Store:_N3Store.default,StreamParser:_N3StreamParser.default,StreamWriter:_N3StreamWriter.default,Util:Util,DataFactory:_N3DataFactory.default,Term:_N3DataFactory.Term,NamedNode:_N3DataFactory.NamedNode,Literal:_N3DataFactory.Literal,BlankNode:_N3DataFactory.BlankNode,Variable:_N3DataFactory.Variable,DefaultGraph:_N3DataFactory.DefaultGraph,Quad:_N3DataFactory.Quad,Triple:_N3DataFactory.Triple,termFromId:_N3DataFactory.termFromId,termToId:_N3DataFactory.termToId};},{"./N3DataFactory":2,"./N3Lexer":3,"./N3Parser":4,"./N3Store":5,"./N3StreamParser":6,"./N3StreamWriter":7,"./N3Util":8,"./N3Writer":9}],11:[function(require,module,exports){const{AbortController,AbortSignal}=typeof self!=="undefined"?self:typeof window!=="undefined"?window:undefined;module.exports=AbortController;module.exports.AbortSignal=AbortSignal;module.exports.default=AbortController;},{}],12:[function(require,module,exports){exports.byteLength=byteLength;exports.toByteArray=toByteArray;exports.fromByteArray=fromByteArray;var lookup=[];var revLookup=[];var Arr=typeof Uint8Array!=="undefined"?Uint8Array:Array;var code="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(var i=0,len=code.length;i<len;++i){lookup[i]=code[i];revLookup[code.charCodeAt(i)]=i;}revLookup["-".charCodeAt(0)]=62;revLookup["_".charCodeAt(0)]=63;function getLens(b64){var len=b64.length;if(len%4>0){throw new Error("Invalid string. Length must be a multiple of 4")}var validLen=b64.indexOf("=");if(validLen===-1)validLen=len;var placeHoldersLen=validLen===len?0:4-validLen%4;return [validLen,placeHoldersLen]}function byteLength(b64){var lens=getLens(b64);var validLen=lens[0];var placeHoldersLen=lens[1];return (validLen+placeHoldersLen)*3/4-placeHoldersLen}function _byteLength(b64,validLen,placeHoldersLen){return (validLen+placeHoldersLen)*3/4-placeHoldersLen}function toByteArray(b64){var tmp;var lens=getLens(b64);var validLen=lens[0];var placeHoldersLen=lens[1];var arr=new Arr(_byteLength(b64,validLen,placeHoldersLen));var curByte=0;var len=placeHoldersLen>0?validLen-4:validLen;var i;for(i=0;i<len;i+=4){tmp=revLookup[b64.charCodeAt(i)]<<18|revLookup[b64.charCodeAt(i+1)]<<12|revLookup[b64.charCodeAt(i+2)]<<6|revLookup[b64.charCodeAt(i+3)];arr[curByte++]=tmp>>16&255;arr[curByte++]=tmp>>8&255;arr[curByte++]=tmp&255;}if(placeHoldersLen===2){tmp=revLookup[b64.charCodeAt(i)]<<2|revLookup[b64.charCodeAt(i+1)]>>4;arr[curByte++]=tmp&255;}if(placeHoldersLen===1){tmp=revLookup[b64.charCodeAt(i)]<<10|revLookup[b64.charCodeAt(i+1)]<<4|revLookup[b64.charCodeAt(i+2)]>>2;arr[curByte++]=tmp>>8&255;arr[curByte++]=tmp&255;}return arr}function tripletToBase64(num){return lookup[num>>18&63]+lookup[num>>12&63]+lookup[num>>6&63]+lookup[num&63]}function encodeChunk(uint8,start,end){var tmp;var output=[];for(var i=start;i<end;i+=3){tmp=(uint8[i]<<16&16711680)+(uint8[i+1]<<8&65280)+(uint8[i+2]&255);output.push(tripletToBase64(tmp));}return output.join("")}function fromByteArray(uint8){var tmp;var len=uint8.length;var extraBytes=len%3;var parts=[];var maxChunkLength=16383;for(var i=0,len2=len-extraBytes;i<len2;i+=maxChunkLength){parts.push(encodeChunk(uint8,i,i+maxChunkLength>len2?len2:i+maxChunkLength));}if(extraBytes===1){tmp=uint8[len-1];parts.push(lookup[tmp>>2]+lookup[tmp<<4&63]+"==");}else if(extraBytes===2){tmp=(uint8[len-2]<<8)+uint8[len-1];parts.push(lookup[tmp>>10]+lookup[tmp>>4&63]+lookup[tmp<<2&63]+"=");}return parts.join("")}},{}],13:[function(require,module,exports){var buffer=require("buffer");var Buffer=buffer.Buffer;function copyProps(src,dst){for(var key in src){dst[key]=src[key];}}if(Buffer.from&&Buffer.alloc&&Buffer.allocUnsafe&&Buffer.allocUnsafeSlow){module.exports=buffer;}else {copyProps(buffer,exports);exports.Buffer=SafeBuffer;}function SafeBuffer(arg,encodingOrOffset,length){return Buffer(arg,encodingOrOffset,length)}copyProps(Buffer,SafeBuffer);SafeBuffer.from=function(arg,encodingOrOffset,length){if(typeof arg==="number"){throw new TypeError("Argument must not be a number")}return Buffer(arg,encodingOrOffset,length)};SafeBuffer.alloc=function(size,fill,encoding){if(typeof size!=="number"){throw new TypeError("Argument must be a number")}var buf=Buffer(size);if(fill!==undefined){if(typeof encoding==="string"){buf.fill(fill,encoding);}else {buf.fill(fill);}}else {buf.fill(0);}return buf};SafeBuffer.allocUnsafe=function(size){if(typeof size!=="number"){throw new TypeError("Argument must be a number")}return Buffer(size)};SafeBuffer.allocUnsafeSlow=function(size){if(typeof size!=="number"){throw new TypeError("Argument must be a number")}return buffer.SlowBuffer(size)};},{buffer:15}],14:[function(require,module,exports){var Buffer=require("safe-buffer").Buffer;var isEncoding=Buffer.isEncoding||function(encoding){encoding=""+encoding;switch(encoding&&encoding.toLowerCase()){case "hex":case "utf8":case "utf-8":case "ascii":case "binary":case "base64":case "ucs2":case "ucs-2":case "utf16le":case "utf-16le":case "raw":return true;default:return false}};function _normalizeEncoding(enc){if(!enc)return "utf8";var retried;while(true){switch(enc){case "utf8":case "utf-8":return "utf8";case "ucs2":case "ucs-2":case "utf16le":case "utf-16le":return "utf16le";case "latin1":case "binary":return "latin1";case "base64":case "ascii":case "hex":return enc;default:if(retried)return;enc=(""+enc).toLowerCase();retried=true;}}}function normalizeEncoding(enc){var nenc=_normalizeEncoding(enc);if(typeof nenc!=="string"&&(Buffer.isEncoding===isEncoding||!isEncoding(enc)))throw new Error("Unknown encoding: "+enc);return nenc||enc}exports.StringDecoder=StringDecoder;function StringDecoder(encoding){this.encoding=normalizeEncoding(encoding);var nb;switch(this.encoding){case "utf16le":this.text=utf16Text;this.end=utf16End;nb=4;break;case "utf8":this.fillLast=utf8FillLast;nb=4;break;case "base64":this.text=base64Text;this.end=base64End;nb=3;break;default:this.write=simpleWrite;this.end=simpleEnd;return}this.lastNeed=0;this.lastTotal=0;this.lastChar=Buffer.allocUnsafe(nb);}StringDecoder.prototype.write=function(buf){if(buf.length===0)return "";var r;var i;if(this.lastNeed){r=this.fillLast(buf);if(r===undefined)return "";i=this.lastNeed;this.lastNeed=0;}else {i=0;}if(i<buf.length)return r?r+this.text(buf,i):this.text(buf,i);return r||""};StringDecoder.prototype.end=utf8End;StringDecoder.prototype.text=utf8Text;StringDecoder.prototype.fillLast=function(buf){if(this.lastNeed<=buf.length){buf.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed);return this.lastChar.toString(this.encoding,0,this.lastTotal)}buf.copy(this.lastChar,this.lastTotal-this.lastNeed,0,buf.length);this.lastNeed-=buf.length;};function utf8CheckByte(byte){if(byte<=127)return 0;else if(byte>>5===6)return 2;else if(byte>>4===14)return 3;else if(byte>>3===30)return 4;return byte>>6===2?-1:-2}function utf8CheckIncomplete(self,buf,i){var j=buf.length-1;if(j<i)return 0;var nb=utf8CheckByte(buf[j]);if(nb>=0){if(nb>0)self.lastNeed=nb-1;return nb}if(--j<i||nb===-2)return 0;nb=utf8CheckByte(buf[j]);if(nb>=0){if(nb>0)self.lastNeed=nb-2;return nb}if(--j<i||nb===-2)return 0;nb=utf8CheckByte(buf[j]);if(nb>=0){if(nb>0){if(nb===2)nb=0;else self.lastNeed=nb-3;}return nb}return 0}function utf8CheckExtraBytes(self,buf,p){if((buf[0]&192)!==128){self.lastNeed=0;return "�"}if(self.lastNeed>1&&buf.length>1){if((buf[1]&192)!==128){self.lastNeed=1;return "�"}if(self.lastNeed>2&&buf.length>2){if((buf[2]&192)!==128){self.lastNeed=2;return "�"}}}}function utf8FillLast(buf){var p=this.lastTotal-this.lastNeed;var r=utf8CheckExtraBytes(this,buf);if(r!==undefined)return r;if(this.lastNeed<=buf.length){buf.copy(this.lastChar,p,0,this.lastNeed);return this.lastChar.toString(this.encoding,0,this.lastTotal)}buf.copy(this.lastChar,p,0,buf.length);this.lastNeed-=buf.length;}function utf8Text(buf,i){var total=utf8CheckIncomplete(this,buf,i);if(!this.lastNeed)return buf.toString("utf8",i);this.lastTotal=total;var end=buf.length-(total-this.lastNeed);buf.copy(this.lastChar,0,end);return buf.toString("utf8",i,end)}function utf8End(buf){var r=buf&&buf.length?this.write(buf):"";if(this.lastNeed)return r+"�";return r}function utf16Text(buf,i){if((buf.length-i)%2===0){var r=buf.toString("utf16le",i);if(r){var c=r.charCodeAt(r.length-1);if(c>=55296&&c<=56319){this.lastNeed=2;this.lastTotal=4;this.lastChar[0]=buf[buf.length-2];this.lastChar[1]=buf[buf.length-1];return r.slice(0,-1)}}return r}this.lastNeed=1;this.lastTotal=2;this.lastChar[0]=buf[buf.length-1];return buf.toString("utf16le",i,buf.length-1)}function utf16End(buf){var r=buf&&buf.length?this.write(buf):"";if(this.lastNeed){var end=this.lastTotal-this.lastNeed;return r+this.lastChar.toString("utf16le",0,end)}return r}function base64Text(buf,i){var n=(buf.length-i)%3;if(n===0)return buf.toString("base64",i);this.lastNeed=3-n;this.lastTotal=3;if(n===1){this.lastChar[0]=buf[buf.length-1];}else {this.lastChar[0]=buf[buf.length-2];this.lastChar[1]=buf[buf.length-1];}return buf.toString("base64",i,buf.length-n)}function base64End(buf){var r=buf&&buf.length?this.write(buf):"";if(this.lastNeed)return r+this.lastChar.toString("base64",0,3-this.lastNeed);return r}function simpleWrite(buf){return buf.toString(this.encoding)}function simpleEnd(buf){return buf&&buf.length?this.write(buf):""}},{"safe-buffer":13}],15:[function(require,module,exports){(function(Buffer){(function(){var base64=require("base64-js");var ieee754=require("ieee754");exports.Buffer=Buffer;exports.SlowBuffer=SlowBuffer;exports.INSPECT_MAX_BYTES=50;var K_MAX_LENGTH=2147483647;exports.kMaxLength=K_MAX_LENGTH;Buffer.TYPED_ARRAY_SUPPORT=typedArraySupport();if(!Buffer.TYPED_ARRAY_SUPPORT&&typeof console!=="undefined"&&typeof console.error==="function"){console.error("This browser lacks typed array (Uint8Array) support which is required by "+"`buffer` v5.x. Use `buffer` v4.x if you require old browser support.");}function typedArraySupport(){try{var arr=new Uint8Array(1);arr.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}};return arr.foo()===42}catch(e){return false}}Object.defineProperty(Buffer.prototype,"parent",{enumerable:true,get:function(){if(!Buffer.isBuffer(this))return undefined;return this.buffer}});Object.defineProperty(Buffer.prototype,"offset",{enumerable:true,get:function(){if(!Buffer.isBuffer(this))return undefined;return this.byteOffset}});function createBuffer(length){if(length>K_MAX_LENGTH){throw new RangeError('The value "'+length+'" is invalid for option "size"')}var buf=new Uint8Array(length);buf.__proto__=Buffer.prototype;return buf}function Buffer(arg,encodingOrOffset,length){if(typeof arg==="number"){if(typeof encodingOrOffset==="string"){throw new TypeError('The "string" argument must be of type string. Received type number')}return allocUnsafe(arg)}return from(arg,encodingOrOffset,length)}if(typeof Symbol!=="undefined"&&Symbol.species!=null&&Buffer[Symbol.species]===Buffer){Object.defineProperty(Buffer,Symbol.species,{value:null,configurable:true,enumerable:false,writable:false});}Buffer.poolSize=8192;function from(value,encodingOrOffset,length){if(typeof value==="string"){return fromString(value,encodingOrOffset)}if(ArrayBuffer.isView(value)){return fromArrayLike(value)}if(value==null){throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, "+"or Array-like Object. Received type "+typeof value)}if(isInstance(value,ArrayBuffer)||value&&isInstance(value.buffer,ArrayBuffer)){return fromArrayBuffer(value,encodingOrOffset,length)}if(typeof value==="number"){throw new TypeError('The "value" argument must not be of type number. Received type number')}var valueOf=value.valueOf&&value.valueOf();if(valueOf!=null&&valueOf!==value){return Buffer.from(valueOf,encodingOrOffset,length)}var b=fromObject(value);if(b)return b;if(typeof Symbol!=="undefined"&&Symbol.toPrimitive!=null&&typeof value[Symbol.toPrimitive]==="function"){return Buffer.from(value[Symbol.toPrimitive]("string"),encodingOrOffset,length)}throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, "+"or Array-like Object. Received type "+typeof value)}Buffer.from=function(value,encodingOrOffset,length){return from(value,encodingOrOffset,length)};Buffer.prototype.__proto__=Uint8Array.prototype;Buffer.__proto__=Uint8Array;function assertSize(size){if(typeof size!=="number"){throw new TypeError('"size" argument must be of type number')}else if(size<0){throw new RangeError('The value "'+size+'" is invalid for option "size"')}}function alloc(size,fill,encoding){assertSize(size);if(size<=0){return createBuffer(size)}if(fill!==undefined){return typeof encoding==="string"?createBuffer(size).fill(fill,encoding):createBuffer(size).fill(fill)}return createBuffer(size)}Buffer.alloc=function(size,fill,encoding){return alloc(size,fill,encoding)};function allocUnsafe(size){assertSize(size);return createBuffer(size<0?0:checked(size)|0)}Buffer.allocUnsafe=function(size){return allocUnsafe(size)};Buffer.allocUnsafeSlow=function(size){return allocUnsafe(size)};function fromString(string,encoding){if(typeof encoding!=="string"||encoding===""){encoding="utf8";}if(!Buffer.isEncoding(encoding)){throw new TypeError("Unknown encoding: "+encoding)}var length=byteLength(string,encoding)|0;var buf=createBuffer(length);var actual=buf.write(string,encoding);if(actual!==length){buf=buf.slice(0,actual);}return buf}function fromArrayLike(array){var length=array.length<0?0:checked(array.length)|0;var buf=createBuffer(length);for(var i=0;i<length;i+=1){buf[i]=array[i]&255;}return buf}function fromArrayBuffer(array,byteOffset,length){if(byteOffset<0||array.byteLength<byteOffset){throw new RangeError('"offset" is outside of buffer bounds')}if(array.byteLength<byteOffset+(length||0)){throw new RangeError('"length" is outside of buffer bounds')}var buf;if(byteOffset===undefined&&length===undefined){buf=new Uint8Array(array);}else if(length===undefined){buf=new Uint8Array(array,byteOffset);}else {buf=new Uint8Array(array,byteOffset,length);}buf.__proto__=Buffer.prototype;return buf}function fromObject(obj){if(Buffer.isBuffer(obj)){var len=checked(obj.length)|0;var buf=createBuffer(len);if(buf.length===0){return buf}obj.copy(buf,0,0,len);return buf}if(obj.length!==undefined){if(typeof obj.length!=="number"||numberIsNaN(obj.length)){return createBuffer(0)}return fromArrayLike(obj)}if(obj.type==="Buffer"&&Array.isArray(obj.data)){return fromArrayLike(obj.data)}}function checked(length){if(length>=K_MAX_LENGTH){throw new RangeError("Attempt to allocate Buffer larger than maximum "+"size: 0x"+K_MAX_LENGTH.toString(16)+" bytes")}return length|0}function SlowBuffer(length){if(+length!=length){length=0;}return Buffer.alloc(+length)}Buffer.isBuffer=function isBuffer(b){return b!=null&&b._isBuffer===true&&b!==Buffer.prototype};Buffer.compare=function compare(a,b){if(isInstance(a,Uint8Array))a=Buffer.from(a,a.offset,a.byteLength);if(isInstance(b,Uint8Array))b=Buffer.from(b,b.offset,b.byteLength);if(!Buffer.isBuffer(a)||!Buffer.isBuffer(b)){throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array')}if(a===b)return 0;var x=a.length;var y=b.length;for(var i=0,len=Math.min(x,y);i<len;++i){if(a[i]!==b[i]){x=a[i];y=b[i];break}}if(x<y)return  -1;if(y<x)return 1;return 0};Buffer.isEncoding=function isEncoding(encoding){switch(String(encoding).toLowerCase()){case "hex":case "utf8":case "utf-8":case "ascii":case "latin1":case "binary":case "base64":case "ucs2":case "ucs-2":case "utf16le":case "utf-16le":return true;default:return false}};Buffer.concat=function concat(list,length){if(!Array.isArray(list)){throw new TypeError('"list" argument must be an Array of Buffers')}if(list.length===0){return Buffer.alloc(0)}var i;if(length===undefined){length=0;for(i=0;i<list.length;++i){length+=list[i].length;}}var buffer=Buffer.allocUnsafe(length);var pos=0;for(i=0;i<list.length;++i){var buf=list[i];if(isInstance(buf,Uint8Array)){buf=Buffer.from(buf);}if(!Buffer.isBuffer(buf)){throw new TypeError('"list" argument must be an Array of Buffers')}buf.copy(buffer,pos);pos+=buf.length;}return buffer};function byteLength(string,encoding){if(Buffer.isBuffer(string)){return string.length}if(ArrayBuffer.isView(string)||isInstance(string,ArrayBuffer)){return string.byteLength}if(typeof string!=="string"){throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. '+"Received type "+typeof string)}var len=string.length;var mustMatch=arguments.length>2&&arguments[2]===true;if(!mustMatch&&len===0)return 0;var loweredCase=false;for(;;){switch(encoding){case "ascii":case "latin1":case "binary":return len;case "utf8":case "utf-8":return utf8ToBytes(string).length;case "ucs2":case "ucs-2":case "utf16le":case "utf-16le":return len*2;case "hex":return len>>>1;case "base64":return base64ToBytes(string).length;default:if(loweredCase){return mustMatch?-1:utf8ToBytes(string).length}encoding=(""+encoding).toLowerCase();loweredCase=true;}}}Buffer.byteLength=byteLength;function slowToString(encoding,start,end){var loweredCase=false;if(start===undefined||start<0){start=0;}if(start>this.length){return ""}if(end===undefined||end>this.length){end=this.length;}if(end<=0){return ""}end>>>=0;start>>>=0;if(end<=start){return ""}if(!encoding)encoding="utf8";while(true){switch(encoding){case "hex":return hexSlice(this,start,end);case "utf8":case "utf-8":return utf8Slice(this,start,end);case "ascii":return asciiSlice(this,start,end);case "latin1":case "binary":return latin1Slice(this,start,end);case "base64":return base64Slice(this,start,end);case "ucs2":case "ucs-2":case "utf16le":case "utf-16le":return utf16leSlice(this,start,end);default:if(loweredCase)throw new TypeError("Unknown encoding: "+encoding);encoding=(encoding+"").toLowerCase();loweredCase=true;}}}Buffer.prototype._isBuffer=true;function swap(b,n,m){var i=b[n];b[n]=b[m];b[m]=i;}Buffer.prototype.swap16=function swap16(){var len=this.length;if(len%2!==0){throw new RangeError("Buffer size must be a multiple of 16-bits")}for(var i=0;i<len;i+=2){swap(this,i,i+1);}return this};Buffer.prototype.swap32=function swap32(){var len=this.length;if(len%4!==0){throw new RangeError("Buffer size must be a multiple of 32-bits")}for(var i=0;i<len;i+=4){swap(this,i,i+3);swap(this,i+1,i+2);}return this};Buffer.prototype.swap64=function swap64(){var len=this.length;if(len%8!==0){throw new RangeError("Buffer size must be a multiple of 64-bits")}for(var i=0;i<len;i+=8){swap(this,i,i+7);swap(this,i+1,i+6);swap(this,i+2,i+5);swap(this,i+3,i+4);}return this};Buffer.prototype.toString=function toString(){var length=this.length;if(length===0)return "";if(arguments.length===0)return utf8Slice(this,0,length);return slowToString.apply(this,arguments)};Buffer.prototype.toLocaleString=Buffer.prototype.toString;Buffer.prototype.equals=function equals(b){if(!Buffer.isBuffer(b))throw new TypeError("Argument must be a Buffer");if(this===b)return true;return Buffer.compare(this,b)===0};Buffer.prototype.inspect=function inspect(){var str="";var max=exports.INSPECT_MAX_BYTES;str=this.toString("hex",0,max).replace(/(.{2})/g,"$1 ").trim();if(this.length>max)str+=" ... ";return "<Buffer "+str+">"};Buffer.prototype.compare=function compare(target,start,end,thisStart,thisEnd){if(isInstance(target,Uint8Array)){target=Buffer.from(target,target.offset,target.byteLength);}if(!Buffer.isBuffer(target)){throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. '+"Received type "+typeof target)}if(start===undefined){start=0;}if(end===undefined){end=target?target.length:0;}if(thisStart===undefined){thisStart=0;}if(thisEnd===undefined){thisEnd=this.length;}if(start<0||end>target.length||thisStart<0||thisEnd>this.length){throw new RangeError("out of range index")}if(thisStart>=thisEnd&&start>=end){return 0}if(thisStart>=thisEnd){return  -1}if(start>=end){return 1}start>>>=0;end>>>=0;thisStart>>>=0;thisEnd>>>=0;if(this===target)return 0;var x=thisEnd-thisStart;var y=end-start;var len=Math.min(x,y);var thisCopy=this.slice(thisStart,thisEnd);var targetCopy=target.slice(start,end);for(var i=0;i<len;++i){if(thisCopy[i]!==targetCopy[i]){x=thisCopy[i];y=targetCopy[i];break}}if(x<y)return  -1;if(y<x)return 1;return 0};function bidirectionalIndexOf(buffer,val,byteOffset,encoding,dir){if(buffer.length===0)return  -1;if(typeof byteOffset==="string"){encoding=byteOffset;byteOffset=0;}else if(byteOffset>2147483647){byteOffset=2147483647;}else if(byteOffset<-2147483648){byteOffset=-2147483648;}byteOffset=+byteOffset;if(numberIsNaN(byteOffset)){byteOffset=dir?0:buffer.length-1;}if(byteOffset<0)byteOffset=buffer.length+byteOffset;if(byteOffset>=buffer.length){if(dir)return  -1;else byteOffset=buffer.length-1;}else if(byteOffset<0){if(dir)byteOffset=0;else return  -1}if(typeof val==="string"){val=Buffer.from(val,encoding);}if(Buffer.isBuffer(val)){if(val.length===0){return  -1}return arrayIndexOf(buffer,val,byteOffset,encoding,dir)}else if(typeof val==="number"){val=val&255;if(typeof Uint8Array.prototype.indexOf==="function"){if(dir){return Uint8Array.prototype.indexOf.call(buffer,val,byteOffset)}else {return Uint8Array.prototype.lastIndexOf.call(buffer,val,byteOffset)}}return arrayIndexOf(buffer,[val],byteOffset,encoding,dir)}throw new TypeError("val must be string, number or Buffer")}function arrayIndexOf(arr,val,byteOffset,encoding,dir){var indexSize=1;var arrLength=arr.length;var valLength=val.length;if(encoding!==undefined){encoding=String(encoding).toLowerCase();if(encoding==="ucs2"||encoding==="ucs-2"||encoding==="utf16le"||encoding==="utf-16le"){if(arr.length<2||val.length<2){return  -1}indexSize=2;arrLength/=2;valLength/=2;byteOffset/=2;}}function read(buf,i){if(indexSize===1){return buf[i]}else {return buf.readUInt16BE(i*indexSize)}}var i;if(dir){var foundIndex=-1;for(i=byteOffset;i<arrLength;i++){if(read(arr,i)===read(val,foundIndex===-1?0:i-foundIndex)){if(foundIndex===-1)foundIndex=i;if(i-foundIndex+1===valLength)return foundIndex*indexSize}else {if(foundIndex!==-1)i-=i-foundIndex;foundIndex=-1;}}}else {if(byteOffset+valLength>arrLength)byteOffset=arrLength-valLength;for(i=byteOffset;i>=0;i--){var found=true;for(var j=0;j<valLength;j++){if(read(arr,i+j)!==read(val,j)){found=false;break}}if(found)return i}}return  -1}Buffer.prototype.includes=function includes(val,byteOffset,encoding){return this.indexOf(val,byteOffset,encoding)!==-1};Buffer.prototype.indexOf=function indexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,true)};Buffer.prototype.lastIndexOf=function lastIndexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,false)};function hexWrite(buf,string,offset,length){offset=Number(offset)||0;var remaining=buf.length-offset;if(!length){length=remaining;}else {length=Number(length);if(length>remaining){length=remaining;}}var strLen=string.length;if(length>strLen/2){length=strLen/2;}for(var i=0;i<length;++i){var parsed=parseInt(string.substr(i*2,2),16);if(numberIsNaN(parsed))return i;buf[offset+i]=parsed;}return i}function utf8Write(buf,string,offset,length){return blitBuffer(utf8ToBytes(string,buf.length-offset),buf,offset,length)}function asciiWrite(buf,string,offset,length){return blitBuffer(asciiToBytes(string),buf,offset,length)}function latin1Write(buf,string,offset,length){return asciiWrite(buf,string,offset,length)}function base64Write(buf,string,offset,length){return blitBuffer(base64ToBytes(string),buf,offset,length)}function ucs2Write(buf,string,offset,length){return blitBuffer(utf16leToBytes(string,buf.length-offset),buf,offset,length)}Buffer.prototype.write=function write(string,offset,length,encoding){if(offset===undefined){encoding="utf8";length=this.length;offset=0;}else if(length===undefined&&typeof offset==="string"){encoding=offset;length=this.length;offset=0;}else if(isFinite(offset)){offset=offset>>>0;if(isFinite(length)){length=length>>>0;if(encoding===undefined)encoding="utf8";}else {encoding=length;length=undefined;}}else {throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported")}var remaining=this.length-offset;if(length===undefined||length>remaining)length=remaining;if(string.length>0&&(length<0||offset<0)||offset>this.length){throw new RangeError("Attempt to write outside buffer bounds")}if(!encoding)encoding="utf8";var loweredCase=false;for(;;){switch(encoding){case "hex":return hexWrite(this,string,offset,length);case "utf8":case "utf-8":return utf8Write(this,string,offset,length);case "ascii":return asciiWrite(this,string,offset,length);case "latin1":case "binary":return latin1Write(this,string,offset,length);case "base64":return base64Write(this,string,offset,length);case "ucs2":case "ucs-2":case "utf16le":case "utf-16le":return ucs2Write(this,string,offset,length);default:if(loweredCase)throw new TypeError("Unknown encoding: "+encoding);encoding=(""+encoding).toLowerCase();loweredCase=true;}}};Buffer.prototype.toJSON=function toJSON(){return {type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function base64Slice(buf,start,end){if(start===0&&end===buf.length){return base64.fromByteArray(buf)}else {return base64.fromByteArray(buf.slice(start,end))}}function utf8Slice(buf,start,end){end=Math.min(buf.length,end);var res=[];var i=start;while(i<end){var firstByte=buf[i];var codePoint=null;var bytesPerSequence=firstByte>239?4:firstByte>223?3:firstByte>191?2:1;if(i+bytesPerSequence<=end){var secondByte,thirdByte,fourthByte,tempCodePoint;switch(bytesPerSequence){case 1:if(firstByte<128){codePoint=firstByte;}break;case 2:secondByte=buf[i+1];if((secondByte&192)===128){tempCodePoint=(firstByte&31)<<6|secondByte&63;if(tempCodePoint>127){codePoint=tempCodePoint;}}break;case 3:secondByte=buf[i+1];thirdByte=buf[i+2];if((secondByte&192)===128&&(thirdByte&192)===128){tempCodePoint=(firstByte&15)<<12|(secondByte&63)<<6|thirdByte&63;if(tempCodePoint>2047&&(tempCodePoint<55296||tempCodePoint>57343)){codePoint=tempCodePoint;}}break;case 4:secondByte=buf[i+1];thirdByte=buf[i+2];fourthByte=buf[i+3];if((secondByte&192)===128&&(thirdByte&192)===128&&(fourthByte&192)===128){tempCodePoint=(firstByte&15)<<18|(secondByte&63)<<12|(thirdByte&63)<<6|fourthByte&63;if(tempCodePoint>65535&&tempCodePoint<1114112){codePoint=tempCodePoint;}}}}if(codePoint===null){codePoint=65533;bytesPerSequence=1;}else if(codePoint>65535){codePoint-=65536;res.push(codePoint>>>10&1023|55296);codePoint=56320|codePoint&1023;}res.push(codePoint);i+=bytesPerSequence;}return decodeCodePointsArray(res)}var MAX_ARGUMENTS_LENGTH=4096;function decodeCodePointsArray(codePoints){var len=codePoints.length;if(len<=MAX_ARGUMENTS_LENGTH){return String.fromCharCode.apply(String,codePoints)}var res="";var i=0;while(i<len){res+=String.fromCharCode.apply(String,codePoints.slice(i,i+=MAX_ARGUMENTS_LENGTH));}return res}function asciiSlice(buf,start,end){var ret="";end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i]&127);}return ret}function latin1Slice(buf,start,end){var ret="";end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i]);}return ret}function hexSlice(buf,start,end){var len=buf.length;if(!start||start<0)start=0;if(!end||end<0||end>len)end=len;var out="";for(var i=start;i<end;++i){out+=toHex(buf[i]);}return out}function utf16leSlice(buf,start,end){var bytes=buf.slice(start,end);var res="";for(var i=0;i<bytes.length;i+=2){res+=String.fromCharCode(bytes[i]+bytes[i+1]*256);}return res}Buffer.prototype.slice=function slice(start,end){var len=this.length;start=~~start;end=end===undefined?len:~~end;if(start<0){start+=len;if(start<0)start=0;}else if(start>len){start=len;}if(end<0){end+=len;if(end<0)end=0;}else if(end>len){end=len;}if(end<start)end=start;var newBuf=this.subarray(start,end);newBuf.__proto__=Buffer.prototype;return newBuf};function checkOffset(offset,ext,length){if(offset%1!==0||offset<0)throw new RangeError("offset is not uint");if(offset+ext>length)throw new RangeError("Trying to access beyond buffer length")}Buffer.prototype.readUIntLE=function readUIntLE(offset,byteLength,noAssert){offset=offset>>>0;byteLength=byteLength>>>0;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=256)){val+=this[offset+i]*mul;}return val};Buffer.prototype.readUIntBE=function readUIntBE(offset,byteLength,noAssert){offset=offset>>>0;byteLength=byteLength>>>0;if(!noAssert){checkOffset(offset,byteLength,this.length);}var val=this[offset+--byteLength];var mul=1;while(byteLength>0&&(mul*=256)){val+=this[offset+--byteLength]*mul;}return val};Buffer.prototype.readUInt8=function readUInt8(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,1,this.length);return this[offset]};Buffer.prototype.readUInt16LE=function readUInt16LE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,2,this.length);return this[offset]|this[offset+1]<<8};Buffer.prototype.readUInt16BE=function readUInt16BE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,2,this.length);return this[offset]<<8|this[offset+1]};Buffer.prototype.readUInt32LE=function readUInt32LE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return (this[offset]|this[offset+1]<<8|this[offset+2]<<16)+this[offset+3]*16777216};Buffer.prototype.readUInt32BE=function readUInt32BE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return this[offset]*16777216+(this[offset+1]<<16|this[offset+2]<<8|this[offset+3])};Buffer.prototype.readIntLE=function readIntLE(offset,byteLength,noAssert){offset=offset>>>0;byteLength=byteLength>>>0;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=256)){val+=this[offset+i]*mul;}mul*=128;if(val>=mul)val-=Math.pow(2,8*byteLength);return val};Buffer.prototype.readIntBE=function readIntBE(offset,byteLength,noAssert){offset=offset>>>0;byteLength=byteLength>>>0;if(!noAssert)checkOffset(offset,byteLength,this.length);var i=byteLength;var mul=1;var val=this[offset+--i];while(i>0&&(mul*=256)){val+=this[offset+--i]*mul;}mul*=128;if(val>=mul)val-=Math.pow(2,8*byteLength);return val};Buffer.prototype.readInt8=function readInt8(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,1,this.length);if(!(this[offset]&128))return this[offset];return (255-this[offset]+1)*-1};Buffer.prototype.readInt16LE=function readInt16LE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset]|this[offset+1]<<8;return val&32768?val|4294901760:val};Buffer.prototype.readInt16BE=function readInt16BE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset+1]|this[offset]<<8;return val&32768?val|4294901760:val};Buffer.prototype.readInt32LE=function readInt32LE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return this[offset]|this[offset+1]<<8|this[offset+2]<<16|this[offset+3]<<24};Buffer.prototype.readInt32BE=function readInt32BE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return this[offset]<<24|this[offset+1]<<16|this[offset+2]<<8|this[offset+3]};Buffer.prototype.readFloatLE=function readFloatLE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,true,23,4)};Buffer.prototype.readFloatBE=function readFloatBE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,false,23,4)};Buffer.prototype.readDoubleLE=function readDoubleLE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,true,52,8)};Buffer.prototype.readDoubleBE=function readDoubleBE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,false,52,8)};function checkInt(buf,value,offset,ext,max,min){if(!Buffer.isBuffer(buf))throw new TypeError('"buffer" argument must be a Buffer instance');if(value>max||value<min)throw new RangeError('"value" argument is out of bounds');if(offset+ext>buf.length)throw new RangeError("Index out of range")}Buffer.prototype.writeUIntLE=function writeUIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset>>>0;byteLength=byteLength>>>0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength)-1;checkInt(this,value,offset,byteLength,maxBytes,0);}var mul=1;var i=0;this[offset]=value&255;while(++i<byteLength&&(mul*=256)){this[offset+i]=value/mul&255;}return offset+byteLength};Buffer.prototype.writeUIntBE=function writeUIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset>>>0;byteLength=byteLength>>>0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength)-1;checkInt(this,value,offset,byteLength,maxBytes,0);}var i=byteLength-1;var mul=1;this[offset+i]=value&255;while(--i>=0&&(mul*=256)){this[offset+i]=value/mul&255;}return offset+byteLength};Buffer.prototype.writeUInt8=function writeUInt8(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,1,255,0);this[offset]=value&255;return offset+1};Buffer.prototype.writeUInt16LE=function writeUInt16LE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,2,65535,0);this[offset]=value&255;this[offset+1]=value>>>8;return offset+2};Buffer.prototype.writeUInt16BE=function writeUInt16BE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,2,65535,0);this[offset]=value>>>8;this[offset+1]=value&255;return offset+2};Buffer.prototype.writeUInt32LE=function writeUInt32LE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,4,4294967295,0);this[offset+3]=value>>>24;this[offset+2]=value>>>16;this[offset+1]=value>>>8;this[offset]=value&255;return offset+4};Buffer.prototype.writeUInt32BE=function writeUInt32BE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,4,4294967295,0);this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&255;return offset+4};Buffer.prototype.writeIntLE=function writeIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset>>>0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit);}var i=0;var mul=1;var sub=0;this[offset]=value&255;while(++i<byteLength&&(mul*=256)){if(value<0&&sub===0&&this[offset+i-1]!==0){sub=1;}this[offset+i]=(value/mul>>0)-sub&255;}return offset+byteLength};Buffer.prototype.writeIntBE=function writeIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset>>>0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit);}var i=byteLength-1;var mul=1;var sub=0;this[offset+i]=value&255;while(--i>=0&&(mul*=256)){if(value<0&&sub===0&&this[offset+i+1]!==0){sub=1;}this[offset+i]=(value/mul>>0)-sub&255;}return offset+byteLength};Buffer.prototype.writeInt8=function writeInt8(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,1,127,-128);if(value<0)value=255+value+1;this[offset]=value&255;return offset+1};Buffer.prototype.writeInt16LE=function writeInt16LE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,2,32767,-32768);this[offset]=value&255;this[offset+1]=value>>>8;return offset+2};Buffer.prototype.writeInt16BE=function writeInt16BE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,2,32767,-32768);this[offset]=value>>>8;this[offset+1]=value&255;return offset+2};Buffer.prototype.writeInt32LE=function writeInt32LE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,4,2147483647,-2147483648);this[offset]=value&255;this[offset+1]=value>>>8;this[offset+2]=value>>>16;this[offset+3]=value>>>24;return offset+4};Buffer.prototype.writeInt32BE=function writeInt32BE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,4,2147483647,-2147483648);if(value<0)value=4294967295+value+1;this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&255;return offset+4};function checkIEEE754(buf,value,offset,ext,max,min){if(offset+ext>buf.length)throw new RangeError("Index out of range");if(offset<0)throw new RangeError("Index out of range")}function writeFloat(buf,value,offset,littleEndian,noAssert){value=+value;offset=offset>>>0;if(!noAssert){checkIEEE754(buf,value,offset,4);}ieee754.write(buf,value,offset,littleEndian,23,4);return offset+4}Buffer.prototype.writeFloatLE=function writeFloatLE(value,offset,noAssert){return writeFloat(this,value,offset,true,noAssert)};Buffer.prototype.writeFloatBE=function writeFloatBE(value,offset,noAssert){return writeFloat(this,value,offset,false,noAssert)};function writeDouble(buf,value,offset,littleEndian,noAssert){value=+value;offset=offset>>>0;if(!noAssert){checkIEEE754(buf,value,offset,8);}ieee754.write(buf,value,offset,littleEndian,52,8);return offset+8}Buffer.prototype.writeDoubleLE=function writeDoubleLE(value,offset,noAssert){return writeDouble(this,value,offset,true,noAssert)};Buffer.prototype.writeDoubleBE=function writeDoubleBE(value,offset,noAssert){return writeDouble(this,value,offset,false,noAssert)};Buffer.prototype.copy=function copy(target,targetStart,start,end){if(!Buffer.isBuffer(target))throw new TypeError("argument should be a Buffer");if(!start)start=0;if(!end&&end!==0)end=this.length;if(targetStart>=target.length)targetStart=target.length;if(!targetStart)targetStart=0;if(end>0&&end<start)end=start;if(end===start)return 0;if(target.length===0||this.length===0)return 0;if(targetStart<0){throw new RangeError("targetStart out of bounds")}if(start<0||start>=this.length)throw new RangeError("Index out of range");if(end<0)throw new RangeError("sourceEnd out of bounds");if(end>this.length)end=this.length;if(target.length-targetStart<end-start){end=target.length-targetStart+start;}var len=end-start;if(this===target&&typeof Uint8Array.prototype.copyWithin==="function"){this.copyWithin(targetStart,start,end);}else if(this===target&&start<targetStart&&targetStart<end){for(var i=len-1;i>=0;--i){target[i+targetStart]=this[i+start];}}else {Uint8Array.prototype.set.call(target,this.subarray(start,end),targetStart);}return len};Buffer.prototype.fill=function fill(val,start,end,encoding){if(typeof val==="string"){if(typeof start==="string"){encoding=start;start=0;end=this.length;}else if(typeof end==="string"){encoding=end;end=this.length;}if(encoding!==undefined&&typeof encoding!=="string"){throw new TypeError("encoding must be a string")}if(typeof encoding==="string"&&!Buffer.isEncoding(encoding)){throw new TypeError("Unknown encoding: "+encoding)}if(val.length===1){var code=val.charCodeAt(0);if(encoding==="utf8"&&code<128||encoding==="latin1"){val=code;}}}else if(typeof val==="number"){val=val&255;}if(start<0||this.length<start||this.length<end){throw new RangeError("Out of range index")}if(end<=start){return this}start=start>>>0;end=end===undefined?this.length:end>>>0;if(!val)val=0;var i;if(typeof val==="number"){for(i=start;i<end;++i){this[i]=val;}}else {var bytes=Buffer.isBuffer(val)?val:Buffer.from(val,encoding);var len=bytes.length;if(len===0){throw new TypeError('The value "'+val+'" is invalid for argument "value"')}for(i=0;i<end-start;++i){this[i+start]=bytes[i%len];}}return this};var INVALID_BASE64_RE=/[^+/0-9A-Za-z-_]/g;function base64clean(str){str=str.split("=")[0];str=str.trim().replace(INVALID_BASE64_RE,"");if(str.length<2)return "";while(str.length%4!==0){str=str+"=";}return str}function toHex(n){if(n<16)return "0"+n.toString(16);return n.toString(16)}function utf8ToBytes(string,units){units=units||Infinity;var codePoint;var length=string.length;var leadSurrogate=null;var bytes=[];for(var i=0;i<length;++i){codePoint=string.charCodeAt(i);if(codePoint>55295&&codePoint<57344){if(!leadSurrogate){if(codePoint>56319){if((units-=3)>-1)bytes.push(239,191,189);continue}else if(i+1===length){if((units-=3)>-1)bytes.push(239,191,189);continue}leadSurrogate=codePoint;continue}if(codePoint<56320){if((units-=3)>-1)bytes.push(239,191,189);leadSurrogate=codePoint;continue}codePoint=(leadSurrogate-55296<<10|codePoint-56320)+65536;}else if(leadSurrogate){if((units-=3)>-1)bytes.push(239,191,189);}leadSurrogate=null;if(codePoint<128){if((units-=1)<0)break;bytes.push(codePoint);}else if(codePoint<2048){if((units-=2)<0)break;bytes.push(codePoint>>6|192,codePoint&63|128);}else if(codePoint<65536){if((units-=3)<0)break;bytes.push(codePoint>>12|224,codePoint>>6&63|128,codePoint&63|128);}else if(codePoint<1114112){if((units-=4)<0)break;bytes.push(codePoint>>18|240,codePoint>>12&63|128,codePoint>>6&63|128,codePoint&63|128);}else {throw new Error("Invalid code point")}}return bytes}function asciiToBytes(str){var byteArray=[];for(var i=0;i<str.length;++i){byteArray.push(str.charCodeAt(i)&255);}return byteArray}function utf16leToBytes(str,units){var c,hi,lo;var byteArray=[];for(var i=0;i<str.length;++i){if((units-=2)<0)break;c=str.charCodeAt(i);hi=c>>8;lo=c%256;byteArray.push(lo);byteArray.push(hi);}return byteArray}function base64ToBytes(str){return base64.toByteArray(base64clean(str))}function blitBuffer(src,dst,offset,length){for(var i=0;i<length;++i){if(i+offset>=dst.length||i>=src.length)break;dst[i+offset]=src[i];}return i}function isInstance(obj,type){return obj instanceof type||obj!=null&&obj.constructor!=null&&obj.constructor.name!=null&&obj.constructor.name===type.name}function numberIsNaN(obj){return obj!==obj}}).call(this);}).call(this,require("buffer").Buffer);},{"base64-js":12,buffer:15,ieee754:17}],16:[function(require,module,exports){var R=typeof Reflect==="object"?Reflect:null;var ReflectApply=R&&typeof R.apply==="function"?R.apply:function ReflectApply(target,receiver,args){return Function.prototype.apply.call(target,receiver,args)};var ReflectOwnKeys;if(R&&typeof R.ownKeys==="function"){ReflectOwnKeys=R.ownKeys;}else if(Object.getOwnPropertySymbols){ReflectOwnKeys=function ReflectOwnKeys(target){return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))};}else {ReflectOwnKeys=function ReflectOwnKeys(target){return Object.getOwnPropertyNames(target)};}function ProcessEmitWarning(warning){if(console&&console.warn)console.warn(warning);}var NumberIsNaN=Number.isNaN||function NumberIsNaN(value){return value!==value};function EventEmitter(){EventEmitter.init.call(this);}module.exports=EventEmitter;module.exports.once=once;EventEmitter.EventEmitter=EventEmitter;EventEmitter.prototype._events=undefined;EventEmitter.prototype._eventsCount=0;EventEmitter.prototype._maxListeners=undefined;var defaultMaxListeners=10;function checkListener(listener){if(typeof listener!=="function"){throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof listener)}}Object.defineProperty(EventEmitter,"defaultMaxListeners",{enumerable:true,get:function(){return defaultMaxListeners},set:function(arg){if(typeof arg!=="number"||arg<0||NumberIsNaN(arg)){throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+arg+".")}defaultMaxListeners=arg;}});EventEmitter.init=function(){if(this._events===undefined||this._events===Object.getPrototypeOf(this)._events){this._events=Object.create(null);this._eventsCount=0;}this._maxListeners=this._maxListeners||undefined;};EventEmitter.prototype.setMaxListeners=function setMaxListeners(n){if(typeof n!=="number"||n<0||NumberIsNaN(n)){throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+n+".")}this._maxListeners=n;return this};function _getMaxListeners(that){if(that._maxListeners===undefined)return EventEmitter.defaultMaxListeners;return that._maxListeners}EventEmitter.prototype.getMaxListeners=function getMaxListeners(){return _getMaxListeners(this)};EventEmitter.prototype.emit=function emit(type){var args=[];for(var i=1;i<arguments.length;i++)args.push(arguments[i]);var doError=type==="error";var events=this._events;if(events!==undefined)doError=doError&&events.error===undefined;else if(!doError)return false;if(doError){var er;if(args.length>0)er=args[0];if(er instanceof Error){throw er}var err=new Error("Unhandled error."+(er?" ("+er.message+")":""));err.context=er;throw err}var handler=events[type];if(handler===undefined)return false;if(typeof handler==="function"){ReflectApply(handler,this,args);}else {var len=handler.length;var listeners=arrayClone(handler,len);for(var i=0;i<len;++i)ReflectApply(listeners[i],this,args);}return true};function _addListener(target,type,listener,prepend){var m;var events;var existing;checkListener(listener);events=target._events;if(events===undefined){events=target._events=Object.create(null);target._eventsCount=0;}else {if(events.newListener!==undefined){target.emit("newListener",type,listener.listener?listener.listener:listener);events=target._events;}existing=events[type];}if(existing===undefined){existing=events[type]=listener;++target._eventsCount;}else {if(typeof existing==="function"){existing=events[type]=prepend?[listener,existing]:[existing,listener];}else if(prepend){existing.unshift(listener);}else {existing.push(listener);}m=_getMaxListeners(target);if(m>0&&existing.length>m&&!existing.warned){existing.warned=true;var w=new Error("Possible EventEmitter memory leak detected. "+existing.length+" "+String(type)+" listeners "+"added. Use emitter.setMaxListeners() to "+"increase limit");w.name="MaxListenersExceededWarning";w.emitter=target;w.type=type;w.count=existing.length;ProcessEmitWarning(w);}}return target}EventEmitter.prototype.addListener=function addListener(type,listener){return _addListener(this,type,listener,false)};EventEmitter.prototype.on=EventEmitter.prototype.addListener;EventEmitter.prototype.prependListener=function prependListener(type,listener){return _addListener(this,type,listener,true)};function onceWrapper(){if(!this.fired){this.target.removeListener(this.type,this.wrapFn);this.fired=true;if(arguments.length===0)return this.listener.call(this.target);return this.listener.apply(this.target,arguments)}}function _onceWrap(target,type,listener){var state={fired:false,wrapFn:undefined,target:target,type:type,listener:listener};var wrapped=onceWrapper.bind(state);wrapped.listener=listener;state.wrapFn=wrapped;return wrapped}EventEmitter.prototype.once=function once(type,listener){checkListener(listener);this.on(type,_onceWrap(this,type,listener));return this};EventEmitter.prototype.prependOnceListener=function prependOnceListener(type,listener){checkListener(listener);this.prependListener(type,_onceWrap(this,type,listener));return this};EventEmitter.prototype.removeListener=function removeListener(type,listener){var list,events,position,i,originalListener;checkListener(listener);events=this._events;if(events===undefined)return this;list=events[type];if(list===undefined)return this;if(list===listener||list.listener===listener){if(--this._eventsCount===0)this._events=Object.create(null);else {delete events[type];if(events.removeListener)this.emit("removeListener",type,list.listener||listener);}}else if(typeof list!=="function"){position=-1;for(i=list.length-1;i>=0;i--){if(list[i]===listener||list[i].listener===listener){originalListener=list[i].listener;position=i;break}}if(position<0)return this;if(position===0)list.shift();else {spliceOne(list,position);}if(list.length===1)events[type]=list[0];if(events.removeListener!==undefined)this.emit("removeListener",type,originalListener||listener);}return this};EventEmitter.prototype.off=EventEmitter.prototype.removeListener;EventEmitter.prototype.removeAllListeners=function removeAllListeners(type){var listeners,events,i;events=this._events;if(events===undefined)return this;if(events.removeListener===undefined){if(arguments.length===0){this._events=Object.create(null);this._eventsCount=0;}else if(events[type]!==undefined){if(--this._eventsCount===0)this._events=Object.create(null);else delete events[type];}return this}if(arguments.length===0){var keys=Object.keys(events);var key;for(i=0;i<keys.length;++i){key=keys[i];if(key==="removeListener")continue;this.removeAllListeners(key);}this.removeAllListeners("removeListener");this._events=Object.create(null);this._eventsCount=0;return this}listeners=events[type];if(typeof listeners==="function"){this.removeListener(type,listeners);}else if(listeners!==undefined){for(i=listeners.length-1;i>=0;i--){this.removeListener(type,listeners[i]);}}return this};function _listeners(target,type,unwrap){var events=target._events;if(events===undefined)return [];var evlistener=events[type];if(evlistener===undefined)return [];if(typeof evlistener==="function")return unwrap?[evlistener.listener||evlistener]:[evlistener];return unwrap?unwrapListeners(evlistener):arrayClone(evlistener,evlistener.length)}EventEmitter.prototype.listeners=function listeners(type){return _listeners(this,type,true)};EventEmitter.prototype.rawListeners=function rawListeners(type){return _listeners(this,type,false)};EventEmitter.listenerCount=function(emitter,type){if(typeof emitter.listenerCount==="function"){return emitter.listenerCount(type)}else {return listenerCount.call(emitter,type)}};EventEmitter.prototype.listenerCount=listenerCount;function listenerCount(type){var events=this._events;if(events!==undefined){var evlistener=events[type];if(typeof evlistener==="function"){return 1}else if(evlistener!==undefined){return evlistener.length}}return 0}EventEmitter.prototype.eventNames=function eventNames(){return this._eventsCount>0?ReflectOwnKeys(this._events):[]};function arrayClone(arr,n){var copy=new Array(n);for(var i=0;i<n;++i)copy[i]=arr[i];return copy}function spliceOne(list,index){for(;index+1<list.length;index++)list[index]=list[index+1];list.pop();}function unwrapListeners(arr){var ret=new Array(arr.length);for(var i=0;i<ret.length;++i){ret[i]=arr[i].listener||arr[i];}return ret}function once(emitter,name){return new Promise(function(resolve,reject){function errorListener(err){emitter.removeListener(name,resolver);reject(err);}function resolver(){if(typeof emitter.removeListener==="function"){emitter.removeListener("error",errorListener);}resolve([].slice.call(arguments));}eventTargetAgnosticAddListener(emitter,name,resolver,{once:true});if(name!=="error"){addErrorHandlerIfEventEmitter(emitter,errorListener,{once:true});}})}function addErrorHandlerIfEventEmitter(emitter,handler,flags){if(typeof emitter.on==="function"){eventTargetAgnosticAddListener(emitter,"error",handler,flags);}}function eventTargetAgnosticAddListener(emitter,name,listener,flags){if(typeof emitter.on==="function"){if(flags.once){emitter.once(name,listener);}else {emitter.on(name,listener);}}else if(typeof emitter.addEventListener==="function"){emitter.addEventListener(name,function wrapListener(arg){if(flags.once){emitter.removeEventListener(name,wrapListener);}listener(arg);});}else {throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof emitter)}}},{}],17:[function(require,module,exports){exports.read=function(buffer,offset,isLE,mLen,nBytes){var e,m;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var nBits=-7;var i=isLE?nBytes-1:0;var d=isLE?-1:1;var s=buffer[offset+i];i+=d;e=s&(1<<-nBits)-1;s>>=-nBits;nBits+=eLen;for(;nBits>0;e=e*256+buffer[offset+i],i+=d,nBits-=8){}m=e&(1<<-nBits)-1;e>>=-nBits;nBits+=mLen;for(;nBits>0;m=m*256+buffer[offset+i],i+=d,nBits-=8){}if(e===0){e=1-eBias;}else if(e===eMax){return m?NaN:(s?-1:1)*Infinity}else {m=m+Math.pow(2,mLen);e=e-eBias;}return (s?-1:1)*m*Math.pow(2,e-mLen)};exports.write=function(buffer,value,offset,isLE,mLen,nBytes){var e,m,c;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var rt=mLen===23?Math.pow(2,-24)-Math.pow(2,-77):0;var i=isLE?0:nBytes-1;var d=isLE?1:-1;var s=value<0||value===0&&1/value<0?1:0;value=Math.abs(value);if(isNaN(value)||value===Infinity){m=isNaN(value)?1:0;e=eMax;}else {e=Math.floor(Math.log(value)/Math.LN2);if(value*(c=Math.pow(2,-e))<1){e--;c*=2;}if(e+eBias>=1){value+=rt/c;}else {value+=rt*Math.pow(2,1-eBias);}if(value*c>=2){e++;c/=2;}if(e+eBias>=eMax){m=0;e=eMax;}else if(e+eBias>=1){m=(value*c-1)*Math.pow(2,mLen);e=e+eBias;}else {m=value*Math.pow(2,eBias-1)*Math.pow(2,mLen);e=0;}}for(;mLen>=8;buffer[offset+i]=m&255,i+=d,m/=256,mLen-=8){}e=e<<mLen|m;eLen+=mLen;for(;eLen>0;buffer[offset+i]=e&255,i+=d,e/=256,eLen-=8){}buffer[offset+i-d]|=s*128;};},{}],18:[function(require,module,exports){var process=module.exports={};var cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}(function(){try{if(typeof setTimeout==="function"){cachedSetTimeout=setTimeout;}else {cachedSetTimeout=defaultSetTimout;}}catch(e){cachedSetTimeout=defaultSetTimout;}try{if(typeof clearTimeout==="function"){cachedClearTimeout=clearTimeout;}else {cachedClearTimeout=defaultClearTimeout;}}catch(e){cachedClearTimeout=defaultClearTimeout;}})();function runTimeout(fun){if(cachedSetTimeout===setTimeout){return setTimeout(fun,0)}if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0)}try{return cachedSetTimeout(fun,0)}catch(e){try{return cachedSetTimeout.call(null,fun,0)}catch(e){return cachedSetTimeout.call(this,fun,0)}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){return clearTimeout(marker)}if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker)}try{return cachedClearTimeout(marker)}catch(e){try{return cachedClearTimeout.call(null,marker)}catch(e){return cachedClearTimeout.call(this,marker)}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue);}else {queueIndex=-1;}if(queue.length){drainQueue();}}function drainQueue(){if(draining){return}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run();}}queueIndex=-1;len=queue.length;}currentQueue=null;draining=false;runClearTimeout(timeout);}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i];}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue);}};function Item(fun,array){this.fun=fun;this.array=array;}Item.prototype.run=function(){this.fun.apply(null,this.array);};process.title="browser";process.browser=true;process.env={};process.argv=[];process.version="";process.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.prependListener=noop;process.prependOnceListener=noop;process.listeners=function(name){return []};process.binding=function(name){throw new Error("process.binding is not supported")};process.cwd=function(){return "/"};process.chdir=function(dir){throw new Error("process.chdir is not supported")};process.umask=function(){return 0};},{}],19:[function(require,module,exports){(function(global){(function(){let promise;module.exports=typeof queueMicrotask==="function"?queueMicrotask.bind(typeof window!=="undefined"?window:global):cb=>(promise||(promise=Promise.resolve())).then(cb).catch(err=>setTimeout(()=>{throw err},0));}).call(this);}).call(this,typeof commonjsGlobal!=="undefined"?commonjsGlobal:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{});},{}],20:[function(require,module,exports){const{AbortError,codes}=require("../../ours/errors");const{isNodeStream,isWebStream,kControllerErrorFunction}=require("./utils");const eos=require("./end-of-stream");const{ERR_INVALID_ARG_TYPE}=codes;const validateAbortSignal=(signal,name)=>{if(typeof signal!=="object"||!("aborted"in signal)){throw new ERR_INVALID_ARG_TYPE(name,"AbortSignal",signal)}};module.exports.addAbortSignal=function addAbortSignal(signal,stream){validateAbortSignal(signal,"signal");if(!isNodeStream(stream)&&!isWebStream(stream)){throw new ERR_INVALID_ARG_TYPE("stream",["ReadableStream","WritableStream","Stream"],stream)}return module.exports.addAbortSignalNoValidate(signal,stream)};module.exports.addAbortSignalNoValidate=function(signal,stream){if(typeof signal!=="object"||!("aborted"in signal)){return stream}const onAbort=isNodeStream(stream)?()=>{stream.destroy(new AbortError(undefined,{cause:signal.reason}));}:()=>{stream[kControllerErrorFunction](new AbortError(undefined,{cause:signal.reason}));};if(signal.aborted){onAbort();}else {signal.addEventListener("abort",onAbort);eos(stream,()=>signal.removeEventListener("abort",onAbort));}return stream};},{"../../ours/errors":39,"./end-of-stream":26,"./utils":35}],21:[function(require,module,exports){const{StringPrototypeSlice,SymbolIterator,TypedArrayPrototypeSet,Uint8Array}=require("../../ours/primordials");const{Buffer}=require("buffer");const{inspect}=require("../../ours/util");module.exports=class BufferList{constructor(){this.head=null;this.tail=null;this.length=0;}push(v){const entry={data:v,next:null};if(this.length>0)this.tail.next=entry;else this.head=entry;this.tail=entry;++this.length;}unshift(v){const entry={data:v,next:this.head};if(this.length===0)this.tail=entry;this.head=entry;++this.length;}shift(){if(this.length===0)return;const ret=this.head.data;if(this.length===1)this.head=this.tail=null;else this.head=this.head.next;--this.length;return ret}clear(){this.head=this.tail=null;this.length=0;}join(s){if(this.length===0)return "";let p=this.head;let ret=""+p.data;while((p=p.next)!==null)ret+=s+p.data;return ret}concat(n){if(this.length===0)return Buffer.alloc(0);const ret=Buffer.allocUnsafe(n>>>0);let p=this.head;let i=0;while(p){TypedArrayPrototypeSet(ret,p.data,i);i+=p.data.length;p=p.next;}return ret}consume(n,hasStrings){const data=this.head.data;if(n<data.length){const slice=data.slice(0,n);this.head.data=data.slice(n);return slice}if(n===data.length){return this.shift()}return hasStrings?this._getString(n):this._getBuffer(n)}first(){return this.head.data}*[SymbolIterator](){for(let p=this.head;p;p=p.next){yield p.data;}}_getString(n){let ret="";let p=this.head;let c=0;do{const str=p.data;if(n>str.length){ret+=str;n-=str.length;}else {if(n===str.length){ret+=str;++c;if(p.next)this.head=p.next;else this.head=this.tail=null;}else {ret+=StringPrototypeSlice(str,0,n);this.head=p;p.data=StringPrototypeSlice(str,n);}break}++c;}while((p=p.next)!==null);this.length-=c;return ret}_getBuffer(n){const ret=Buffer.allocUnsafe(n);const retLen=n;let p=this.head;let c=0;do{const buf=p.data;if(n>buf.length){TypedArrayPrototypeSet(ret,buf,retLen-n);n-=buf.length;}else {if(n===buf.length){TypedArrayPrototypeSet(ret,buf,retLen-n);++c;if(p.next)this.head=p.next;else this.head=this.tail=null;}else {TypedArrayPrototypeSet(ret,new Uint8Array(buf.buffer,buf.byteOffset,n),retLen-n);this.head=p;p.data=buf.slice(n);}break}++c;}while((p=p.next)!==null);this.length-=c;return ret}[Symbol.for("nodejs.util.inspect.custom")](_,options){return inspect(this,{...options,depth:0,customInspect:false})}};},{"../../ours/primordials":40,"../../ours/util":41,buffer:15}],22:[function(require,module,exports){const{pipeline}=require("./pipeline");const Duplex=require("./duplex");const{destroyer}=require("./destroy");const{isNodeStream,isReadable,isWritable,isWebStream,isTransformStream,isWritableStream,isReadableStream}=require("./utils");const{AbortError,codes:{ERR_INVALID_ARG_VALUE,ERR_MISSING_ARGS}}=require("../../ours/errors");const eos=require("./end-of-stream");module.exports=function compose(...streams){if(streams.length===0){throw new ERR_MISSING_ARGS("streams")}if(streams.length===1){return Duplex.from(streams[0])}const orgStreams=[...streams];if(typeof streams[0]==="function"){streams[0]=Duplex.from(streams[0]);}if(typeof streams[streams.length-1]==="function"){const idx=streams.length-1;streams[idx]=Duplex.from(streams[idx]);}for(let n=0;n<streams.length;++n){if(!isNodeStream(streams[n])&&!isWebStream(streams[n])){continue}if(n<streams.length-1&&!(isReadable(streams[n])||isReadableStream(streams[n])||isTransformStream(streams[n]))){throw new ERR_INVALID_ARG_VALUE(`streams[${n}]`,orgStreams[n],"must be readable")}if(n>0&&!(isWritable(streams[n])||isWritableStream(streams[n])||isTransformStream(streams[n]))){throw new ERR_INVALID_ARG_VALUE(`streams[${n}]`,orgStreams[n],"must be writable")}}let ondrain;let onfinish;let onreadable;let onclose;let d;function onfinished(err){const cb=onclose;onclose=null;if(cb){cb(err);}else if(err){d.destroy(err);}else if(!readable&&!writable){d.destroy();}}const head=streams[0];const tail=pipeline(streams,onfinished);const writable=!!(isWritable(head)||isWritableStream(head)||isTransformStream(head));const readable=!!(isReadable(tail)||isReadableStream(tail)||isTransformStream(tail));d=new Duplex({writableObjectMode:!!(head!==null&&head!==undefined&&head.writableObjectMode),readableObjectMode:!!(tail!==null&&tail!==undefined&&tail.writableObjectMode),writable:writable,readable:readable});if(writable){if(isNodeStream(head)){d._write=function(chunk,encoding,callback){if(head.write(chunk,encoding)){callback();}else {ondrain=callback;}};d._final=function(callback){head.end();onfinish=callback;};head.on("drain",function(){if(ondrain){const cb=ondrain;ondrain=null;cb();}});}else if(isWebStream(head)){const writable=isTransformStream(head)?head.writable:head;const writer=writable.getWriter();d._write=async function(chunk,encoding,callback){try{await writer.ready;writer.write(chunk).catch(()=>{});callback();}catch(err){callback(err);}};d._final=async function(callback){try{await writer.ready;writer.close().catch(()=>{});onfinish=callback;}catch(err){callback(err);}};}const toRead=isTransformStream(tail)?tail.readable:tail;eos(toRead,()=>{if(onfinish){const cb=onfinish;onfinish=null;cb();}});}if(readable){if(isNodeStream(tail)){tail.on("readable",function(){if(onreadable){const cb=onreadable;onreadable=null;cb();}});tail.on("end",function(){d.push(null);});d._read=function(){while(true){const buf=tail.read();if(buf===null){onreadable=d._read;return}if(!d.push(buf)){return}}};}else if(isWebStream(tail)){const readable=isTransformStream(tail)?tail.readable:tail;const reader=readable.getReader();d._read=async function(){while(true){try{const{value,done}=await reader.read();if(!d.push(value)){return}if(done){d.push(null);return}}catch{return}}};}}d._destroy=function(err,callback){if(!err&&onclose!==null){err=new AbortError;}onreadable=null;ondrain=null;onfinish=null;if(onclose===null){callback(err);}else {onclose=callback;if(isNodeStream(tail)){destroyer(tail,err);}}};return d};},{"../../ours/errors":39,"./destroy":23,"./duplex":24,"./end-of-stream":26,"./pipeline":31,"./utils":35}],23:[function(require,module,exports){const process=require("process/");const{aggregateTwoErrors,codes:{ERR_MULTIPLE_CALLBACK},AbortError}=require("../../ours/errors");const{Symbol}=require("../../ours/primordials");const{kDestroyed,isDestroyed,isFinished,isServerRequest}=require("./utils");const kDestroy=Symbol("kDestroy");const kConstruct=Symbol("kConstruct");function checkError(err,w,r){if(err){if(w&&!w.errored){w.errored=err;}if(r&&!r.errored){r.errored=err;}}}function destroy(err,cb){const r=this._readableState;const w=this._writableState;const s=w||r;if(w!==null&&w!==undefined&&w.destroyed||r!==null&&r!==undefined&&r.destroyed){if(typeof cb==="function"){cb();}return this}checkError(err,w,r);if(w){w.destroyed=true;}if(r){r.destroyed=true;}if(!s.constructed){this.once(kDestroy,function(er){_destroy(this,aggregateTwoErrors(er,err),cb);});}else {_destroy(this,err,cb);}return this}function _destroy(self,err,cb){let called=false;function onDestroy(err){if(called){return}called=true;const r=self._readableState;const w=self._writableState;checkError(err,w,r);if(w){w.closed=true;}if(r){r.closed=true;}if(typeof cb==="function"){cb(err);}if(err){process.nextTick(emitErrorCloseNT,self,err);}else {process.nextTick(emitCloseNT,self);}}try{self._destroy(err||null,onDestroy);}catch(err){onDestroy(err);}}function emitErrorCloseNT(self,err){emitErrorNT(self,err);emitCloseNT(self);}function emitCloseNT(self){const r=self._readableState;const w=self._writableState;if(w){w.closeEmitted=true;}if(r){r.closeEmitted=true;}if(w!==null&&w!==undefined&&w.emitClose||r!==null&&r!==undefined&&r.emitClose){self.emit("close");}}function emitErrorNT(self,err){const r=self._readableState;const w=self._writableState;if(w!==null&&w!==undefined&&w.errorEmitted||r!==null&&r!==undefined&&r.errorEmitted){return}if(w){w.errorEmitted=true;}if(r){r.errorEmitted=true;}self.emit("error",err);}function undestroy(){const r=this._readableState;const w=this._writableState;if(r){r.constructed=true;r.closed=false;r.closeEmitted=false;r.destroyed=false;r.errored=null;r.errorEmitted=false;r.reading=false;r.ended=r.readable===false;r.endEmitted=r.readable===false;}if(w){w.constructed=true;w.destroyed=false;w.closed=false;w.closeEmitted=false;w.errored=null;w.errorEmitted=false;w.finalCalled=false;w.prefinished=false;w.ended=w.writable===false;w.ending=w.writable===false;w.finished=w.writable===false;}}function errorOrDestroy(stream,err,sync){const r=stream._readableState;const w=stream._writableState;if(w!==null&&w!==undefined&&w.destroyed||r!==null&&r!==undefined&&r.destroyed){return this}if(r!==null&&r!==undefined&&r.autoDestroy||w!==null&&w!==undefined&&w.autoDestroy)stream.destroy(err);else if(err){if(w&&!w.errored){w.errored=err;}if(r&&!r.errored){r.errored=err;}if(sync){process.nextTick(emitErrorNT,stream,err);}else {emitErrorNT(stream,err);}}}function construct(stream,cb){if(typeof stream._construct!=="function"){return}const r=stream._readableState;const w=stream._writableState;if(r){r.constructed=false;}if(w){w.constructed=false;}stream.once(kConstruct,cb);if(stream.listenerCount(kConstruct)>1){return}process.nextTick(constructNT,stream);}function constructNT(stream){let called=false;function onConstruct(err){if(called){errorOrDestroy(stream,err!==null&&err!==undefined?err:new ERR_MULTIPLE_CALLBACK);return}called=true;const r=stream._readableState;const w=stream._writableState;const s=w||r;if(r){r.constructed=true;}if(w){w.constructed=true;}if(s.destroyed){stream.emit(kDestroy,err);}else if(err){errorOrDestroy(stream,err,true);}else {process.nextTick(emitConstructNT,stream);}}try{stream._construct(err=>{process.nextTick(onConstruct,err);});}catch(err){process.nextTick(onConstruct,err);}}function emitConstructNT(stream){stream.emit(kConstruct);}function isRequest(stream){return (stream===null||stream===undefined?undefined:stream.setHeader)&&typeof stream.abort==="function"}function emitCloseLegacy(stream){stream.emit("close");}function emitErrorCloseLegacy(stream,err){stream.emit("error",err);process.nextTick(emitCloseLegacy,stream);}function destroyer(stream,err){if(!stream||isDestroyed(stream)){return}if(!err&&!isFinished(stream)){err=new AbortError;}if(isServerRequest(stream)){stream.socket=null;stream.destroy(err);}else if(isRequest(stream)){stream.abort();}else if(isRequest(stream.req)){stream.req.abort();}else if(typeof stream.destroy==="function"){stream.destroy(err);}else if(typeof stream.close==="function"){stream.close();}else if(err){process.nextTick(emitErrorCloseLegacy,stream,err);}else {process.nextTick(emitCloseLegacy,stream);}if(!stream.destroyed){stream[kDestroyed]=true;}}module.exports={construct:construct,destroyer:destroyer,destroy:destroy,undestroy:undestroy,errorOrDestroy:errorOrDestroy};},{"../../ours/errors":39,"../../ours/primordials":40,"./utils":35,"process/":18}],24:[function(require,module,exports){const{ObjectDefineProperties,ObjectGetOwnPropertyDescriptor,ObjectKeys,ObjectSetPrototypeOf}=require("../../ours/primordials");module.exports=Duplex;const Readable=require("./readable");const Writable=require("./writable");ObjectSetPrototypeOf(Duplex.prototype,Readable.prototype);ObjectSetPrototypeOf(Duplex,Readable);{const keys=ObjectKeys(Writable.prototype);for(let i=0;i<keys.length;i++){const method=keys[i];if(!Duplex.prototype[method])Duplex.prototype[method]=Writable.prototype[method];}}function Duplex(options){if(!(this instanceof Duplex))return new Duplex(options);Readable.call(this,options);Writable.call(this,options);if(options){this.allowHalfOpen=options.allowHalfOpen!==false;if(options.readable===false){this._readableState.readable=false;this._readableState.ended=true;this._readableState.endEmitted=true;}if(options.writable===false){this._writableState.writable=false;this._writableState.ending=true;this._writableState.ended=true;this._writableState.finished=true;}}else {this.allowHalfOpen=true;}}ObjectDefineProperties(Duplex.prototype,{writable:{__proto__:null,...ObjectGetOwnPropertyDescriptor(Writable.prototype,"writable")},writableHighWaterMark:{__proto__:null,...ObjectGetOwnPropertyDescriptor(Writable.prototype,"writableHighWaterMark")},writableObjectMode:{__proto__:null,...ObjectGetOwnPropertyDescriptor(Writable.prototype,"writableObjectMode")},writableBuffer:{__proto__:null,...ObjectGetOwnPropertyDescriptor(Writable.prototype,"writableBuffer")},writableLength:{__proto__:null,...ObjectGetOwnPropertyDescriptor(Writable.prototype,"writableLength")},writableFinished:{__proto__:null,...ObjectGetOwnPropertyDescriptor(Writable.prototype,"writableFinished")},writableCorked:{__proto__:null,...ObjectGetOwnPropertyDescriptor(Writable.prototype,"writableCorked")},writableEnded:{__proto__:null,...ObjectGetOwnPropertyDescriptor(Writable.prototype,"writableEnded")},writableNeedDrain:{__proto__:null,...ObjectGetOwnPropertyDescriptor(Writable.prototype,"writableNeedDrain")},destroyed:{__proto__:null,get(){if(this._readableState===undefined||this._writableState===undefined){return false}return this._readableState.destroyed&&this._writableState.destroyed},set(value){if(this._readableState&&this._writableState){this._readableState.destroyed=value;this._writableState.destroyed=value;}}}});let webStreamsAdapters;function lazyWebStreams(){if(webStreamsAdapters===undefined)webStreamsAdapters={};return webStreamsAdapters}Duplex.fromWeb=function(pair,options){return lazyWebStreams().newStreamDuplexFromReadableWritablePair(pair,options)};Duplex.toWeb=function(duplex){return lazyWebStreams().newReadableWritablePairFromDuplex(duplex)};let duplexify;Duplex.from=function(body){if(!duplexify){duplexify=require("./duplexify");}return duplexify(body,"body")};},{"../../ours/primordials":40,"./duplexify":25,"./readable":32,"./writable":36}],25:[function(require,module,exports){const process=require("process/");const bufferModule=require("buffer");const{isReadable,isWritable,isIterable,isNodeStream,isReadableNodeStream,isWritableNodeStream,isDuplexNodeStream}=require("./utils");const eos=require("./end-of-stream");const{AbortError,codes:{ERR_INVALID_ARG_TYPE,ERR_INVALID_RETURN_VALUE}}=require("../../ours/errors");const{destroyer}=require("./destroy");const Duplex=require("./duplex");const Readable=require("./readable");const{createDeferredPromise}=require("../../ours/util");const from=require("./from");const Blob=globalThis.Blob||bufferModule.Blob;const isBlob=typeof Blob!=="undefined"?function isBlob(b){return b instanceof Blob}:function isBlob(b){return false};const AbortController=globalThis.AbortController||require("abort-controller").AbortController;const{FunctionPrototypeCall}=require("../../ours/primordials");class Duplexify extends Duplex{constructor(options){super(options);if((options===null||options===undefined?undefined:options.readable)===false){this._readableState.readable=false;this._readableState.ended=true;this._readableState.endEmitted=true;}if((options===null||options===undefined?undefined:options.writable)===false){this._writableState.writable=false;this._writableState.ending=true;this._writableState.ended=true;this._writableState.finished=true;}}}module.exports=function duplexify(body,name){if(isDuplexNodeStream(body)){return body}if(isReadableNodeStream(body)){return _duplexify({readable:body})}if(isWritableNodeStream(body)){return _duplexify({writable:body})}if(isNodeStream(body)){return _duplexify({writable:false,readable:false})}if(typeof body==="function"){const{value,write,final,destroy}=fromAsyncGen(body);if(isIterable(value)){return from(Duplexify,value,{objectMode:true,write:write,final:final,destroy:destroy})}const then=value===null||value===undefined?undefined:value.then;if(typeof then==="function"){let d;const promise=FunctionPrototypeCall(then,value,val=>{if(val!=null){throw new ERR_INVALID_RETURN_VALUE("nully","body",val)}},err=>{destroyer(d,err);});return d=new Duplexify({objectMode:true,readable:false,write:write,final(cb){final(async()=>{try{await promise;process.nextTick(cb,null);}catch(err){process.nextTick(cb,err);}});},destroy:destroy})}throw new ERR_INVALID_RETURN_VALUE("Iterable, AsyncIterable or AsyncFunction",name,value)}if(isBlob(body)){return duplexify(body.arrayBuffer())}if(isIterable(body)){return from(Duplexify,body,{objectMode:true,writable:false})}if(typeof(body===null||body===undefined?undefined:body.writable)==="object"||typeof(body===null||body===undefined?undefined:body.readable)==="object"){const readable=body!==null&&body!==undefined&&body.readable?isReadableNodeStream(body===null||body===undefined?undefined:body.readable)?body===null||body===undefined?undefined:body.readable:duplexify(body.readable):undefined;const writable=body!==null&&body!==undefined&&body.writable?isWritableNodeStream(body===null||body===undefined?undefined:body.writable)?body===null||body===undefined?undefined:body.writable:duplexify(body.writable):undefined;return _duplexify({readable:readable,writable:writable})}const then=body===null||body===undefined?undefined:body.then;if(typeof then==="function"){let d;FunctionPrototypeCall(then,body,val=>{if(val!=null){d.push(val);}d.push(null);},err=>{destroyer(d,err);});return d=new Duplexify({objectMode:true,writable:false,read(){}})}throw new ERR_INVALID_ARG_TYPE(name,["Blob","ReadableStream","WritableStream","Stream","Iterable","AsyncIterable","Function","{ readable, writable } pair","Promise"],body)};function fromAsyncGen(fn){let{promise,resolve}=createDeferredPromise();const ac=new AbortController;const signal=ac.signal;const value=fn(async function*(){while(true){const _promise=promise;promise=null;const{chunk,done,cb}=await _promise;process.nextTick(cb);if(done)return;if(signal.aborted)throw new AbortError(undefined,{cause:signal.reason});({promise,resolve}=createDeferredPromise());yield chunk;}}(),{signal:signal});return {value:value,write(chunk,encoding,cb){const _resolve=resolve;resolve=null;_resolve({chunk:chunk,done:false,cb:cb});},final(cb){const _resolve=resolve;resolve=null;_resolve({done:true,cb:cb});},destroy(err,cb){ac.abort();cb(err);}}}function _duplexify(pair){const r=pair.readable&&typeof pair.readable.read!=="function"?Readable.wrap(pair.readable):pair.readable;const w=pair.writable;let readable=!!isReadable(r);let writable=!!isWritable(w);let ondrain;let onfinish;let onreadable;let onclose;let d;function onfinished(err){const cb=onclose;onclose=null;if(cb){cb(err);}else if(err){d.destroy(err);}}d=new Duplexify({readableObjectMode:!!(r!==null&&r!==undefined&&r.readableObjectMode),writableObjectMode:!!(w!==null&&w!==undefined&&w.writableObjectMode),readable:readable,writable:writable});if(writable){eos(w,err=>{writable=false;if(err){destroyer(r,err);}onfinished(err);});d._write=function(chunk,encoding,callback){if(w.write(chunk,encoding)){callback();}else {ondrain=callback;}};d._final=function(callback){w.end();onfinish=callback;};w.on("drain",function(){if(ondrain){const cb=ondrain;ondrain=null;cb();}});w.on("finish",function(){if(onfinish){const cb=onfinish;onfinish=null;cb();}});}if(readable){eos(r,err=>{readable=false;if(err){destroyer(r,err);}onfinished(err);});r.on("readable",function(){if(onreadable){const cb=onreadable;onreadable=null;cb();}});r.on("end",function(){d.push(null);});d._read=function(){while(true){const buf=r.read();if(buf===null){onreadable=d._read;return}if(!d.push(buf)){return}}};}d._destroy=function(err,callback){if(!err&&onclose!==null){err=new AbortError;}onreadable=null;ondrain=null;onfinish=null;if(onclose===null){callback(err);}else {onclose=callback;destroyer(w,err);destroyer(r,err);}};return d}},{"../../ours/errors":39,"../../ours/primordials":40,"../../ours/util":41,"./destroy":23,"./duplex":24,"./end-of-stream":26,"./from":27,"./readable":32,"./utils":35,"abort-controller":11,buffer:15,"process/":18}],26:[function(require,module,exports){const process=require("process/");const{AbortError,codes}=require("../../ours/errors");const{ERR_INVALID_ARG_TYPE,ERR_STREAM_PREMATURE_CLOSE}=codes;const{kEmptyObject,once}=require("../../ours/util");const{validateAbortSignal,validateFunction,validateObject,validateBoolean}=require("../validators");const{Promise,PromisePrototypeThen}=require("../../ours/primordials");const{isClosed,isReadable,isReadableNodeStream,isReadableStream,isReadableFinished,isReadableErrored,isWritable,isWritableNodeStream,isWritableStream,isWritableFinished,isWritableErrored,isNodeStream,willEmitClose:_willEmitClose,kIsClosedPromise}=require("./utils");function isRequest(stream){return stream.setHeader&&typeof stream.abort==="function"}const nop=()=>{};function eos(stream,options,callback){var _options$readable,_options$writable;if(arguments.length===2){callback=options;options=kEmptyObject;}else if(options==null){options=kEmptyObject;}else {validateObject(options,"options");}validateFunction(callback,"callback");validateAbortSignal(options.signal,"options.signal");callback=once(callback);if(isReadableStream(stream)||isWritableStream(stream)){return eosWeb(stream,options,callback)}if(!isNodeStream(stream)){throw new ERR_INVALID_ARG_TYPE("stream",["ReadableStream","WritableStream","Stream"],stream)}const readable=(_options$readable=options.readable)!==null&&_options$readable!==undefined?_options$readable:isReadableNodeStream(stream);const writable=(_options$writable=options.writable)!==null&&_options$writable!==undefined?_options$writable:isWritableNodeStream(stream);const wState=stream._writableState;const rState=stream._readableState;const onlegacyfinish=()=>{if(!stream.writable){onfinish();}};let willEmitClose=_willEmitClose(stream)&&isReadableNodeStream(stream)===readable&&isWritableNodeStream(stream)===writable;let writableFinished=isWritableFinished(stream,false);const onfinish=()=>{writableFinished=true;if(stream.destroyed){willEmitClose=false;}if(willEmitClose&&(!stream.readable||readable)){return}if(!readable||readableFinished){callback.call(stream);}};let readableFinished=isReadableFinished(stream,false);const onend=()=>{readableFinished=true;if(stream.destroyed){willEmitClose=false;}if(willEmitClose&&(!stream.writable||writable)){return}if(!writable||writableFinished){callback.call(stream);}};const onerror=err=>{callback.call(stream,err);};let closed=isClosed(stream);const onclose=()=>{closed=true;const errored=isWritableErrored(stream)||isReadableErrored(stream);if(errored&&typeof errored!=="boolean"){return callback.call(stream,errored)}if(readable&&!readableFinished&&isReadableNodeStream(stream,true)){if(!isReadableFinished(stream,false))return callback.call(stream,new ERR_STREAM_PREMATURE_CLOSE)}if(writable&&!writableFinished){if(!isWritableFinished(stream,false))return callback.call(stream,new ERR_STREAM_PREMATURE_CLOSE)}callback.call(stream);};const onclosed=()=>{closed=true;const errored=isWritableErrored(stream)||isReadableErrored(stream);if(errored&&typeof errored!=="boolean"){return callback.call(stream,errored)}callback.call(stream);};const onrequest=()=>{stream.req.on("finish",onfinish);};if(isRequest(stream)){stream.on("complete",onfinish);if(!willEmitClose){stream.on("abort",onclose);}if(stream.req){onrequest();}else {stream.on("request",onrequest);}}else if(writable&&!wState){stream.on("end",onlegacyfinish);stream.on("close",onlegacyfinish);}if(!willEmitClose&&typeof stream.aborted==="boolean"){stream.on("aborted",onclose);}stream.on("end",onend);stream.on("finish",onfinish);if(options.error!==false){stream.on("error",onerror);}stream.on("close",onclose);if(closed){process.nextTick(onclose);}else if(wState!==null&&wState!==undefined&&wState.errorEmitted||rState!==null&&rState!==undefined&&rState.errorEmitted){if(!willEmitClose){process.nextTick(onclosed);}}else if(!readable&&(!willEmitClose||isReadable(stream))&&(writableFinished||isWritable(stream)===false)){process.nextTick(onclosed);}else if(!writable&&(!willEmitClose||isWritable(stream))&&(readableFinished||isReadable(stream)===false)){process.nextTick(onclosed);}else if(rState&&stream.req&&stream.aborted){process.nextTick(onclosed);}const cleanup=()=>{callback=nop;stream.removeListener("aborted",onclose);stream.removeListener("complete",onfinish);stream.removeListener("abort",onclose);stream.removeListener("request",onrequest);if(stream.req)stream.req.removeListener("finish",onfinish);stream.removeListener("end",onlegacyfinish);stream.removeListener("close",onlegacyfinish);stream.removeListener("finish",onfinish);stream.removeListener("end",onend);stream.removeListener("error",onerror);stream.removeListener("close",onclose);};if(options.signal&&!closed){const abort=()=>{const endCallback=callback;cleanup();endCallback.call(stream,new AbortError(undefined,{cause:options.signal.reason}));};if(options.signal.aborted){process.nextTick(abort);}else {const originalCallback=callback;callback=once((...args)=>{options.signal.removeEventListener("abort",abort);originalCallback.apply(stream,args);});options.signal.addEventListener("abort",abort);}}return cleanup}function eosWeb(stream,options,callback){let isAborted=false;let abort=nop;if(options.signal){abort=()=>{isAborted=true;callback.call(stream,new AbortError(undefined,{cause:options.signal.reason}));};if(options.signal.aborted){process.nextTick(abort);}else {const originalCallback=callback;callback=once((...args)=>{options.signal.removeEventListener("abort",abort);originalCallback.apply(stream,args);});options.signal.addEventListener("abort",abort);}}const resolverFn=(...args)=>{if(!isAborted){process.nextTick(()=>callback.apply(stream,args));}};PromisePrototypeThen(stream[kIsClosedPromise].promise,resolverFn,resolverFn);return nop}function finished(stream,opts){var _opts;let autoCleanup=false;if(opts===null){opts=kEmptyObject;}if((_opts=opts)!==null&&_opts!==undefined&&_opts.cleanup){validateBoolean(opts.cleanup,"cleanup");autoCleanup=opts.cleanup;}return new Promise((resolve,reject)=>{const cleanup=eos(stream,opts,err=>{if(autoCleanup){cleanup();}if(err){reject(err);}else {resolve();}});})}module.exports=eos;module.exports.finished=finished;},{"../../ours/errors":39,"../../ours/primordials":40,"../../ours/util":41,"../validators":37,"./utils":35,"process/":18}],27:[function(require,module,exports){const process=require("process/");const{PromisePrototypeThen,SymbolAsyncIterator,SymbolIterator}=require("../../ours/primordials");const{Buffer}=require("buffer");const{ERR_INVALID_ARG_TYPE,ERR_STREAM_NULL_VALUES}=require("../../ours/errors").codes;function from(Readable,iterable,opts){let iterator;if(typeof iterable==="string"||iterable instanceof Buffer){return new Readable({objectMode:true,...opts,read(){this.push(iterable);this.push(null);}})}let isAsync;if(iterable&&iterable[SymbolAsyncIterator]){isAsync=true;iterator=iterable[SymbolAsyncIterator]();}else if(iterable&&iterable[SymbolIterator]){isAsync=false;iterator=iterable[SymbolIterator]();}else {throw new ERR_INVALID_ARG_TYPE("iterable",["Iterable"],iterable)}const readable=new Readable({objectMode:true,highWaterMark:1,...opts});let reading=false;readable._read=function(){if(!reading){reading=true;next();}};readable._destroy=function(error,cb){PromisePrototypeThen(close(error),()=>process.nextTick(cb,error),e=>process.nextTick(cb,e||error));};async function close(error){const hadError=error!==undefined&&error!==null;const hasThrow=typeof iterator.throw==="function";if(hadError&&hasThrow){const{value,done}=await iterator.throw(error);await value;if(done){return}}if(typeof iterator.return==="function"){const{value}=await iterator.return();await value;}}async function next(){for(;;){try{const{value,done}=isAsync?await iterator.next():iterator.next();if(done){readable.push(null);}else {const res=value&&typeof value.then==="function"?await value:value;if(res===null){reading=false;throw new ERR_STREAM_NULL_VALUES}else if(readable.push(res)){continue}else {reading=false;}}}catch(err){readable.destroy(err);}break}}return readable}module.exports=from;},{"../../ours/errors":39,"../../ours/primordials":40,buffer:15,"process/":18}],28:[function(require,module,exports){const{ArrayIsArray,ObjectSetPrototypeOf}=require("../../ours/primordials");const{EventEmitter:EE}=require("events");function Stream(opts){EE.call(this,opts);}ObjectSetPrototypeOf(Stream.prototype,EE.prototype);ObjectSetPrototypeOf(Stream,EE);Stream.prototype.pipe=function(dest,options){const source=this;function ondata(chunk){if(dest.writable&&dest.write(chunk)===false&&source.pause){source.pause();}}source.on("data",ondata);function ondrain(){if(source.readable&&source.resume){source.resume();}}dest.on("drain",ondrain);if(!dest._isStdio&&(!options||options.end!==false)){source.on("end",onend);source.on("close",onclose);}let didOnEnd=false;function onend(){if(didOnEnd)return;didOnEnd=true;dest.end();}function onclose(){if(didOnEnd)return;didOnEnd=true;if(typeof dest.destroy==="function")dest.destroy();}function onerror(er){cleanup();if(EE.listenerCount(this,"error")===0){this.emit("error",er);}}prependListener(source,"error",onerror);prependListener(dest,"error",onerror);function cleanup(){source.removeListener("data",ondata);dest.removeListener("drain",ondrain);source.removeListener("end",onend);source.removeListener("close",onclose);source.removeListener("error",onerror);dest.removeListener("error",onerror);source.removeListener("end",cleanup);source.removeListener("close",cleanup);dest.removeListener("close",cleanup);}source.on("end",cleanup);source.on("close",cleanup);dest.on("close",cleanup);dest.emit("pipe",source);return dest};function prependListener(emitter,event,fn){if(typeof emitter.prependListener==="function")return emitter.prependListener(event,fn);if(!emitter._events||!emitter._events[event])emitter.on(event,fn);else if(ArrayIsArray(emitter._events[event]))emitter._events[event].unshift(fn);else emitter._events[event]=[fn,emitter._events[event]];}module.exports={Stream:Stream,prependListener:prependListener};},{"../../ours/primordials":40,events:16}],29:[function(require,module,exports){const AbortController=globalThis.AbortController||require("abort-controller").AbortController;const{codes:{ERR_INVALID_ARG_VALUE,ERR_INVALID_ARG_TYPE,ERR_MISSING_ARGS,ERR_OUT_OF_RANGE},AbortError}=require("../../ours/errors");const{validateAbortSignal,validateInteger,validateObject}=require("../validators");const kWeakHandler=require("../../ours/primordials").Symbol("kWeak");const{finished}=require("./end-of-stream");const staticCompose=require("./compose");const{addAbortSignalNoValidate}=require("./add-abort-signal");const{isWritable,isNodeStream}=require("./utils");const{ArrayPrototypePush,MathFloor,Number,NumberIsNaN,Promise,PromiseReject,PromisePrototypeThen,Symbol}=require("../../ours/primordials");const kEmpty=Symbol("kEmpty");const kEof=Symbol("kEof");function compose(stream,options){if(options!=null){validateObject(options,"options");}if((options===null||options===undefined?undefined:options.signal)!=null){validateAbortSignal(options.signal,"options.signal");}if(isNodeStream(stream)&&!isWritable(stream)){throw new ERR_INVALID_ARG_VALUE("stream",stream,"must be writable")}const composedStream=staticCompose(this,stream);if(options!==null&&options!==undefined&&options.signal){addAbortSignalNoValidate(options.signal,composedStream);}return composedStream}function map(fn,options){if(typeof fn!=="function"){throw new ERR_INVALID_ARG_TYPE("fn",["Function","AsyncFunction"],fn)}if(options!=null){validateObject(options,"options");}if((options===null||options===undefined?undefined:options.signal)!=null){validateAbortSignal(options.signal,"options.signal");}let concurrency=1;if((options===null||options===undefined?undefined:options.concurrency)!=null){concurrency=MathFloor(options.concurrency);}validateInteger(concurrency,"concurrency",1);return async function*map(){var _options$signal,_options$signal2;const ac=new AbortController;const stream=this;const queue=[];const signal=ac.signal;const signalOpt={signal:signal};const abort=()=>ac.abort();if(options!==null&&options!==undefined&&(_options$signal=options.signal)!==null&&_options$signal!==undefined&&_options$signal.aborted){abort();}options===null||options===undefined?undefined:(_options$signal2=options.signal)===null||_options$signal2===undefined?undefined:_options$signal2.addEventListener("abort",abort);let next;let resume;let done=false;function onDone(){done=true;}async function pump(){try{for await(let val of stream){var _val;if(done){return}if(signal.aborted){throw new AbortError}try{val=fn(val,signalOpt);}catch(err){val=PromiseReject(err);}if(val===kEmpty){continue}if(typeof((_val=val)===null||_val===undefined?undefined:_val.catch)==="function"){val.catch(onDone);}queue.push(val);if(next){next();next=null;}if(!done&&queue.length&&queue.length>=concurrency){await new Promise(resolve=>{resume=resolve;});}}queue.push(kEof);}catch(err){const val=PromiseReject(err);PromisePrototypeThen(val,undefined,onDone);queue.push(val);}finally{var _options$signal3;done=true;if(next){next();next=null;}options===null||options===undefined?undefined:(_options$signal3=options.signal)===null||_options$signal3===undefined?undefined:_options$signal3.removeEventListener("abort",abort);}}pump();try{while(true){while(queue.length>0){const val=await queue[0];if(val===kEof){return}if(signal.aborted){throw new AbortError}if(val!==kEmpty){yield val;}queue.shift();if(resume){resume();resume=null;}}await new Promise(resolve=>{next=resolve;});}}finally{ac.abort();done=true;if(resume){resume();resume=null;}}}.call(this)}function asIndexedPairs(options=undefined){if(options!=null){validateObject(options,"options");}if((options===null||options===undefined?undefined:options.signal)!=null){validateAbortSignal(options.signal,"options.signal");}return async function*asIndexedPairs(){let index=0;for await(const val of this){var _options$signal4;if(options!==null&&options!==undefined&&(_options$signal4=options.signal)!==null&&_options$signal4!==undefined&&_options$signal4.aborted){throw new AbortError({cause:options.signal.reason})}yield [index++,val];}}.call(this)}async function some(fn,options=undefined){for await(const unused of filter.call(this,fn,options)){return true}return false}async function every(fn,options=undefined){if(typeof fn!=="function"){throw new ERR_INVALID_ARG_TYPE("fn",["Function","AsyncFunction"],fn)}return !await some.call(this,async(...args)=>{return !await fn(...args)},options)}async function find(fn,options){for await(const result of filter.call(this,fn,options)){return result}return undefined}async function forEach(fn,options){if(typeof fn!=="function"){throw new ERR_INVALID_ARG_TYPE("fn",["Function","AsyncFunction"],fn)}async function forEachFn(value,options){await fn(value,options);return kEmpty}for await(const unused of map.call(this,forEachFn,options));}function filter(fn,options){if(typeof fn!=="function"){throw new ERR_INVALID_ARG_TYPE("fn",["Function","AsyncFunction"],fn)}async function filterFn(value,options){if(await fn(value,options)){return value}return kEmpty}return map.call(this,filterFn,options)}class ReduceAwareErrMissingArgs extends ERR_MISSING_ARGS{constructor(){super("reduce");this.message="Reduce of an empty stream requires an initial value";}}async function reduce(reducer,initialValue,options){var _options$signal5;if(typeof reducer!=="function"){throw new ERR_INVALID_ARG_TYPE("reducer",["Function","AsyncFunction"],reducer)}if(options!=null){validateObject(options,"options");}if((options===null||options===undefined?undefined:options.signal)!=null){validateAbortSignal(options.signal,"options.signal");}let hasInitialValue=arguments.length>1;if(options!==null&&options!==undefined&&(_options$signal5=options.signal)!==null&&_options$signal5!==undefined&&_options$signal5.aborted){const err=new AbortError(undefined,{cause:options.signal.reason});this.once("error",()=>{});await finished(this.destroy(err));throw err}const ac=new AbortController;const signal=ac.signal;if(options!==null&&options!==undefined&&options.signal){const opts={once:true,[kWeakHandler]:this};options.signal.addEventListener("abort",()=>ac.abort(),opts);}let gotAnyItemFromStream=false;try{for await(const value of this){var _options$signal6;gotAnyItemFromStream=true;if(options!==null&&options!==undefined&&(_options$signal6=options.signal)!==null&&_options$signal6!==undefined&&_options$signal6.aborted){throw new AbortError}if(!hasInitialValue){initialValue=value;hasInitialValue=true;}else {initialValue=await reducer(initialValue,value,{signal:signal});}}if(!gotAnyItemFromStream&&!hasInitialValue){throw new ReduceAwareErrMissingArgs}}finally{ac.abort();}return initialValue}async function toArray(options){if(options!=null){validateObject(options,"options");}if((options===null||options===undefined?undefined:options.signal)!=null){validateAbortSignal(options.signal,"options.signal");}const result=[];for await(const val of this){var _options$signal7;if(options!==null&&options!==undefined&&(_options$signal7=options.signal)!==null&&_options$signal7!==undefined&&_options$signal7.aborted){throw new AbortError(undefined,{cause:options.signal.reason})}ArrayPrototypePush(result,val);}return result}function flatMap(fn,options){const values=map.call(this,fn,options);return async function*flatMap(){for await(const val of values){yield*val;}}.call(this)}function toIntegerOrInfinity(number){number=Number(number);if(NumberIsNaN(number)){return 0}if(number<0){throw new ERR_OUT_OF_RANGE("number",">= 0",number)}return number}function drop(number,options=undefined){if(options!=null){validateObject(options,"options");}if((options===null||options===undefined?undefined:options.signal)!=null){validateAbortSignal(options.signal,"options.signal");}number=toIntegerOrInfinity(number);return async function*drop(){var _options$signal8;if(options!==null&&options!==undefined&&(_options$signal8=options.signal)!==null&&_options$signal8!==undefined&&_options$signal8.aborted){throw new AbortError}for await(const val of this){var _options$signal9;if(options!==null&&options!==undefined&&(_options$signal9=options.signal)!==null&&_options$signal9!==undefined&&_options$signal9.aborted){throw new AbortError}if(number--<=0){yield val;}}}.call(this)}function take(number,options=undefined){if(options!=null){validateObject(options,"options");}if((options===null||options===undefined?undefined:options.signal)!=null){validateAbortSignal(options.signal,"options.signal");}number=toIntegerOrInfinity(number);return async function*take(){var _options$signal10;if(options!==null&&options!==undefined&&(_options$signal10=options.signal)!==null&&_options$signal10!==undefined&&_options$signal10.aborted){throw new AbortError}for await(const val of this){var _options$signal11;if(options!==null&&options!==undefined&&(_options$signal11=options.signal)!==null&&_options$signal11!==undefined&&_options$signal11.aborted){throw new AbortError}if(number-- >0){yield val;}else {return}}}.call(this)}module.exports.streamReturningOperators={asIndexedPairs:asIndexedPairs,drop:drop,filter:filter,flatMap:flatMap,map:map,take:take,compose:compose};module.exports.promiseReturningOperators={every:every,forEach:forEach,reduce:reduce,toArray:toArray,some:some,find:find};},{"../../ours/errors":39,"../../ours/primordials":40,"../validators":37,"./add-abort-signal":20,"./compose":22,"./end-of-stream":26,"./utils":35,"abort-controller":11}],30:[function(require,module,exports){const{ObjectSetPrototypeOf}=require("../../ours/primordials");module.exports=PassThrough;const Transform=require("./transform");ObjectSetPrototypeOf(PassThrough.prototype,Transform.prototype);ObjectSetPrototypeOf(PassThrough,Transform);function PassThrough(options){if(!(this instanceof PassThrough))return new PassThrough(options);Transform.call(this,options);}PassThrough.prototype._transform=function(chunk,encoding,cb){cb(null,chunk);};},{"../../ours/primordials":40,"./transform":34}],31:[function(require,module,exports){const process=require("process/");const{ArrayIsArray,Promise,SymbolAsyncIterator}=require("../../ours/primordials");const eos=require("./end-of-stream");const{once}=require("../../ours/util");const destroyImpl=require("./destroy");const Duplex=require("./duplex");const{aggregateTwoErrors,codes:{ERR_INVALID_ARG_TYPE,ERR_INVALID_RETURN_VALUE,ERR_MISSING_ARGS,ERR_STREAM_DESTROYED,ERR_STREAM_PREMATURE_CLOSE},AbortError}=require("../../ours/errors");const{validateFunction,validateAbortSignal}=require("../validators");const{isIterable,isReadable,isReadableNodeStream,isNodeStream,isTransformStream,isWebStream,isReadableStream,isReadableEnded}=require("./utils");const AbortController=globalThis.AbortController||require("abort-controller").AbortController;let PassThrough;let Readable;function destroyer(stream,reading,writing){let finished=false;stream.on("close",()=>{finished=true;});const cleanup=eos(stream,{readable:reading,writable:writing},err=>{finished=!err;});return {destroy:err=>{if(finished)return;finished=true;destroyImpl.destroyer(stream,err||new ERR_STREAM_DESTROYED("pipe"));},cleanup:cleanup}}function popCallback(streams){validateFunction(streams[streams.length-1],"streams[stream.length - 1]");return streams.pop()}function makeAsyncIterable(val){if(isIterable(val)){return val}else if(isReadableNodeStream(val)){return fromReadable(val)}throw new ERR_INVALID_ARG_TYPE("val",["Readable","Iterable","AsyncIterable"],val)}async function*fromReadable(val){if(!Readable){Readable=require("./readable");}yield*Readable.prototype[SymbolAsyncIterator].call(val);}async function pumpToNode(iterable,writable,finish,{end}){let error;let onresolve=null;const resume=err=>{if(err){error=err;}if(onresolve){const callback=onresolve;onresolve=null;callback();}};const wait=()=>new Promise((resolve,reject)=>{if(error){reject(error);}else {onresolve=()=>{if(error){reject(error);}else {resolve();}};}});writable.on("drain",resume);const cleanup=eos(writable,{readable:false},resume);try{if(writable.writableNeedDrain){await wait();}for await(const chunk of iterable){if(!writable.write(chunk)){await wait();}}if(end){writable.end();}await wait();finish();}catch(err){finish(error!==err?aggregateTwoErrors(error,err):err);}finally{cleanup();writable.off("drain",resume);}}async function pumpToWeb(readable,writable,finish,{end}){if(isTransformStream(writable)){writable=writable.writable;}const writer=writable.getWriter();try{for await(const chunk of readable){await writer.ready;writer.write(chunk).catch(()=>{});}await writer.ready;if(end){await writer.close();}finish();}catch(err){try{await writer.abort(err);finish(err);}catch(err){finish(err);}}}function pipeline(...streams){return pipelineImpl(streams,once(popCallback(streams)))}function pipelineImpl(streams,callback,opts){if(streams.length===1&&ArrayIsArray(streams[0])){streams=streams[0];}if(streams.length<2){throw new ERR_MISSING_ARGS("streams")}const ac=new AbortController;const signal=ac.signal;const outerSignal=opts===null||opts===undefined?undefined:opts.signal;const lastStreamCleanup=[];validateAbortSignal(outerSignal,"options.signal");function abort(){finishImpl(new AbortError);}outerSignal===null||outerSignal===undefined?undefined:outerSignal.addEventListener("abort",abort);let error;let value;const destroys=[];let finishCount=0;function finish(err){finishImpl(err,--finishCount===0);}function finishImpl(err,final){if(err&&(!error||error.code==="ERR_STREAM_PREMATURE_CLOSE")){error=err;}if(!error&&!final){return}while(destroys.length){destroys.shift()(error);}outerSignal===null||outerSignal===undefined?undefined:outerSignal.removeEventListener("abort",abort);ac.abort();if(final){if(!error){lastStreamCleanup.forEach(fn=>fn());}process.nextTick(callback,error,value);}}let ret;for(let i=0;i<streams.length;i++){const stream=streams[i];const reading=i<streams.length-1;const writing=i>0;const end=reading||(opts===null||opts===undefined?undefined:opts.end)!==false;const isLastStream=i===streams.length-1;if(isNodeStream(stream)){if(end){const{destroy,cleanup}=destroyer(stream,reading,writing);destroys.push(destroy);if(isReadable(stream)&&isLastStream){lastStreamCleanup.push(cleanup);}}function onError(err){if(err&&err.name!=="AbortError"&&err.code!=="ERR_STREAM_PREMATURE_CLOSE"){finish(err);}}stream.on("error",onError);if(isReadable(stream)&&isLastStream){lastStreamCleanup.push(()=>{stream.removeListener("error",onError);});}}if(i===0){if(typeof stream==="function"){ret=stream({signal:signal});if(!isIterable(ret)){throw new ERR_INVALID_RETURN_VALUE("Iterable, AsyncIterable or Stream","source",ret)}}else if(isIterable(stream)||isReadableNodeStream(stream)||isTransformStream(stream)){ret=stream;}else {ret=Duplex.from(stream);}}else if(typeof stream==="function"){if(isTransformStream(ret)){var _ret;ret=makeAsyncIterable((_ret=ret)===null||_ret===undefined?undefined:_ret.readable);}else {ret=makeAsyncIterable(ret);}ret=stream(ret,{signal:signal});if(reading){if(!isIterable(ret,true)){throw new ERR_INVALID_RETURN_VALUE("AsyncIterable",`transform[${i-1}]`,ret)}}else {var _ret2;if(!PassThrough){PassThrough=require("./passthrough");}const pt=new PassThrough({objectMode:true});const then=(_ret2=ret)===null||_ret2===undefined?undefined:_ret2.then;if(typeof then==="function"){finishCount++;then.call(ret,val=>{value=val;if(val!=null){pt.write(val);}if(end){pt.end();}process.nextTick(finish);},err=>{pt.destroy(err);process.nextTick(finish,err);});}else if(isIterable(ret,true)){finishCount++;pumpToNode(ret,pt,finish,{end:end});}else if(isReadableStream(ret)||isTransformStream(ret)){const toRead=ret.readable||ret;finishCount++;pumpToNode(toRead,pt,finish,{end:end});}else {throw new ERR_INVALID_RETURN_VALUE("AsyncIterable or Promise","destination",ret)}ret=pt;const{destroy,cleanup}=destroyer(ret,false,true);destroys.push(destroy);if(isLastStream){lastStreamCleanup.push(cleanup);}}}else if(isNodeStream(stream)){if(isReadableNodeStream(ret)){finishCount+=2;const cleanup=pipe(ret,stream,finish,{end:end});if(isReadable(stream)&&isLastStream){lastStreamCleanup.push(cleanup);}}else if(isTransformStream(ret)||isReadableStream(ret)){const toRead=ret.readable||ret;finishCount++;pumpToNode(toRead,stream,finish,{end:end});}else if(isIterable(ret)){finishCount++;pumpToNode(ret,stream,finish,{end:end});}else {throw new ERR_INVALID_ARG_TYPE("val",["Readable","Iterable","AsyncIterable","ReadableStream","TransformStream"],ret)}ret=stream;}else if(isWebStream(stream)){if(isReadableNodeStream(ret)){finishCount++;pumpToWeb(makeAsyncIterable(ret),stream,finish,{end:end});}else if(isReadableStream(ret)||isIterable(ret)){finishCount++;pumpToWeb(ret,stream,finish,{end:end});}else if(isTransformStream(ret)){finishCount++;pumpToWeb(ret.readable,stream,finish,{end:end});}else {throw new ERR_INVALID_ARG_TYPE("val",["Readable","Iterable","AsyncIterable","ReadableStream","TransformStream"],ret)}ret=stream;}else {ret=Duplex.from(stream);}}if(signal!==null&&signal!==undefined&&signal.aborted||outerSignal!==null&&outerSignal!==undefined&&outerSignal.aborted){process.nextTick(abort);}return ret}function pipe(src,dst,finish,{end}){let ended=false;dst.on("close",()=>{if(!ended){finish(new ERR_STREAM_PREMATURE_CLOSE);}});src.pipe(dst,{end:false});if(end){function endFn(){ended=true;dst.end();}if(isReadableEnded(src)){process.nextTick(endFn);}else {src.once("end",endFn);}}else {finish();}eos(src,{readable:true,writable:false},err=>{const rState=src._readableState;if(err&&err.code==="ERR_STREAM_PREMATURE_CLOSE"&&rState&&rState.ended&&!rState.errored&&!rState.errorEmitted){src.once("end",finish).once("error",finish);}else {finish(err);}});return eos(dst,{readable:false,writable:true},finish)}module.exports={pipelineImpl:pipelineImpl,pipeline:pipeline};},{"../../ours/errors":39,"../../ours/primordials":40,"../../ours/util":41,"../validators":37,"./destroy":23,"./duplex":24,"./end-of-stream":26,"./passthrough":30,"./readable":32,"./utils":35,"abort-controller":11,"process/":18}],32:[function(require,module,exports){const process=require("process/");const{ArrayPrototypeIndexOf,NumberIsInteger,NumberIsNaN,NumberParseInt,ObjectDefineProperties,ObjectKeys,ObjectSetPrototypeOf,Promise,SafeSet,SymbolAsyncIterator,Symbol}=require("../../ours/primordials");module.exports=Readable;Readable.ReadableState=ReadableState;const{EventEmitter:EE}=require("events");const{Stream,prependListener}=require("./legacy");const{Buffer}=require("buffer");const{addAbortSignal}=require("./add-abort-signal");const eos=require("./end-of-stream");let debug=require("../../ours/util").debuglog("stream",fn=>{debug=fn;});const BufferList=require("./buffer_list");const destroyImpl=require("./destroy");const{getHighWaterMark,getDefaultHighWaterMark}=require("./state");const{aggregateTwoErrors,codes:{ERR_INVALID_ARG_TYPE,ERR_METHOD_NOT_IMPLEMENTED,ERR_OUT_OF_RANGE,ERR_STREAM_PUSH_AFTER_EOF,ERR_STREAM_UNSHIFT_AFTER_END_EVENT}}=require("../../ours/errors");const{validateObject}=require("../validators");const kPaused=Symbol("kPaused");const{StringDecoder}=require("string_decoder");const from=require("./from");ObjectSetPrototypeOf(Readable.prototype,Stream.prototype);ObjectSetPrototypeOf(Readable,Stream);const nop=()=>{};const{errorOrDestroy}=destroyImpl;function ReadableState(options,stream,isDuplex){if(typeof isDuplex!=="boolean")isDuplex=stream instanceof require("./duplex");this.objectMode=!!(options&&options.objectMode);if(isDuplex)this.objectMode=this.objectMode||!!(options&&options.readableObjectMode);this.highWaterMark=options?getHighWaterMark(this,options,"readableHighWaterMark",isDuplex):getDefaultHighWaterMark(false);this.buffer=new BufferList;this.length=0;this.pipes=[];this.flowing=null;this.ended=false;this.endEmitted=false;this.reading=false;this.constructed=true;this.sync=true;this.needReadable=false;this.emittedReadable=false;this.readableListening=false;this.resumeScheduled=false;this[kPaused]=null;this.errorEmitted=false;this.emitClose=!options||options.emitClose!==false;this.autoDestroy=!options||options.autoDestroy!==false;this.destroyed=false;this.errored=null;this.closed=false;this.closeEmitted=false;this.defaultEncoding=options&&options.defaultEncoding||"utf8";this.awaitDrainWriters=null;this.multiAwaitDrain=false;this.readingMore=false;this.dataEmitted=false;this.decoder=null;this.encoding=null;if(options&&options.encoding){this.decoder=new StringDecoder(options.encoding);this.encoding=options.encoding;}}function Readable(options){if(!(this instanceof Readable))return new Readable(options);const isDuplex=this instanceof require("./duplex");this._readableState=new ReadableState(options,this,isDuplex);if(options){if(typeof options.read==="function")this._read=options.read;if(typeof options.destroy==="function")this._destroy=options.destroy;if(typeof options.construct==="function")this._construct=options.construct;if(options.signal&&!isDuplex)addAbortSignal(options.signal,this);}Stream.call(this,options);destroyImpl.construct(this,()=>{if(this._readableState.needReadable){maybeReadMore(this,this._readableState);}});}Readable.prototype.destroy=destroyImpl.destroy;Readable.prototype._undestroy=destroyImpl.undestroy;Readable.prototype._destroy=function(err,cb){cb(err);};Readable.prototype[EE.captureRejectionSymbol]=function(err){this.destroy(err);};Readable.prototype.push=function(chunk,encoding){return readableAddChunk(this,chunk,encoding,false)};Readable.prototype.unshift=function(chunk,encoding){return readableAddChunk(this,chunk,encoding,true)};function readableAddChunk(stream,chunk,encoding,addToFront){debug("readableAddChunk",chunk);const state=stream._readableState;let err;if(!state.objectMode){if(typeof chunk==="string"){encoding=encoding||state.defaultEncoding;if(state.encoding!==encoding){if(addToFront&&state.encoding){chunk=Buffer.from(chunk,encoding).toString(state.encoding);}else {chunk=Buffer.from(chunk,encoding);encoding="";}}}else if(chunk instanceof Buffer){encoding="";}else if(Stream._isUint8Array(chunk)){chunk=Stream._uint8ArrayToBuffer(chunk);encoding="";}else if(chunk!=null){err=new ERR_INVALID_ARG_TYPE("chunk",["string","Buffer","Uint8Array"],chunk);}}if(err){errorOrDestroy(stream,err);}else if(chunk===null){state.reading=false;onEofChunk(stream,state);}else if(state.objectMode||chunk&&chunk.length>0){if(addToFront){if(state.endEmitted)errorOrDestroy(stream,new ERR_STREAM_UNSHIFT_AFTER_END_EVENT);else if(state.destroyed||state.errored)return false;else addChunk(stream,state,chunk,true);}else if(state.ended){errorOrDestroy(stream,new ERR_STREAM_PUSH_AFTER_EOF);}else if(state.destroyed||state.errored){return false}else {state.reading=false;if(state.decoder&&!encoding){chunk=state.decoder.write(chunk);if(state.objectMode||chunk.length!==0)addChunk(stream,state,chunk,false);else maybeReadMore(stream,state);}else {addChunk(stream,state,chunk,false);}}}else if(!addToFront){state.reading=false;maybeReadMore(stream,state);}return !state.ended&&(state.length<state.highWaterMark||state.length===0)}function addChunk(stream,state,chunk,addToFront){if(state.flowing&&state.length===0&&!state.sync&&stream.listenerCount("data")>0){if(state.multiAwaitDrain){state.awaitDrainWriters.clear();}else {state.awaitDrainWriters=null;}state.dataEmitted=true;stream.emit("data",chunk);}else {state.length+=state.objectMode?1:chunk.length;if(addToFront)state.buffer.unshift(chunk);else state.buffer.push(chunk);if(state.needReadable)emitReadable(stream);}maybeReadMore(stream,state);}Readable.prototype.isPaused=function(){const state=this._readableState;return state[kPaused]===true||state.flowing===false};Readable.prototype.setEncoding=function(enc){const decoder=new StringDecoder(enc);this._readableState.decoder=decoder;this._readableState.encoding=this._readableState.decoder.encoding;const buffer=this._readableState.buffer;let content="";for(const data of buffer){content+=decoder.write(data);}buffer.clear();if(content!=="")buffer.push(content);this._readableState.length=content.length;return this};const MAX_HWM=1073741824;function computeNewHighWaterMark(n){if(n>MAX_HWM){throw new ERR_OUT_OF_RANGE("size","<= 1GiB",n)}else {n--;n|=n>>>1;n|=n>>>2;n|=n>>>4;n|=n>>>8;n|=n>>>16;n++;}return n}function howMuchToRead(n,state){if(n<=0||state.length===0&&state.ended)return 0;if(state.objectMode)return 1;if(NumberIsNaN(n)){if(state.flowing&&state.length)return state.buffer.first().length;return state.length}if(n<=state.length)return n;return state.ended?state.length:0}Readable.prototype.read=function(n){debug("read",n);if(n===undefined){n=NaN;}else if(!NumberIsInteger(n)){n=NumberParseInt(n,10);}const state=this._readableState;const nOrig=n;if(n>state.highWaterMark)state.highWaterMark=computeNewHighWaterMark(n);if(n!==0)state.emittedReadable=false;if(n===0&&state.needReadable&&((state.highWaterMark!==0?state.length>=state.highWaterMark:state.length>0)||state.ended)){debug("read: emitReadable",state.length,state.ended);if(state.length===0&&state.ended)endReadable(this);else emitReadable(this);return null}n=howMuchToRead(n,state);if(n===0&&state.ended){if(state.length===0)endReadable(this);return null}let doRead=state.needReadable;debug("need readable",doRead);if(state.length===0||state.length-n<state.highWaterMark){doRead=true;debug("length less than watermark",doRead);}if(state.ended||state.reading||state.destroyed||state.errored||!state.constructed){doRead=false;debug("reading, ended or constructing",doRead);}else if(doRead){debug("do read");state.reading=true;state.sync=true;if(state.length===0)state.needReadable=true;try{this._read(state.highWaterMark);}catch(err){errorOrDestroy(this,err);}state.sync=false;if(!state.reading)n=howMuchToRead(nOrig,state);}let ret;if(n>0)ret=fromList(n,state);else ret=null;if(ret===null){state.needReadable=state.length<=state.highWaterMark;n=0;}else {state.length-=n;if(state.multiAwaitDrain){state.awaitDrainWriters.clear();}else {state.awaitDrainWriters=null;}}if(state.length===0){if(!state.ended)state.needReadable=true;if(nOrig!==n&&state.ended)endReadable(this);}if(ret!==null&&!state.errorEmitted&&!state.closeEmitted){state.dataEmitted=true;this.emit("data",ret);}return ret};function onEofChunk(stream,state){debug("onEofChunk");if(state.ended)return;if(state.decoder){const chunk=state.decoder.end();if(chunk&&chunk.length){state.buffer.push(chunk);state.length+=state.objectMode?1:chunk.length;}}state.ended=true;if(state.sync){emitReadable(stream);}else {state.needReadable=false;state.emittedReadable=true;emitReadable_(stream);}}function emitReadable(stream){const state=stream._readableState;debug("emitReadable",state.needReadable,state.emittedReadable);state.needReadable=false;if(!state.emittedReadable){debug("emitReadable",state.flowing);state.emittedReadable=true;process.nextTick(emitReadable_,stream);}}function emitReadable_(stream){const state=stream._readableState;debug("emitReadable_",state.destroyed,state.length,state.ended);if(!state.destroyed&&!state.errored&&(state.length||state.ended)){stream.emit("readable");state.emittedReadable=false;}state.needReadable=!state.flowing&&!state.ended&&state.length<=state.highWaterMark;flow(stream);}function maybeReadMore(stream,state){if(!state.readingMore&&state.constructed){state.readingMore=true;process.nextTick(maybeReadMore_,stream,state);}}function maybeReadMore_(stream,state){while(!state.reading&&!state.ended&&(state.length<state.highWaterMark||state.flowing&&state.length===0)){const len=state.length;debug("maybeReadMore read 0");stream.read(0);if(len===state.length)break}state.readingMore=false;}Readable.prototype._read=function(n){throw new ERR_METHOD_NOT_IMPLEMENTED("_read()")};Readable.prototype.pipe=function(dest,pipeOpts){const src=this;const state=this._readableState;if(state.pipes.length===1){if(!state.multiAwaitDrain){state.multiAwaitDrain=true;state.awaitDrainWriters=new SafeSet(state.awaitDrainWriters?[state.awaitDrainWriters]:[]);}}state.pipes.push(dest);debug("pipe count=%d opts=%j",state.pipes.length,pipeOpts);const doEnd=(!pipeOpts||pipeOpts.end!==false)&&dest!==process.stdout&&dest!==process.stderr;const endFn=doEnd?onend:unpipe;if(state.endEmitted)process.nextTick(endFn);else src.once("end",endFn);dest.on("unpipe",onunpipe);function onunpipe(readable,unpipeInfo){debug("onunpipe");if(readable===src){if(unpipeInfo&&unpipeInfo.hasUnpiped===false){unpipeInfo.hasUnpiped=true;cleanup();}}}function onend(){debug("onend");dest.end();}let ondrain;let cleanedUp=false;function cleanup(){debug("cleanup");dest.removeListener("close",onclose);dest.removeListener("finish",onfinish);if(ondrain){dest.removeListener("drain",ondrain);}dest.removeListener("error",onerror);dest.removeListener("unpipe",onunpipe);src.removeListener("end",onend);src.removeListener("end",unpipe);src.removeListener("data",ondata);cleanedUp=true;if(ondrain&&state.awaitDrainWriters&&(!dest._writableState||dest._writableState.needDrain))ondrain();}function pause(){if(!cleanedUp){if(state.pipes.length===1&&state.pipes[0]===dest){debug("false write response, pause",0);state.awaitDrainWriters=dest;state.multiAwaitDrain=false;}else if(state.pipes.length>1&&state.pipes.includes(dest)){debug("false write response, pause",state.awaitDrainWriters.size);state.awaitDrainWriters.add(dest);}src.pause();}if(!ondrain){ondrain=pipeOnDrain(src,dest);dest.on("drain",ondrain);}}src.on("data",ondata);function ondata(chunk){debug("ondata");const ret=dest.write(chunk);debug("dest.write",ret);if(ret===false){pause();}}function onerror(er){debug("onerror",er);unpipe();dest.removeListener("error",onerror);if(dest.listenerCount("error")===0){const s=dest._writableState||dest._readableState;if(s&&!s.errorEmitted){errorOrDestroy(dest,er);}else {dest.emit("error",er);}}}prependListener(dest,"error",onerror);function onclose(){dest.removeListener("finish",onfinish);unpipe();}dest.once("close",onclose);function onfinish(){debug("onfinish");dest.removeListener("close",onclose);unpipe();}dest.once("finish",onfinish);function unpipe(){debug("unpipe");src.unpipe(dest);}dest.emit("pipe",src);if(dest.writableNeedDrain===true){if(state.flowing){pause();}}else if(!state.flowing){debug("pipe resume");src.resume();}return dest};function pipeOnDrain(src,dest){return function pipeOnDrainFunctionResult(){const state=src._readableState;if(state.awaitDrainWriters===dest){debug("pipeOnDrain",1);state.awaitDrainWriters=null;}else if(state.multiAwaitDrain){debug("pipeOnDrain",state.awaitDrainWriters.size);state.awaitDrainWriters.delete(dest);}if((!state.awaitDrainWriters||state.awaitDrainWriters.size===0)&&src.listenerCount("data")){src.resume();}}}Readable.prototype.unpipe=function(dest){const state=this._readableState;const unpipeInfo={hasUnpiped:false};if(state.pipes.length===0)return this;if(!dest){const dests=state.pipes;state.pipes=[];this.pause();for(let i=0;i<dests.length;i++)dests[i].emit("unpipe",this,{hasUnpiped:false});return this}const index=ArrayPrototypeIndexOf(state.pipes,dest);if(index===-1)return this;state.pipes.splice(index,1);if(state.pipes.length===0)this.pause();dest.emit("unpipe",this,unpipeInfo);return this};Readable.prototype.on=function(ev,fn){const res=Stream.prototype.on.call(this,ev,fn);const state=this._readableState;if(ev==="data"){state.readableListening=this.listenerCount("readable")>0;if(state.flowing!==false)this.resume();}else if(ev==="readable"){if(!state.endEmitted&&!state.readableListening){state.readableListening=state.needReadable=true;state.flowing=false;state.emittedReadable=false;debug("on readable",state.length,state.reading);if(state.length){emitReadable(this);}else if(!state.reading){process.nextTick(nReadingNextTick,this);}}}return res};Readable.prototype.addListener=Readable.prototype.on;Readable.prototype.removeListener=function(ev,fn){const res=Stream.prototype.removeListener.call(this,ev,fn);if(ev==="readable"){process.nextTick(updateReadableListening,this);}return res};Readable.prototype.off=Readable.prototype.removeListener;Readable.prototype.removeAllListeners=function(ev){const res=Stream.prototype.removeAllListeners.apply(this,arguments);if(ev==="readable"||ev===undefined){process.nextTick(updateReadableListening,this);}return res};function updateReadableListening(self){const state=self._readableState;state.readableListening=self.listenerCount("readable")>0;if(state.resumeScheduled&&state[kPaused]===false){state.flowing=true;}else if(self.listenerCount("data")>0){self.resume();}else if(!state.readableListening){state.flowing=null;}}function nReadingNextTick(self){debug("readable nexttick read 0");self.read(0);}Readable.prototype.resume=function(){const state=this._readableState;if(!state.flowing){debug("resume");state.flowing=!state.readableListening;resume(this,state);}state[kPaused]=false;return this};function resume(stream,state){if(!state.resumeScheduled){state.resumeScheduled=true;process.nextTick(resume_,stream,state);}}function resume_(stream,state){debug("resume",state.reading);if(!state.reading){stream.read(0);}state.resumeScheduled=false;stream.emit("resume");flow(stream);if(state.flowing&&!state.reading)stream.read(0);}Readable.prototype.pause=function(){debug("call pause flowing=%j",this._readableState.flowing);if(this._readableState.flowing!==false){debug("pause");this._readableState.flowing=false;this.emit("pause");}this._readableState[kPaused]=true;return this};function flow(stream){const state=stream._readableState;debug("flow",state.flowing);while(state.flowing&&stream.read()!==null);}Readable.prototype.wrap=function(stream){let paused=false;stream.on("data",chunk=>{if(!this.push(chunk)&&stream.pause){paused=true;stream.pause();}});stream.on("end",()=>{this.push(null);});stream.on("error",err=>{errorOrDestroy(this,err);});stream.on("close",()=>{this.destroy();});stream.on("destroy",()=>{this.destroy();});this._read=()=>{if(paused&&stream.resume){paused=false;stream.resume();}};const streamKeys=ObjectKeys(stream);for(let j=1;j<streamKeys.length;j++){const i=streamKeys[j];if(this[i]===undefined&&typeof stream[i]==="function"){this[i]=stream[i].bind(stream);}}return this};Readable.prototype[SymbolAsyncIterator]=function(){return streamToAsyncIterator(this)};Readable.prototype.iterator=function(options){if(options!==undefined){validateObject(options,"options");}return streamToAsyncIterator(this,options)};function streamToAsyncIterator(stream,options){if(typeof stream.read!=="function"){stream=Readable.wrap(stream,{objectMode:true});}const iter=createAsyncIterator(stream,options);iter.stream=stream;return iter}async function*createAsyncIterator(stream,options){let callback=nop;function next(resolve){if(this===stream){callback();callback=nop;}else {callback=resolve;}}stream.on("readable",next);let error;const cleanup=eos(stream,{writable:false},err=>{error=err?aggregateTwoErrors(error,err):null;callback();callback=nop;});try{while(true){const chunk=stream.destroyed?null:stream.read();if(chunk!==null){yield chunk;}else if(error){throw error}else if(error===null){return}else {await new Promise(next);}}}catch(err){error=aggregateTwoErrors(error,err);throw error}finally{if((error||(options===null||options===undefined?undefined:options.destroyOnReturn)!==false)&&(error===undefined||stream._readableState.autoDestroy)){destroyImpl.destroyer(stream,null);}else {stream.off("readable",next);cleanup();}}}ObjectDefineProperties(Readable.prototype,{readable:{__proto__:null,get(){const r=this._readableState;return !!r&&r.readable!==false&&!r.destroyed&&!r.errorEmitted&&!r.endEmitted},set(val){if(this._readableState){this._readableState.readable=!!val;}}},readableDidRead:{__proto__:null,enumerable:false,get:function(){return this._readableState.dataEmitted}},readableAborted:{__proto__:null,enumerable:false,get:function(){return !!(this._readableState.readable!==false&&(this._readableState.destroyed||this._readableState.errored)&&!this._readableState.endEmitted)}},readableHighWaterMark:{__proto__:null,enumerable:false,get:function(){return this._readableState.highWaterMark}},readableBuffer:{__proto__:null,enumerable:false,get:function(){return this._readableState&&this._readableState.buffer}},readableFlowing:{__proto__:null,enumerable:false,get:function(){return this._readableState.flowing},set:function(state){if(this._readableState){this._readableState.flowing=state;}}},readableLength:{__proto__:null,enumerable:false,get(){return this._readableState.length}},readableObjectMode:{__proto__:null,enumerable:false,get(){return this._readableState?this._readableState.objectMode:false}},readableEncoding:{__proto__:null,enumerable:false,get(){return this._readableState?this._readableState.encoding:null}},errored:{__proto__:null,enumerable:false,get(){return this._readableState?this._readableState.errored:null}},closed:{__proto__:null,get(){return this._readableState?this._readableState.closed:false}},destroyed:{__proto__:null,enumerable:false,get(){return this._readableState?this._readableState.destroyed:false},set(value){if(!this._readableState){return}this._readableState.destroyed=value;}},readableEnded:{__proto__:null,enumerable:false,get(){return this._readableState?this._readableState.endEmitted:false}}});ObjectDefineProperties(ReadableState.prototype,{pipesCount:{__proto__:null,get(){return this.pipes.length}},paused:{__proto__:null,get(){return this[kPaused]!==false},set(value){this[kPaused]=!!value;}}});Readable._fromList=fromList;function fromList(n,state){if(state.length===0)return null;let ret;if(state.objectMode)ret=state.buffer.shift();else if(!n||n>=state.length){if(state.decoder)ret=state.buffer.join("");else if(state.buffer.length===1)ret=state.buffer.first();else ret=state.buffer.concat(state.length);state.buffer.clear();}else {ret=state.buffer.consume(n,state.decoder);}return ret}function endReadable(stream){const state=stream._readableState;debug("endReadable",state.endEmitted);if(!state.endEmitted){state.ended=true;process.nextTick(endReadableNT,state,stream);}}function endReadableNT(state,stream){debug("endReadableNT",state.endEmitted,state.length);if(!state.errored&&!state.closeEmitted&&!state.endEmitted&&state.length===0){state.endEmitted=true;stream.emit("end");if(stream.writable&&stream.allowHalfOpen===false){process.nextTick(endWritableNT,stream);}else if(state.autoDestroy){const wState=stream._writableState;const autoDestroy=!wState||wState.autoDestroy&&(wState.finished||wState.writable===false);if(autoDestroy){stream.destroy();}}}}function endWritableNT(stream){const writable=stream.writable&&!stream.writableEnded&&!stream.destroyed;if(writable){stream.end();}}Readable.from=function(iterable,opts){return from(Readable,iterable,opts)};let webStreamsAdapters;function lazyWebStreams(){if(webStreamsAdapters===undefined)webStreamsAdapters={};return webStreamsAdapters}Readable.fromWeb=function(readableStream,options){return lazyWebStreams().newStreamReadableFromReadableStream(readableStream,options)};Readable.toWeb=function(streamReadable,options){return lazyWebStreams().newReadableStreamFromStreamReadable(streamReadable,options)};Readable.wrap=function(src,options){var _ref,_src$readableObjectMo;return new Readable({objectMode:(_ref=(_src$readableObjectMo=src.readableObjectMode)!==null&&_src$readableObjectMo!==undefined?_src$readableObjectMo:src.objectMode)!==null&&_ref!==undefined?_ref:true,...options,destroy(err,callback){destroyImpl.destroyer(src,err);callback(err);}}).wrap(src)};},{"../../ours/errors":39,"../../ours/primordials":40,"../../ours/util":41,"../validators":37,"./add-abort-signal":20,"./buffer_list":21,"./destroy":23,"./duplex":24,"./end-of-stream":26,"./from":27,"./legacy":28,"./state":33,buffer:15,events:16,"process/":18,string_decoder:14}],33:[function(require,module,exports){const{MathFloor,NumberIsInteger}=require("../../ours/primordials");const{ERR_INVALID_ARG_VALUE}=require("../../ours/errors").codes;function highWaterMarkFrom(options,isDuplex,duplexKey){return options.highWaterMark!=null?options.highWaterMark:isDuplex?options[duplexKey]:null}function getDefaultHighWaterMark(objectMode){return objectMode?16:16*1024}function getHighWaterMark(state,options,duplexKey,isDuplex){const hwm=highWaterMarkFrom(options,isDuplex,duplexKey);if(hwm!=null){if(!NumberIsInteger(hwm)||hwm<0){const name=isDuplex?`options.${duplexKey}`:"options.highWaterMark";throw new ERR_INVALID_ARG_VALUE(name,hwm)}return MathFloor(hwm)}return getDefaultHighWaterMark(state.objectMode)}module.exports={getHighWaterMark:getHighWaterMark,getDefaultHighWaterMark:getDefaultHighWaterMark};},{"../../ours/errors":39,"../../ours/primordials":40}],34:[function(require,module,exports){const{ObjectSetPrototypeOf,Symbol}=require("../../ours/primordials");module.exports=Transform;const{ERR_METHOD_NOT_IMPLEMENTED}=require("../../ours/errors").codes;const Duplex=require("./duplex");const{getHighWaterMark}=require("./state");ObjectSetPrototypeOf(Transform.prototype,Duplex.prototype);ObjectSetPrototypeOf(Transform,Duplex);const kCallback=Symbol("kCallback");function Transform(options){if(!(this instanceof Transform))return new Transform(options);const readableHighWaterMark=options?getHighWaterMark(this,options,"readableHighWaterMark",true):null;if(readableHighWaterMark===0){options={...options,highWaterMark:null,readableHighWaterMark:readableHighWaterMark,writableHighWaterMark:options.writableHighWaterMark||0};}Duplex.call(this,options);this._readableState.sync=false;this[kCallback]=null;if(options){if(typeof options.transform==="function")this._transform=options.transform;if(typeof options.flush==="function")this._flush=options.flush;}this.on("prefinish",prefinish);}function final(cb){if(typeof this._flush==="function"&&!this.destroyed){this._flush((er,data)=>{if(er){if(cb){cb(er);}else {this.destroy(er);}return}if(data!=null){this.push(data);}this.push(null);if(cb){cb();}});}else {this.push(null);if(cb){cb();}}}function prefinish(){if(this._final!==final){final.call(this);}}Transform.prototype._final=final;Transform.prototype._transform=function(chunk,encoding,callback){throw new ERR_METHOD_NOT_IMPLEMENTED("_transform()")};Transform.prototype._write=function(chunk,encoding,callback){const rState=this._readableState;const wState=this._writableState;const length=rState.length;this._transform(chunk,encoding,(err,val)=>{if(err){callback(err);return}if(val!=null){this.push(val);}if(wState.ended||length===rState.length||rState.length<rState.highWaterMark){callback();}else {this[kCallback]=callback;}});};Transform.prototype._read=function(){if(this[kCallback]){const callback=this[kCallback];this[kCallback]=null;callback();}};},{"../../ours/errors":39,"../../ours/primordials":40,"./duplex":24,"./state":33}],35:[function(require,module,exports){const{Symbol,SymbolAsyncIterator,SymbolIterator,SymbolFor}=require("../../ours/primordials");const kDestroyed=Symbol("kDestroyed");const kIsErrored=Symbol("kIsErrored");const kIsReadable=Symbol("kIsReadable");const kIsDisturbed=Symbol("kIsDisturbed");const kIsClosedPromise=SymbolFor("nodejs.webstream.isClosedPromise");const kControllerErrorFunction=SymbolFor("nodejs.webstream.controllerErrorFunction");function isReadableNodeStream(obj,strict=false){var _obj$_readableState;return !!(obj&&typeof obj.pipe==="function"&&typeof obj.on==="function"&&(!strict||typeof obj.pause==="function"&&typeof obj.resume==="function")&&(!obj._writableState||((_obj$_readableState=obj._readableState)===null||_obj$_readableState===undefined?undefined:_obj$_readableState.readable)!==false)&&(!obj._writableState||obj._readableState))}function isWritableNodeStream(obj){var _obj$_writableState;return !!(obj&&typeof obj.write==="function"&&typeof obj.on==="function"&&(!obj._readableState||((_obj$_writableState=obj._writableState)===null||_obj$_writableState===undefined?undefined:_obj$_writableState.writable)!==false))}function isDuplexNodeStream(obj){return !!(obj&&typeof obj.pipe==="function"&&obj._readableState&&typeof obj.on==="function"&&typeof obj.write==="function")}function isNodeStream(obj){return obj&&(obj._readableState||obj._writableState||typeof obj.write==="function"&&typeof obj.on==="function"||typeof obj.pipe==="function"&&typeof obj.on==="function")}function isReadableStream(obj){return !!(obj&&!isNodeStream(obj)&&typeof obj.pipeThrough==="function"&&typeof obj.getReader==="function"&&typeof obj.cancel==="function")}function isWritableStream(obj){return !!(obj&&!isNodeStream(obj)&&typeof obj.getWriter==="function"&&typeof obj.abort==="function")}function isTransformStream(obj){return !!(obj&&!isNodeStream(obj)&&typeof obj.readable==="object"&&typeof obj.writable==="object")}function isWebStream(obj){return isReadableStream(obj)||isWritableStream(obj)||isTransformStream(obj)}function isIterable(obj,isAsync){if(obj==null)return false;if(isAsync===true)return typeof obj[SymbolAsyncIterator]==="function";if(isAsync===false)return typeof obj[SymbolIterator]==="function";return typeof obj[SymbolAsyncIterator]==="function"||typeof obj[SymbolIterator]==="function"}function isDestroyed(stream){if(!isNodeStream(stream))return null;const wState=stream._writableState;const rState=stream._readableState;const state=wState||rState;return !!(stream.destroyed||stream[kDestroyed]||state!==null&&state!==undefined&&state.destroyed)}function isWritableEnded(stream){if(!isWritableNodeStream(stream))return null;if(stream.writableEnded===true)return true;const wState=stream._writableState;if(wState!==null&&wState!==undefined&&wState.errored)return false;if(typeof(wState===null||wState===undefined?undefined:wState.ended)!=="boolean")return null;return wState.ended}function isWritableFinished(stream,strict){if(!isWritableNodeStream(stream))return null;if(stream.writableFinished===true)return true;const wState=stream._writableState;if(wState!==null&&wState!==undefined&&wState.errored)return false;if(typeof(wState===null||wState===undefined?undefined:wState.finished)!=="boolean")return null;return !!(wState.finished||strict===false&&wState.ended===true&&wState.length===0)}function isReadableEnded(stream){if(!isReadableNodeStream(stream))return null;if(stream.readableEnded===true)return true;const rState=stream._readableState;if(!rState||rState.errored)return false;if(typeof(rState===null||rState===undefined?undefined:rState.ended)!=="boolean")return null;return rState.ended}function isReadableFinished(stream,strict){if(!isReadableNodeStream(stream))return null;const rState=stream._readableState;if(rState!==null&&rState!==undefined&&rState.errored)return false;if(typeof(rState===null||rState===undefined?undefined:rState.endEmitted)!=="boolean")return null;return !!(rState.endEmitted||strict===false&&rState.ended===true&&rState.length===0)}function isReadable(stream){if(stream&&stream[kIsReadable]!=null)return stream[kIsReadable];if(typeof(stream===null||stream===undefined?undefined:stream.readable)!=="boolean")return null;if(isDestroyed(stream))return false;return isReadableNodeStream(stream)&&stream.readable&&!isReadableFinished(stream)}function isWritable(stream){if(typeof(stream===null||stream===undefined?undefined:stream.writable)!=="boolean")return null;if(isDestroyed(stream))return false;return isWritableNodeStream(stream)&&stream.writable&&!isWritableEnded(stream)}function isFinished(stream,opts){if(!isNodeStream(stream)){return null}if(isDestroyed(stream)){return true}if((opts===null||opts===undefined?undefined:opts.readable)!==false&&isReadable(stream)){return false}if((opts===null||opts===undefined?undefined:opts.writable)!==false&&isWritable(stream)){return false}return true}function isWritableErrored(stream){var _stream$_writableStat,_stream$_writableStat2;if(!isNodeStream(stream)){return null}if(stream.writableErrored){return stream.writableErrored}return (_stream$_writableStat=(_stream$_writableStat2=stream._writableState)===null||_stream$_writableStat2===undefined?undefined:_stream$_writableStat2.errored)!==null&&_stream$_writableStat!==undefined?_stream$_writableStat:null}function isReadableErrored(stream){var _stream$_readableStat,_stream$_readableStat2;if(!isNodeStream(stream)){return null}if(stream.readableErrored){return stream.readableErrored}return (_stream$_readableStat=(_stream$_readableStat2=stream._readableState)===null||_stream$_readableStat2===undefined?undefined:_stream$_readableStat2.errored)!==null&&_stream$_readableStat!==undefined?_stream$_readableStat:null}function isClosed(stream){if(!isNodeStream(stream)){return null}if(typeof stream.closed==="boolean"){return stream.closed}const wState=stream._writableState;const rState=stream._readableState;if(typeof(wState===null||wState===undefined?undefined:wState.closed)==="boolean"||typeof(rState===null||rState===undefined?undefined:rState.closed)==="boolean"){return (wState===null||wState===undefined?undefined:wState.closed)||(rState===null||rState===undefined?undefined:rState.closed)}if(typeof stream._closed==="boolean"&&isOutgoingMessage(stream)){return stream._closed}return null}function isOutgoingMessage(stream){return typeof stream._closed==="boolean"&&typeof stream._defaultKeepAlive==="boolean"&&typeof stream._removedConnection==="boolean"&&typeof stream._removedContLen==="boolean"}function isServerResponse(stream){return typeof stream._sent100==="boolean"&&isOutgoingMessage(stream)}function isServerRequest(stream){var _stream$req;return typeof stream._consuming==="boolean"&&typeof stream._dumped==="boolean"&&((_stream$req=stream.req)===null||_stream$req===undefined?undefined:_stream$req.upgradeOrConnect)===undefined}function willEmitClose(stream){if(!isNodeStream(stream))return null;const wState=stream._writableState;const rState=stream._readableState;const state=wState||rState;return !state&&isServerResponse(stream)||!!(state&&state.autoDestroy&&state.emitClose&&state.closed===false)}function isDisturbed(stream){var _stream$kIsDisturbed;return !!(stream&&((_stream$kIsDisturbed=stream[kIsDisturbed])!==null&&_stream$kIsDisturbed!==undefined?_stream$kIsDisturbed:stream.readableDidRead||stream.readableAborted))}function isErrored(stream){var _ref,_ref2,_ref3,_ref4,_ref5,_stream$kIsErrored,_stream$_readableStat3,_stream$_writableStat3,_stream$_readableStat4,_stream$_writableStat4;return !!(stream&&((_ref=(_ref2=(_ref3=(_ref4=(_ref5=(_stream$kIsErrored=stream[kIsErrored])!==null&&_stream$kIsErrored!==undefined?_stream$kIsErrored:stream.readableErrored)!==null&&_ref5!==undefined?_ref5:stream.writableErrored)!==null&&_ref4!==undefined?_ref4:(_stream$_readableStat3=stream._readableState)===null||_stream$_readableStat3===undefined?undefined:_stream$_readableStat3.errorEmitted)!==null&&_ref3!==undefined?_ref3:(_stream$_writableStat3=stream._writableState)===null||_stream$_writableStat3===undefined?undefined:_stream$_writableStat3.errorEmitted)!==null&&_ref2!==undefined?_ref2:(_stream$_readableStat4=stream._readableState)===null||_stream$_readableStat4===undefined?undefined:_stream$_readableStat4.errored)!==null&&_ref!==undefined?_ref:(_stream$_writableStat4=stream._writableState)===null||_stream$_writableStat4===undefined?undefined:_stream$_writableStat4.errored))}module.exports={kDestroyed:kDestroyed,isDisturbed:isDisturbed,kIsDisturbed:kIsDisturbed,isErrored:isErrored,kIsErrored:kIsErrored,isReadable:isReadable,kIsReadable:kIsReadable,kIsClosedPromise:kIsClosedPromise,kControllerErrorFunction:kControllerErrorFunction,isClosed:isClosed,isDestroyed:isDestroyed,isDuplexNodeStream:isDuplexNodeStream,isFinished:isFinished,isIterable:isIterable,isReadableNodeStream:isReadableNodeStream,isReadableStream:isReadableStream,isReadableEnded:isReadableEnded,isReadableFinished:isReadableFinished,isReadableErrored:isReadableErrored,isNodeStream:isNodeStream,isWebStream:isWebStream,isWritable:isWritable,isWritableNodeStream:isWritableNodeStream,isWritableStream:isWritableStream,isWritableEnded:isWritableEnded,isWritableFinished:isWritableFinished,isWritableErrored:isWritableErrored,isServerRequest:isServerRequest,isServerResponse:isServerResponse,willEmitClose:willEmitClose,isTransformStream:isTransformStream};},{"../../ours/primordials":40}],36:[function(require,module,exports){const process=require("process/");const{ArrayPrototypeSlice,Error,FunctionPrototypeSymbolHasInstance,ObjectDefineProperty,ObjectDefineProperties,ObjectSetPrototypeOf,StringPrototypeToLowerCase,Symbol,SymbolHasInstance}=require("../../ours/primordials");module.exports=Writable;Writable.WritableState=WritableState;const{EventEmitter:EE}=require("events");const Stream=require("./legacy").Stream;const{Buffer}=require("buffer");const destroyImpl=require("./destroy");const{addAbortSignal}=require("./add-abort-signal");const{getHighWaterMark,getDefaultHighWaterMark}=require("./state");const{ERR_INVALID_ARG_TYPE,ERR_METHOD_NOT_IMPLEMENTED,ERR_MULTIPLE_CALLBACK,ERR_STREAM_CANNOT_PIPE,ERR_STREAM_DESTROYED,ERR_STREAM_ALREADY_FINISHED,ERR_STREAM_NULL_VALUES,ERR_STREAM_WRITE_AFTER_END,ERR_UNKNOWN_ENCODING}=require("../../ours/errors").codes;const{errorOrDestroy}=destroyImpl;ObjectSetPrototypeOf(Writable.prototype,Stream.prototype);ObjectSetPrototypeOf(Writable,Stream);function nop(){}const kOnFinished=Symbol("kOnFinished");function WritableState(options,stream,isDuplex){if(typeof isDuplex!=="boolean")isDuplex=stream instanceof require("./duplex");this.objectMode=!!(options&&options.objectMode);if(isDuplex)this.objectMode=this.objectMode||!!(options&&options.writableObjectMode);this.highWaterMark=options?getHighWaterMark(this,options,"writableHighWaterMark",isDuplex):getDefaultHighWaterMark(false);this.finalCalled=false;this.needDrain=false;this.ending=false;this.ended=false;this.finished=false;this.destroyed=false;const noDecode=!!(options&&options.decodeStrings===false);this.decodeStrings=!noDecode;this.defaultEncoding=options&&options.defaultEncoding||"utf8";this.length=0;this.writing=false;this.corked=0;this.sync=true;this.bufferProcessing=false;this.onwrite=onwrite.bind(undefined,stream);this.writecb=null;this.writelen=0;this.afterWriteTickInfo=null;resetBuffer(this);this.pendingcb=0;this.constructed=true;this.prefinished=false;this.errorEmitted=false;this.emitClose=!options||options.emitClose!==false;this.autoDestroy=!options||options.autoDestroy!==false;this.errored=null;this.closed=false;this.closeEmitted=false;this[kOnFinished]=[];}function resetBuffer(state){state.buffered=[];state.bufferedIndex=0;state.allBuffers=true;state.allNoop=true;}WritableState.prototype.getBuffer=function getBuffer(){return ArrayPrototypeSlice(this.buffered,this.bufferedIndex)};ObjectDefineProperty(WritableState.prototype,"bufferedRequestCount",{__proto__:null,get(){return this.buffered.length-this.bufferedIndex}});function Writable(options){const isDuplex=this instanceof require("./duplex");if(!isDuplex&&!FunctionPrototypeSymbolHasInstance(Writable,this))return new Writable(options);this._writableState=new WritableState(options,this,isDuplex);if(options){if(typeof options.write==="function")this._write=options.write;if(typeof options.writev==="function")this._writev=options.writev;if(typeof options.destroy==="function")this._destroy=options.destroy;if(typeof options.final==="function")this._final=options.final;if(typeof options.construct==="function")this._construct=options.construct;if(options.signal)addAbortSignal(options.signal,this);}Stream.call(this,options);destroyImpl.construct(this,()=>{const state=this._writableState;if(!state.writing){clearBuffer(this,state);}finishMaybe(this,state);});}ObjectDefineProperty(Writable,SymbolHasInstance,{__proto__:null,value:function(object){if(FunctionPrototypeSymbolHasInstance(this,object))return true;if(this!==Writable)return false;return object&&object._writableState instanceof WritableState}});Writable.prototype.pipe=function(){errorOrDestroy(this,new ERR_STREAM_CANNOT_PIPE);};function _write(stream,chunk,encoding,cb){const state=stream._writableState;if(typeof encoding==="function"){cb=encoding;encoding=state.defaultEncoding;}else {if(!encoding)encoding=state.defaultEncoding;else if(encoding!=="buffer"&&!Buffer.isEncoding(encoding))throw new ERR_UNKNOWN_ENCODING(encoding);if(typeof cb!=="function")cb=nop;}if(chunk===null){throw new ERR_STREAM_NULL_VALUES}else if(!state.objectMode){if(typeof chunk==="string"){if(state.decodeStrings!==false){chunk=Buffer.from(chunk,encoding);encoding="buffer";}}else if(chunk instanceof Buffer){encoding="buffer";}else if(Stream._isUint8Array(chunk)){chunk=Stream._uint8ArrayToBuffer(chunk);encoding="buffer";}else {throw new ERR_INVALID_ARG_TYPE("chunk",["string","Buffer","Uint8Array"],chunk)}}let err;if(state.ending){err=new ERR_STREAM_WRITE_AFTER_END;}else if(state.destroyed){err=new ERR_STREAM_DESTROYED("write");}if(err){process.nextTick(cb,err);errorOrDestroy(stream,err,true);return err}state.pendingcb++;return writeOrBuffer(stream,state,chunk,encoding,cb)}Writable.prototype.write=function(chunk,encoding,cb){return _write(this,chunk,encoding,cb)===true};Writable.prototype.cork=function(){this._writableState.corked++;};Writable.prototype.uncork=function(){const state=this._writableState;if(state.corked){state.corked--;if(!state.writing)clearBuffer(this,state);}};Writable.prototype.setDefaultEncoding=function setDefaultEncoding(encoding){if(typeof encoding==="string")encoding=StringPrototypeToLowerCase(encoding);if(!Buffer.isEncoding(encoding))throw new ERR_UNKNOWN_ENCODING(encoding);this._writableState.defaultEncoding=encoding;return this};function writeOrBuffer(stream,state,chunk,encoding,callback){const len=state.objectMode?1:chunk.length;state.length+=len;const ret=state.length<state.highWaterMark;if(!ret)state.needDrain=true;if(state.writing||state.corked||state.errored||!state.constructed){state.buffered.push({chunk:chunk,encoding:encoding,callback:callback});if(state.allBuffers&&encoding!=="buffer"){state.allBuffers=false;}if(state.allNoop&&callback!==nop){state.allNoop=false;}}else {state.writelen=len;state.writecb=callback;state.writing=true;state.sync=true;stream._write(chunk,encoding,state.onwrite);state.sync=false;}return ret&&!state.errored&&!state.destroyed}function doWrite(stream,state,writev,len,chunk,encoding,cb){state.writelen=len;state.writecb=cb;state.writing=true;state.sync=true;if(state.destroyed)state.onwrite(new ERR_STREAM_DESTROYED("write"));else if(writev)stream._writev(chunk,state.onwrite);else stream._write(chunk,encoding,state.onwrite);state.sync=false;}function onwriteError(stream,state,er,cb){--state.pendingcb;cb(er);errorBuffer(state);errorOrDestroy(stream,er);}function onwrite(stream,er){const state=stream._writableState;const sync=state.sync;const cb=state.writecb;if(typeof cb!=="function"){errorOrDestroy(stream,new ERR_MULTIPLE_CALLBACK);return}state.writing=false;state.writecb=null;state.length-=state.writelen;state.writelen=0;if(er){if(!state.errored){state.errored=er;}if(stream._readableState&&!stream._readableState.errored){stream._readableState.errored=er;}if(sync){process.nextTick(onwriteError,stream,state,er,cb);}else {onwriteError(stream,state,er,cb);}}else {if(state.buffered.length>state.bufferedIndex){clearBuffer(stream,state);}if(sync){if(state.afterWriteTickInfo!==null&&state.afterWriteTickInfo.cb===cb){state.afterWriteTickInfo.count++;}else {state.afterWriteTickInfo={count:1,cb:cb,stream:stream,state:state};process.nextTick(afterWriteTick,state.afterWriteTickInfo);}}else {afterWrite(stream,state,1,cb);}}}function afterWriteTick({stream,state,count,cb}){state.afterWriteTickInfo=null;return afterWrite(stream,state,count,cb)}function afterWrite(stream,state,count,cb){const needDrain=!state.ending&&!stream.destroyed&&state.length===0&&state.needDrain;if(needDrain){state.needDrain=false;stream.emit("drain");}while(count-- >0){state.pendingcb--;cb();}if(state.destroyed){errorBuffer(state);}finishMaybe(stream,state);}function errorBuffer(state){if(state.writing){return}for(let n=state.bufferedIndex;n<state.buffered.length;++n){var _state$errored;const{chunk,callback}=state.buffered[n];const len=state.objectMode?1:chunk.length;state.length-=len;callback((_state$errored=state.errored)!==null&&_state$errored!==undefined?_state$errored:new ERR_STREAM_DESTROYED("write"));}const onfinishCallbacks=state[kOnFinished].splice(0);for(let i=0;i<onfinishCallbacks.length;i++){var _state$errored2;onfinishCallbacks[i]((_state$errored2=state.errored)!==null&&_state$errored2!==undefined?_state$errored2:new ERR_STREAM_DESTROYED("end"));}resetBuffer(state);}function clearBuffer(stream,state){if(state.corked||state.bufferProcessing||state.destroyed||!state.constructed){return}const{buffered,bufferedIndex,objectMode}=state;const bufferedLength=buffered.length-bufferedIndex;if(!bufferedLength){return}let i=bufferedIndex;state.bufferProcessing=true;if(bufferedLength>1&&stream._writev){state.pendingcb-=bufferedLength-1;const callback=state.allNoop?nop:err=>{for(let n=i;n<buffered.length;++n){buffered[n].callback(err);}};const chunks=state.allNoop&&i===0?buffered:ArrayPrototypeSlice(buffered,i);chunks.allBuffers=state.allBuffers;doWrite(stream,state,true,state.length,chunks,"",callback);resetBuffer(state);}else {do{const{chunk,encoding,callback}=buffered[i];buffered[i++]=null;const len=objectMode?1:chunk.length;doWrite(stream,state,false,len,chunk,encoding,callback);}while(i<buffered.length&&!state.writing);if(i===buffered.length){resetBuffer(state);}else if(i>256){buffered.splice(0,i);state.bufferedIndex=0;}else {state.bufferedIndex=i;}}state.bufferProcessing=false;}Writable.prototype._write=function(chunk,encoding,cb){if(this._writev){this._writev([{chunk:chunk,encoding:encoding}],cb);}else {throw new ERR_METHOD_NOT_IMPLEMENTED("_write()")}};Writable.prototype._writev=null;Writable.prototype.end=function(chunk,encoding,cb){const state=this._writableState;if(typeof chunk==="function"){cb=chunk;chunk=null;encoding=null;}else if(typeof encoding==="function"){cb=encoding;encoding=null;}let err;if(chunk!==null&&chunk!==undefined){const ret=_write(this,chunk,encoding);if(ret instanceof Error){err=ret;}}if(state.corked){state.corked=1;this.uncork();}if(err);else if(!state.errored&&!state.ending){state.ending=true;finishMaybe(this,state,true);state.ended=true;}else if(state.finished){err=new ERR_STREAM_ALREADY_FINISHED("end");}else if(state.destroyed){err=new ERR_STREAM_DESTROYED("end");}if(typeof cb==="function"){if(err||state.finished){process.nextTick(cb,err);}else {state[kOnFinished].push(cb);}}return this};function needFinish(state){return state.ending&&!state.destroyed&&state.constructed&&state.length===0&&!state.errored&&state.buffered.length===0&&!state.finished&&!state.writing&&!state.errorEmitted&&!state.closeEmitted}function callFinal(stream,state){let called=false;function onFinish(err){if(called){errorOrDestroy(stream,err!==null&&err!==undefined?err:ERR_MULTIPLE_CALLBACK());return}called=true;state.pendingcb--;if(err){const onfinishCallbacks=state[kOnFinished].splice(0);for(let i=0;i<onfinishCallbacks.length;i++){onfinishCallbacks[i](err);}errorOrDestroy(stream,err,state.sync);}else if(needFinish(state)){state.prefinished=true;stream.emit("prefinish");state.pendingcb++;process.nextTick(finish,stream,state);}}state.sync=true;state.pendingcb++;try{stream._final(onFinish);}catch(err){onFinish(err);}state.sync=false;}function prefinish(stream,state){if(!state.prefinished&&!state.finalCalled){if(typeof stream._final==="function"&&!state.destroyed){state.finalCalled=true;callFinal(stream,state);}else {state.prefinished=true;stream.emit("prefinish");}}}function finishMaybe(stream,state,sync){if(needFinish(state)){prefinish(stream,state);if(state.pendingcb===0){if(sync){state.pendingcb++;process.nextTick((stream,state)=>{if(needFinish(state)){finish(stream,state);}else {state.pendingcb--;}},stream,state);}else if(needFinish(state)){state.pendingcb++;finish(stream,state);}}}}function finish(stream,state){state.pendingcb--;state.finished=true;const onfinishCallbacks=state[kOnFinished].splice(0);for(let i=0;i<onfinishCallbacks.length;i++){onfinishCallbacks[i]();}stream.emit("finish");if(state.autoDestroy){const rState=stream._readableState;const autoDestroy=!rState||rState.autoDestroy&&(rState.endEmitted||rState.readable===false);if(autoDestroy){stream.destroy();}}}ObjectDefineProperties(Writable.prototype,{closed:{__proto__:null,get(){return this._writableState?this._writableState.closed:false}},destroyed:{__proto__:null,get(){return this._writableState?this._writableState.destroyed:false},set(value){if(this._writableState){this._writableState.destroyed=value;}}},writable:{__proto__:null,get(){const w=this._writableState;return !!w&&w.writable!==false&&!w.destroyed&&!w.errored&&!w.ending&&!w.ended},set(val){if(this._writableState){this._writableState.writable=!!val;}}},writableFinished:{__proto__:null,get(){return this._writableState?this._writableState.finished:false}},writableObjectMode:{__proto__:null,get(){return this._writableState?this._writableState.objectMode:false}},writableBuffer:{__proto__:null,get(){return this._writableState&&this._writableState.getBuffer()}},writableEnded:{__proto__:null,get(){return this._writableState?this._writableState.ending:false}},writableNeedDrain:{__proto__:null,get(){const wState=this._writableState;if(!wState)return false;return !wState.destroyed&&!wState.ending&&wState.needDrain}},writableHighWaterMark:{__proto__:null,get(){return this._writableState&&this._writableState.highWaterMark}},writableCorked:{__proto__:null,get(){return this._writableState?this._writableState.corked:0}},writableLength:{__proto__:null,get(){return this._writableState&&this._writableState.length}},errored:{__proto__:null,enumerable:false,get(){return this._writableState?this._writableState.errored:null}},writableAborted:{__proto__:null,enumerable:false,get:function(){return !!(this._writableState.writable!==false&&(this._writableState.destroyed||this._writableState.errored)&&!this._writableState.finished)}}});const destroy=destroyImpl.destroy;Writable.prototype.destroy=function(err,cb){const state=this._writableState;if(!state.destroyed&&(state.bufferedIndex<state.buffered.length||state[kOnFinished].length)){process.nextTick(errorBuffer,state);}destroy.call(this,err,cb);return this};Writable.prototype._undestroy=destroyImpl.undestroy;Writable.prototype._destroy=function(err,cb){cb(err);};Writable.prototype[EE.captureRejectionSymbol]=function(err){this.destroy(err);};let webStreamsAdapters;function lazyWebStreams(){if(webStreamsAdapters===undefined)webStreamsAdapters={};return webStreamsAdapters}Writable.fromWeb=function(writableStream,options){return lazyWebStreams().newStreamWritableFromWritableStream(writableStream,options)};Writable.toWeb=function(streamWritable){return lazyWebStreams().newWritableStreamFromStreamWritable(streamWritable)};},{"../../ours/errors":39,"../../ours/primordials":40,"./add-abort-signal":20,"./destroy":23,"./duplex":24,"./legacy":28,"./state":33,buffer:15,events:16,"process/":18}],37:[function(require,module,exports){const{ArrayIsArray,ArrayPrototypeIncludes,ArrayPrototypeJoin,ArrayPrototypeMap,NumberIsInteger,NumberIsNaN,NumberMAX_SAFE_INTEGER,NumberMIN_SAFE_INTEGER,NumberParseInt,ObjectPrototypeHasOwnProperty,RegExpPrototypeExec,String,StringPrototypeToUpperCase,StringPrototypeTrim}=require("../ours/primordials");const{hideStackFrames,codes:{ERR_SOCKET_BAD_PORT,ERR_INVALID_ARG_TYPE,ERR_INVALID_ARG_VALUE,ERR_OUT_OF_RANGE,ERR_UNKNOWN_SIGNAL}}=require("../ours/errors");const{normalizeEncoding}=require("../ours/util");const{isAsyncFunction,isArrayBufferView}=require("../ours/util").types;const signals={};function isInt32(value){return value===(value|0)}function isUint32(value){return value===value>>>0}const octalReg=/^[0-7]+$/;const modeDesc="must be a 32-bit unsigned integer or an octal string";function parseFileMode(value,name,def){if(typeof value==="undefined"){value=def;}if(typeof value==="string"){if(RegExpPrototypeExec(octalReg,value)===null){throw new ERR_INVALID_ARG_VALUE(name,value,modeDesc)}value=NumberParseInt(value,8);}validateUint32(value,name);return value}const validateInteger=hideStackFrames((value,name,min=NumberMIN_SAFE_INTEGER,max=NumberMAX_SAFE_INTEGER)=>{if(typeof value!=="number")throw new ERR_INVALID_ARG_TYPE(name,"number",value);if(!NumberIsInteger(value))throw new ERR_OUT_OF_RANGE(name,"an integer",value);if(value<min||value>max)throw new ERR_OUT_OF_RANGE(name,`>= ${min} && <= ${max}`,value)});const validateInt32=hideStackFrames((value,name,min=-2147483648,max=2147483647)=>{if(typeof value!=="number"){throw new ERR_INVALID_ARG_TYPE(name,"number",value)}if(!NumberIsInteger(value)){throw new ERR_OUT_OF_RANGE(name,"an integer",value)}if(value<min||value>max){throw new ERR_OUT_OF_RANGE(name,`>= ${min} && <= ${max}`,value)}});const validateUint32=hideStackFrames((value,name,positive=false)=>{if(typeof value!=="number"){throw new ERR_INVALID_ARG_TYPE(name,"number",value)}if(!NumberIsInteger(value)){throw new ERR_OUT_OF_RANGE(name,"an integer",value)}const min=positive?1:0;const max=4294967295;if(value<min||value>max){throw new ERR_OUT_OF_RANGE(name,`>= ${min} && <= ${max}`,value)}});function validateString(value,name){if(typeof value!=="string")throw new ERR_INVALID_ARG_TYPE(name,"string",value)}function validateNumber(value,name,min=undefined,max){if(typeof value!=="number")throw new ERR_INVALID_ARG_TYPE(name,"number",value);if(min!=null&&value<min||max!=null&&value>max||(min!=null||max!=null)&&NumberIsNaN(value)){throw new ERR_OUT_OF_RANGE(name,`${min!=null?`>= ${min}`:""}${min!=null&&max!=null?" && ":""}${max!=null?`<= ${max}`:""}`,value)}}const validateOneOf=hideStackFrames((value,name,oneOf)=>{if(!ArrayPrototypeIncludes(oneOf,value)){const allowed=ArrayPrototypeJoin(ArrayPrototypeMap(oneOf,v=>typeof v==="string"?`'${v}'`:String(v)),", ");const reason="must be one of: "+allowed;throw new ERR_INVALID_ARG_VALUE(name,value,reason)}});function validateBoolean(value,name){if(typeof value!=="boolean")throw new ERR_INVALID_ARG_TYPE(name,"boolean",value)}function getOwnPropertyValueOrDefault(options,key,defaultValue){return options==null||!ObjectPrototypeHasOwnProperty(options,key)?defaultValue:options[key]}const validateObject=hideStackFrames((value,name,options=null)=>{const allowArray=getOwnPropertyValueOrDefault(options,"allowArray",false);const allowFunction=getOwnPropertyValueOrDefault(options,"allowFunction",false);const nullable=getOwnPropertyValueOrDefault(options,"nullable",false);if(!nullable&&value===null||!allowArray&&ArrayIsArray(value)||typeof value!=="object"&&(!allowFunction||typeof value!=="function")){throw new ERR_INVALID_ARG_TYPE(name,"Object",value)}});const validateDictionary=hideStackFrames((value,name)=>{if(value!=null&&typeof value!=="object"&&typeof value!=="function"){throw new ERR_INVALID_ARG_TYPE(name,"a dictionary",value)}});const validateArray=hideStackFrames((value,name,minLength=0)=>{if(!ArrayIsArray(value)){throw new ERR_INVALID_ARG_TYPE(name,"Array",value)}if(value.length<minLength){const reason=`must be longer than ${minLength}`;throw new ERR_INVALID_ARG_VALUE(name,value,reason)}});function validateStringArray(value,name){validateArray(value,name);for(let i=0;i<value.length;i++){validateString(value[i],`${name}[${i}]`);}}function validateBooleanArray(value,name){validateArray(value,name);for(let i=0;i<value.length;i++){validateBoolean(value[i],`${name}[${i}]`);}}function validateSignalName(signal,name="signal"){validateString(signal,name);if(signals[signal]===undefined){if(signals[StringPrototypeToUpperCase(signal)]!==undefined){throw new ERR_UNKNOWN_SIGNAL(signal+" (signals must use all capital letters)")}throw new ERR_UNKNOWN_SIGNAL(signal)}}const validateBuffer=hideStackFrames((buffer,name="buffer")=>{if(!isArrayBufferView(buffer)){throw new ERR_INVALID_ARG_TYPE(name,["Buffer","TypedArray","DataView"],buffer)}});function validateEncoding(data,encoding){const normalizedEncoding=normalizeEncoding(encoding);const length=data.length;if(normalizedEncoding==="hex"&&length%2!==0){throw new ERR_INVALID_ARG_VALUE("encoding",encoding,`is invalid for data of length ${length}`)}}function validatePort(port,name="Port",allowZero=true){if(typeof port!=="number"&&typeof port!=="string"||typeof port==="string"&&StringPrototypeTrim(port).length===0||+port!==+port>>>0||port>65535||port===0&&!allowZero){throw new ERR_SOCKET_BAD_PORT(name,port,allowZero)}return port|0}const validateAbortSignal=hideStackFrames((signal,name)=>{if(signal!==undefined&&(signal===null||typeof signal!=="object"||!("aborted"in signal))){throw new ERR_INVALID_ARG_TYPE(name,"AbortSignal",signal)}});const validateFunction=hideStackFrames((value,name)=>{if(typeof value!=="function")throw new ERR_INVALID_ARG_TYPE(name,"Function",value)});const validatePlainFunction=hideStackFrames((value,name)=>{if(typeof value!=="function"||isAsyncFunction(value))throw new ERR_INVALID_ARG_TYPE(name,"Function",value)});const validateUndefined=hideStackFrames((value,name)=>{if(value!==undefined)throw new ERR_INVALID_ARG_TYPE(name,"undefined",value)});function validateUnion(value,name,union){if(!ArrayPrototypeIncludes(union,value)){throw new ERR_INVALID_ARG_TYPE(name,`('${ArrayPrototypeJoin(union,"|")}')`,value)}}const linkValueRegExp=/^(?:<[^>]*>)(?:\s*;\s*[^;"\s]+(?:=(")?[^;"\s]*\1)?)*$/;function validateLinkHeaderFormat(value,name){if(typeof value==="undefined"||!RegExpPrototypeExec(linkValueRegExp,value)){throw new ERR_INVALID_ARG_VALUE(name,value,'must be an array or string of format "</styles.css>; rel=preload; as=style"')}}function validateLinkHeaderValue(hints){if(typeof hints==="string"){validateLinkHeaderFormat(hints,"hints");return hints}else if(ArrayIsArray(hints)){const hintsLength=hints.length;let result="";if(hintsLength===0){return result}for(let i=0;i<hintsLength;i++){const link=hints[i];validateLinkHeaderFormat(link,"hints");result+=link;if(i!==hintsLength-1){result+=", ";}}return result}throw new ERR_INVALID_ARG_VALUE("hints",hints,'must be an array or string of format "</styles.css>; rel=preload; as=style"')}module.exports={isInt32:isInt32,isUint32:isUint32,parseFileMode:parseFileMode,validateArray:validateArray,validateStringArray:validateStringArray,validateBooleanArray:validateBooleanArray,validateBoolean:validateBoolean,validateBuffer:validateBuffer,validateDictionary:validateDictionary,validateEncoding:validateEncoding,validateFunction:validateFunction,validateInt32:validateInt32,validateInteger:validateInteger,validateNumber:validateNumber,validateObject:validateObject,validateOneOf:validateOneOf,validatePlainFunction:validatePlainFunction,validatePort:validatePort,validateSignalName:validateSignalName,validateString:validateString,validateUint32:validateUint32,validateUndefined:validateUndefined,validateUnion:validateUnion,validateAbortSignal:validateAbortSignal,validateLinkHeaderValue:validateLinkHeaderValue};},{"../ours/errors":39,"../ours/primordials":40,"../ours/util":41}],38:[function(require,module,exports){const CustomStream=require("../stream");const promises=require("../stream/promises");const originalDestroy=CustomStream.Readable.destroy;module.exports=CustomStream.Readable;module.exports._uint8ArrayToBuffer=CustomStream._uint8ArrayToBuffer;module.exports._isUint8Array=CustomStream._isUint8Array;module.exports.isDisturbed=CustomStream.isDisturbed;module.exports.isErrored=CustomStream.isErrored;module.exports.isReadable=CustomStream.isReadable;module.exports.Readable=CustomStream.Readable;module.exports.Writable=CustomStream.Writable;module.exports.Duplex=CustomStream.Duplex;module.exports.Transform=CustomStream.Transform;module.exports.PassThrough=CustomStream.PassThrough;module.exports.addAbortSignal=CustomStream.addAbortSignal;module.exports.finished=CustomStream.finished;module.exports.destroy=CustomStream.destroy;module.exports.destroy=originalDestroy;module.exports.pipeline=CustomStream.pipeline;module.exports.compose=CustomStream.compose;Object.defineProperty(CustomStream,"promises",{configurable:true,enumerable:true,get(){return promises}});module.exports.Stream=CustomStream.Stream;module.exports.default=module.exports;},{"../stream":42,"../stream/promises":43}],39:[function(require,module,exports){const{format,inspect,AggregateError:CustomAggregateError}=require("./util");const AggregateError=globalThis.AggregateError||CustomAggregateError;const kIsNodeError=Symbol("kIsNodeError");const kTypes=["string","function","number","object","Function","Object","boolean","bigint","symbol"];const classRegExp=/^([A-Z][a-z0-9]*)+$/;const nodeInternalPrefix="__node_internal_";const codes={};function assert(value,message){if(!value){throw new codes.ERR_INTERNAL_ASSERTION(message)}}function addNumericalSeparator(val){let res="";let i=val.length;const start=val[0]==="-"?1:0;for(;i>=start+4;i-=3){res=`_${val.slice(i-3,i)}${res}`;}return `${val.slice(0,i)}${res}`}function getMessage(key,msg,args){if(typeof msg==="function"){assert(msg.length<=args.length,`Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${msg.length}).`);return msg(...args)}const expectedLength=(msg.match(/%[dfijoOs]/g)||[]).length;assert(expectedLength===args.length,`Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${expectedLength}).`);if(args.length===0){return msg}return format(msg,...args)}function E(code,message,Base){if(!Base){Base=Error;}class NodeError extends Base{constructor(...args){super(getMessage(code,message,args));}toString(){return `${this.name} [${code}]: ${this.message}`}}Object.defineProperties(NodeError.prototype,{name:{value:Base.name,writable:true,enumerable:false,configurable:true},toString:{value(){return `${this.name} [${code}]: ${this.message}`},writable:true,enumerable:false,configurable:true}});NodeError.prototype.code=code;NodeError.prototype[kIsNodeError]=true;codes[code]=NodeError;}function hideStackFrames(fn){const hidden=nodeInternalPrefix+fn.name;Object.defineProperty(fn,"name",{value:hidden});return fn}function aggregateTwoErrors(innerError,outerError){if(innerError&&outerError&&innerError!==outerError){if(Array.isArray(outerError.errors)){outerError.errors.push(innerError);return outerError}const err=new AggregateError([outerError,innerError],outerError.message);err.code=outerError.code;return err}return innerError||outerError}class AbortError extends Error{constructor(message="The operation was aborted",options=undefined){if(options!==undefined&&typeof options!=="object"){throw new codes.ERR_INVALID_ARG_TYPE("options","Object",options)}super(message,options);this.code="ABORT_ERR";this.name="AbortError";}}E("ERR_ASSERTION","%s",Error);E("ERR_INVALID_ARG_TYPE",(name,expected,actual)=>{assert(typeof name==="string","'name' must be a string");if(!Array.isArray(expected)){expected=[expected];}let msg="The ";if(name.endsWith(" argument")){msg+=`${name} `;}else {msg+=`"${name}" ${name.includes(".")?"property":"argument"} `;}msg+="must be ";const types=[];const instances=[];const other=[];for(const value of expected){assert(typeof value==="string","All expected entries have to be of type string");if(kTypes.includes(value)){types.push(value.toLowerCase());}else if(classRegExp.test(value)){instances.push(value);}else {assert(value!=="object",'The value "object" should be written as "Object"');other.push(value);}}if(instances.length>0){const pos=types.indexOf("object");if(pos!==-1){types.splice(types,pos,1);instances.push("Object");}}if(types.length>0){switch(types.length){case 1:msg+=`of type ${types[0]}`;break;case 2:msg+=`one of type ${types[0]} or ${types[1]}`;break;default:{const last=types.pop();msg+=`one of type ${types.join(", ")}, or ${last}`;}}if(instances.length>0||other.length>0){msg+=" or ";}}if(instances.length>0){switch(instances.length){case 1:msg+=`an instance of ${instances[0]}`;break;case 2:msg+=`an instance of ${instances[0]} or ${instances[1]}`;break;default:{const last=instances.pop();msg+=`an instance of ${instances.join(", ")}, or ${last}`;}}if(other.length>0){msg+=" or ";}}switch(other.length){case 0:break;case 1:if(other[0].toLowerCase()!==other[0]){msg+="an ";}msg+=`${other[0]}`;break;case 2:msg+=`one of ${other[0]} or ${other[1]}`;break;default:{const last=other.pop();msg+=`one of ${other.join(", ")}, or ${last}`;}}if(actual==null){msg+=`. Received ${actual}`;}else if(typeof actual==="function"&&actual.name){msg+=`. Received function ${actual.name}`;}else if(typeof actual==="object"){var _actual$constructor;if((_actual$constructor=actual.constructor)!==null&&_actual$constructor!==undefined&&_actual$constructor.name){msg+=`. Received an instance of ${actual.constructor.name}`;}else {const inspected=inspect(actual,{depth:-1});msg+=`. Received ${inspected}`;}}else {let inspected=inspect(actual,{colors:false});if(inspected.length>25){inspected=`${inspected.slice(0,25)}...`;}msg+=`. Received type ${typeof actual} (${inspected})`;}return msg},TypeError);E("ERR_INVALID_ARG_VALUE",(name,value,reason="is invalid")=>{let inspected=inspect(value);if(inspected.length>128){inspected=inspected.slice(0,128)+"...";}const type=name.includes(".")?"property":"argument";return `The ${type} '${name}' ${reason}. Received ${inspected}`},TypeError);E("ERR_INVALID_RETURN_VALUE",(input,name,value)=>{var _value$constructor;const type=value!==null&&value!==undefined&&(_value$constructor=value.constructor)!==null&&_value$constructor!==undefined&&_value$constructor.name?`instance of ${value.constructor.name}`:`type ${typeof value}`;return `Expected ${input} to be returned from the "${name}"`+` function but got ${type}.`},TypeError);E("ERR_MISSING_ARGS",(...args)=>{assert(args.length>0,"At least one arg needs to be specified");let msg;const len=args.length;args=(Array.isArray(args)?args:[args]).map(a=>`"${a}"`).join(" or ");switch(len){case 1:msg+=`The ${args[0]} argument`;break;case 2:msg+=`The ${args[0]} and ${args[1]} arguments`;break;default:{const last=args.pop();msg+=`The ${args.join(", ")}, and ${last} arguments`;}break}return `${msg} must be specified`},TypeError);E("ERR_OUT_OF_RANGE",(str,range,input)=>{assert(range,'Missing "range" argument');let received;if(Number.isInteger(input)&&Math.abs(input)>2**32){received=addNumericalSeparator(String(input));}else if(typeof input==="bigint"){received=String(input);if(input>2n**32n||input<-(2n**32n)){received=addNumericalSeparator(received);}received+="n";}else {received=inspect(input);}return `The value of "${str}" is out of range. It must be ${range}. Received ${received}`},RangeError);E("ERR_MULTIPLE_CALLBACK","Callback called multiple times",Error);E("ERR_METHOD_NOT_IMPLEMENTED","The %s method is not implemented",Error);E("ERR_STREAM_ALREADY_FINISHED","Cannot call %s after a stream was finished",Error);E("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable",Error);E("ERR_STREAM_DESTROYED","Cannot call %s after a stream was destroyed",Error);E("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError);E("ERR_STREAM_PREMATURE_CLOSE","Premature close",Error);E("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF",Error);E("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event",Error);E("ERR_STREAM_WRITE_AFTER_END","write after end",Error);E("ERR_UNKNOWN_ENCODING","Unknown encoding: %s",TypeError);module.exports={AbortError:AbortError,aggregateTwoErrors:hideStackFrames(aggregateTwoErrors),hideStackFrames:hideStackFrames,codes:codes};},{"./util":41}],40:[function(require,module,exports){module.exports={ArrayIsArray(self){return Array.isArray(self)},ArrayPrototypeIncludes(self,el){return self.includes(el)},ArrayPrototypeIndexOf(self,el){return self.indexOf(el)},ArrayPrototypeJoin(self,sep){return self.join(sep)},ArrayPrototypeMap(self,fn){return self.map(fn)},ArrayPrototypePop(self,el){return self.pop(el)},ArrayPrototypePush(self,el){return self.push(el)},ArrayPrototypeSlice(self,start,end){return self.slice(start,end)},Error:Error,FunctionPrototypeCall(fn,thisArgs,...args){return fn.call(thisArgs,...args)},FunctionPrototypeSymbolHasInstance(self,instance){return Function.prototype[Symbol.hasInstance].call(self,instance)},MathFloor:Math.floor,Number:Number,NumberIsInteger:Number.isInteger,NumberIsNaN:Number.isNaN,NumberMAX_SAFE_INTEGER:Number.MAX_SAFE_INTEGER,NumberMIN_SAFE_INTEGER:Number.MIN_SAFE_INTEGER,NumberParseInt:Number.parseInt,ObjectDefineProperties(self,props){return Object.defineProperties(self,props)},ObjectDefineProperty(self,name,prop){return Object.defineProperty(self,name,prop)},ObjectGetOwnPropertyDescriptor(self,name){return Object.getOwnPropertyDescriptor(self,name)},ObjectKeys(obj){return Object.keys(obj)},ObjectSetPrototypeOf(target,proto){return Object.setPrototypeOf(target,proto)},Promise:Promise,PromisePrototypeCatch(self,fn){return self.catch(fn)},PromisePrototypeThen(self,thenFn,catchFn){return self.then(thenFn,catchFn)},PromiseReject(err){return Promise.reject(err)},ReflectApply:Reflect.apply,RegExpPrototypeTest(self,value){return self.test(value)},SafeSet:Set,String:String,StringPrototypeSlice(self,start,end){return self.slice(start,end)},StringPrototypeToLowerCase(self){return self.toLowerCase()},StringPrototypeToUpperCase(self){return self.toUpperCase()},StringPrototypeTrim(self){return self.trim()},Symbol:Symbol,SymbolFor:Symbol.for,SymbolAsyncIterator:Symbol.asyncIterator,SymbolHasInstance:Symbol.hasInstance,SymbolIterator:Symbol.iterator,TypedArrayPrototypeSet(self,buf,len){return self.set(buf,len)},Uint8Array:Uint8Array};},{}],41:[function(require,module,exports){const bufferModule=require("buffer");const AsyncFunction=Object.getPrototypeOf(async function(){}).constructor;const Blob=globalThis.Blob||bufferModule.Blob;const isBlob=typeof Blob!=="undefined"?function isBlob(b){return b instanceof Blob}:function isBlob(b){return false};class AggregateError extends Error{constructor(errors){if(!Array.isArray(errors)){throw new TypeError(`Expected input to be an Array, got ${typeof errors}`)}let message="";for(let i=0;i<errors.length;i++){message+=`    ${errors[i].stack}\n`;}super(message);this.name="AggregateError";this.errors=errors;}}module.exports={AggregateError:AggregateError,kEmptyObject:Object.freeze({}),once(callback){let called=false;return function(...args){if(called){return}called=true;callback.apply(this,args);}},createDeferredPromise:function(){let resolve;let reject;const promise=new Promise((res,rej)=>{resolve=res;reject=rej;});return {promise:promise,resolve:resolve,reject:reject}},promisify(fn){return new Promise((resolve,reject)=>{fn((err,...args)=>{if(err){return reject(err)}return resolve(...args)});})},debuglog(){return function(){}},format(format,...args){return format.replace(/%([sdifj])/g,function(...[_unused,type]){const replacement=args.shift();if(type==="f"){return replacement.toFixed(6)}else if(type==="j"){return JSON.stringify(replacement)}else if(type==="s"&&typeof replacement==="object"){const ctor=replacement.constructor!==Object?replacement.constructor.name:"";return `${ctor} {}`.trim()}else {return replacement.toString()}})},inspect(value){switch(typeof value){case "string":if(value.includes("'")){if(!value.includes('"')){return `"${value}"`}else if(!value.includes("`")&&!value.includes("${")){return `\`${value}\``}}return `'${value}'`;case "number":if(isNaN(value)){return "NaN"}else if(Object.is(value,-0)){return String(value)}return value;case "bigint":return `${String(value)}n`;case "boolean":case "undefined":return String(value);case "object":return "{}"}},types:{isAsyncFunction(fn){return fn instanceof AsyncFunction},isArrayBufferView(arr){return ArrayBuffer.isView(arr)}},isBlob:isBlob};module.exports.promisify.custom=Symbol.for("nodejs.util.promisify.custom");},{buffer:15}],42:[function(require,module,exports){const{Buffer}=require("buffer");const{ObjectDefineProperty,ObjectKeys,ReflectApply}=require("./ours/primordials");const{promisify:{custom:customPromisify}}=require("./ours/util");const{streamReturningOperators,promiseReturningOperators}=require("./internal/streams/operators");const{codes:{ERR_ILLEGAL_CONSTRUCTOR}}=require("./ours/errors");const compose=require("./internal/streams/compose");const{pipeline}=require("./internal/streams/pipeline");const{destroyer}=require("./internal/streams/destroy");const eos=require("./internal/streams/end-of-stream");const promises=require("./stream/promises");const utils=require("./internal/streams/utils");const Stream=module.exports=require("./internal/streams/legacy").Stream;Stream.isDisturbed=utils.isDisturbed;Stream.isErrored=utils.isErrored;Stream.isReadable=utils.isReadable;Stream.Readable=require("./internal/streams/readable");for(const key of ObjectKeys(streamReturningOperators)){const op=streamReturningOperators[key];function fn(...args){if(new.target){throw ERR_ILLEGAL_CONSTRUCTOR()}return Stream.Readable.from(ReflectApply(op,this,args))}ObjectDefineProperty(fn,"name",{__proto__:null,value:op.name});ObjectDefineProperty(fn,"length",{__proto__:null,value:op.length});ObjectDefineProperty(Stream.Readable.prototype,key,{__proto__:null,value:fn,enumerable:false,configurable:true,writable:true});}for(const key of ObjectKeys(promiseReturningOperators)){const op=promiseReturningOperators[key];function fn(...args){if(new.target){throw ERR_ILLEGAL_CONSTRUCTOR()}return ReflectApply(op,this,args)}ObjectDefineProperty(fn,"name",{__proto__:null,value:op.name});ObjectDefineProperty(fn,"length",{__proto__:null,value:op.length});ObjectDefineProperty(Stream.Readable.prototype,key,{__proto__:null,value:fn,enumerable:false,configurable:true,writable:true});}Stream.Writable=require("./internal/streams/writable");Stream.Duplex=require("./internal/streams/duplex");Stream.Transform=require("./internal/streams/transform");Stream.PassThrough=require("./internal/streams/passthrough");Stream.pipeline=pipeline;const{addAbortSignal}=require("./internal/streams/add-abort-signal");Stream.addAbortSignal=addAbortSignal;Stream.finished=eos;Stream.destroy=destroyer;Stream.compose=compose;ObjectDefineProperty(Stream,"promises",{__proto__:null,configurable:true,enumerable:true,get(){return promises}});ObjectDefineProperty(pipeline,customPromisify,{__proto__:null,enumerable:true,get(){return promises.pipeline}});ObjectDefineProperty(eos,customPromisify,{__proto__:null,enumerable:true,get(){return promises.finished}});Stream.Stream=Stream;Stream._isUint8Array=function isUint8Array(value){return value instanceof Uint8Array};Stream._uint8ArrayToBuffer=function _uint8ArrayToBuffer(chunk){return Buffer.from(chunk.buffer,chunk.byteOffset,chunk.byteLength)};},{"./internal/streams/add-abort-signal":20,"./internal/streams/compose":22,"./internal/streams/destroy":23,"./internal/streams/duplex":24,"./internal/streams/end-of-stream":26,"./internal/streams/legacy":28,"./internal/streams/operators":29,"./internal/streams/passthrough":30,"./internal/streams/pipeline":31,"./internal/streams/readable":32,"./internal/streams/transform":34,"./internal/streams/utils":35,"./internal/streams/writable":36,"./ours/errors":39,"./ours/primordials":40,"./ours/util":41,"./stream/promises":43,buffer:15}],43:[function(require,module,exports){const{ArrayPrototypePop,Promise}=require("../ours/primordials");const{isIterable,isNodeStream,isWebStream}=require("../internal/streams/utils");const{pipelineImpl:pl}=require("../internal/streams/pipeline");const{finished}=require("../internal/streams/end-of-stream");require("../../lib/stream.js");function pipeline(...streams){return new Promise((resolve,reject)=>{let signal;let end;const lastArg=streams[streams.length-1];if(lastArg&&typeof lastArg==="object"&&!isNodeStream(lastArg)&&!isIterable(lastArg)&&!isWebStream(lastArg)){const options=ArrayPrototypePop(streams);signal=options.signal;end=options.end;}pl(streams,(err,value)=>{if(err){reject(err);}else {resolve(value);}},{signal:signal,end:end});})}module.exports={finished:finished,pipeline:pipeline};},{"../../lib/stream.js":42,"../internal/streams/end-of-stream":26,"../internal/streams/pipeline":31,"../internal/streams/utils":35,"../ours/primordials":40}]},{},[10])(10)}); 
	} (n3_min));
	return n3_min.exports;
}

var n3_minExports = /*@__PURE__*/ requireN3_min();

class DatasetIdx {
    graphName;
    idx;
    constructor(graphName, idx) {
        this.graphName = graphName;
        this.idx = idx;
    }
    toString() {
        return `${this.graphName}:${this.idx}`;
    }
}

class RefTp {
    tp;
    val;
    constructor(tp, val) {
        this.tp = tp;
        this.val = val;
    }
    toString() {
        return JSON.stringify(this);
    }
    static getRefFromQuad(n) {
        if (n.termType === NodeType.IRI) {
            return new RefTp(NodeType.IRI, n.value);
        }
        if (n.termType === NodeType.BlankNode) {
            return new RefTp(NodeType.BlankNode, n.value);
        }
        return new RefTp(NodeType.Undefined, '');
    }
}

var utilExports = /*@__PURE__*/ requireUtil();

var constantsExports = /*@__PURE__*/ requireConstants();

var JsonLdErrorExports = /*@__PURE__*/ requireJsonLdError();
var JsonLdError = /*@__PURE__*/getDefaultExportFromCjs(JsonLdErrorExports);

var urlExports = /*@__PURE__*/ requireUrl();

// @ts-ignore-next-line
/**
 * Creates a built-in node document loader.
 *
 * @param options the options to use:
 *          [secure]: require all URLs to use HTTPS. (default: false)
 *          [strictSSL]: true to require SSL certificates to be valid,
 *            false not to. (default: true)
 *          [maxRedirects]: the maximum number of redirects to permit.
 *            (default: none)
 *          [headers]: an object (map) of headers which will be passed as
 *            request headers for the requested document. Accept is not
 *            allowed. (default: none).
 *          [httpAgent]: a Node.js `http.Agent` to use with 'http' requests.
 *            (default: none)
 *          [httpsAgent]: a Node.js `https.Agent` to use with 'https' requests.
 *            (default: An agent with rejectUnauthorized to the strictSSL
 *            value.ts)
 *
 * @return the node document loader.
 */
class JsonLDLoader {
    async loadDocument(url, redirects = []) {
        const isHttp = url.startsWith('http:');
        const isHttps = url.startsWith('https:');
        if (!isHttp && !isHttps) {
            throw new JsonLdError('URL could not be dereferenced; only "http" and "https" URLs are ' + 'supported.', 'jsonld.InvalidUrl', { code: 'loading document failed', url });
        }
        // TODO: disable cache until HTTP caching implemented
        // let doc = null; //cache.get(url);
        // if (doc !== null) {
        //   return doc;
        // }
        let alternate = null;
        const { res, body } = await _fetch({ url });
        const doc = { contextUrl: undefined, documentUrl: url, document: body || null };
        // handle error
        if (res.status >= 400) {
            throw new JsonLdError(`URL "${url}" could not be dereferenced: ${res.statusText}`, 'jsonld.InvalidUrl', {
                code: 'loading document failed',
                url,
                httpStatusCode: res.status
            });
        }
        const link = res.headers.get('link');
        let location = res.headers.get('location');
        const contentType = res.headers.get('content-type');
        // handle Link Header
        if (link && contentType !== 'application/ld+json' && contentType !== 'application/json') {
            // only 1 related link header permitted
            const linkHeaders = utilExports.parseLinkHeader(link);
            const linkedContext = linkHeaders[constantsExports.LINK_HEADER_CONTEXT];
            if (Array.isArray(linkedContext)) {
                throw new JsonLdError('URL could not be dereferenced, it has more than one associated ' + 'HTTP Link Header.', 'jsonld.InvalidUrl', { code: 'multiple context link headers', url });
            }
            if (linkedContext) {
                doc.contextUrl = linkedContext.target;
            }
            // "alternate" link header is a redirect
            alternate = linkHeaders.alternate;
            if (alternate &&
                alternate['type'] == 'application/ld+json' &&
                !(contentType || '').match(/^application\/(\w*\+)?json$/)) {
                location = urlExports.prependBase(url, alternate['target']);
            }
        }
        // handle redirect
        if ((alternate || (res.status >= 300 && res.status < 400)) && location) {
            if (redirects.length === -1) {
                throw new JsonLdError('URL could not be dereferenced; there were too many redirects.', 'jsonld.TooManyRedirects', {
                    code: 'loading document failed',
                    url,
                    httpStatusCode: res.status,
                    redirects
                });
            }
            if (redirects.indexOf(url) !== -1) {
                throw new JsonLdError('URL could not be dereferenced; infinite redirection was detected.', 'jsonld.InfiniteRedirectDetected', {
                    code: 'recursive context inclusion',
                    url,
                    httpStatusCode: res.status,
                    redirects
                });
            }
            redirects.push(url);
            // location can be relative, turn into full url
            const nextUrl = new URL(location, url).href;
            return this.loadDocument(nextUrl, redirects);
        }
        // cache for each redirected URL
        redirects.push(url);
        // TODO: disable cache until HTTP caching implemented
        /*
        for(let i = 0; i < redirects.length; ++i) {
          cache.set(
            redirects[i],
            {contextUrl: undefined, documentUrl: redirects[i], document: body});
        }
        */
        return doc;
    }
}
const ipfsMethodCat = 'cat';
function normalizeIPFSNodeURL(ipfsNodeURL, apiMethod) {
    const apiSuffix = '/api/v0';
    while (ipfsNodeURL.endsWith('/')) {
        ipfsNodeURL = ipfsNodeURL.slice(0, -1);
    }
    if (!ipfsNodeURL.endsWith(apiSuffix)) {
        ipfsNodeURL += apiSuffix;
    }
    return ipfsNodeURL + '/' + apiMethod;
}
function trimRightSlash(url) {
    while (url.endsWith('/')) {
        url = url.slice(0, -1);
    }
    return url;
}
function trimLeftSlash(url) {
    while (url.startsWith('/')) {
        url = url.slice(1);
    }
    return url;
}
function buildIpfsGatewayURL(ipfsGatewayURL, documentURL) {
    return trimRightSlash(ipfsGatewayURL) + '/ipfs/' + trimLeftSlash(documentURL);
}
async function loadIPFS(url, ipfsNodeURL = undefined, ipfsGatewayURL = undefined) {
    const documentURL = ipfsURLPrefix + url;
    if (!ipfsNodeURL && !ipfsGatewayURL) {
        throw new JsonLdError('IPFS is not configured', 'jsonld.IPFSNotConfigured', {
            code: 'loading document failed',
            url: documentURL
        });
    }
    if (ipfsNodeURL) {
        return await loadFromIPFSNode(url, ipfsNodeURL);
    }
    else {
        return await loadFromIPFSGateway(url, ipfsGatewayURL);
    }
}
async function loadFromIPFSNode(url, ipfsNodeURL) {
    const catRequestURL = new URL(normalizeIPFSNodeURL(ipfsNodeURL, ipfsMethodCat));
    catRequestURL.searchParams.append('arg', url);
    const { res, body } = await _fetch({ url: catRequestURL, method: 'POST' });
    if (res.status != 200) {
        throw new Error(`Error calling IPFS node: [${res.status}] ${res.statusText}\n${body}`);
    }
    return {
        contextUrl: undefined,
        document: body || null,
        documentUrl: ipfsURLPrefix + url
    };
}
async function loadFromIPFSGateway(url, ipfsGatewayURL = undefined) {
    if (!ipfsGatewayURL) {
        throw new JsonLdError('IPFS gateway is not configured', 'jsonld.IPFSNotConfigured', {
            code: 'loading document failed',
            url: ipfsURLPrefix + url
        });
    }
    const loader = new JsonLDLoader();
    const document = await loader.loadDocument(buildIpfsGatewayURL(ipfsGatewayURL, url), []);
    document.contextUrl = undefined;
    document.documentUrl = ipfsURLPrefix + url;
    return document;
}
async function _fetch({ url, method }) {
    const options = {};
    if (typeof method !== 'undefined') {
        options['method'] = method;
    }
    try {
        url = new URL(url);
        if (url.username && url.password) {
            options['headers'] = {
                ...(options['headers'] ?? {}),
                authorization: `Basic ${btoa(url.username + ':' + url.password)}`
            };
            url = removeCredentialsFromURL(url);
        }
        const res = await fetch(url, options);
        if (res.status >= 300 && res.status < 400) {
            return { res, body: null };
        }
        const text = await res.text();
        if (text && text.length > 0 && text.startsWith('{')) {
            return { res, body: JSON.parse(text) };
        }
        return { res, body: text };
    }
    catch (e) {
        // HTTP errors have a response in them
        // ky considers redirects HTTP errors
        if (e instanceof Error && 'response' in e) {
            return { res: e.response, body: null };
        }
        throw new JsonLdError('URL could not be dereferenced, an error occurred.', 'jsonld.LoadDocumentError', { code: 'loading document failed', url, cause: e });
    }
}
function removeCredentialsFromURL(url) {
    const urlObj = new URL(url);
    urlObj.username = '';
    urlObj.password = '';
    return urlObj.href;
}
const ipfsURLPrefix = 'ipfs://';
const getJsonLdDocLoader = (ipfsNodeURL = undefined, ipfsGatewayURL = undefined) => {
    return async (url) => {
        if (url.startsWith(ipfsURLPrefix)) {
            const ipfsURL = url.slice(ipfsURLPrefix.length);
            return await loadIPFS(ipfsURL, ipfsNodeURL, ipfsGatewayURL);
        }
        const loader = new JsonLDLoader();
        return loader.loadDocument(url, []);
    };
};

function getHasher(opts) {
    return opts?.hasher ?? DEFAULT_HASHER;
}
function getDocumentLoader(opts) {
    return opts?.documentLoader ?? getJsonLdDocLoader(opts?.ipfsNodeURL, opts?.ipfsGatewayURL);
}

class RDFDataset {
    graphs;
    constructor(graphs = new Map()) {
        this.graphs = graphs;
    }
    // assert consistency of dataset and validate that only
    // quads we support contains in dataset.
    static assertDatasetConsistency = (ds) => {
        for (const [graph, quads] of ds.graphs) {
            for (const q of quads) {
                if (!graph) {
                    throw new Error('empty graph name');
                }
                if (graph === MerklizationConstants.DEFAULT_GRAPH_NODE_NAME && q.graph.id) {
                    throw new Error('graph should be nil for @default graph');
                }
                if (!q.graph.id && graph !== MerklizationConstants.DEFAULT_GRAPH_NODE_NAME) {
                    throw new Error('graph should not be nil for non-@default graph');
                }
            }
        }
    };
    static async fromDocument(doc, documentLoader = getDocumentLoader()) {
        const normalizedData = await jsonldExports.canonize(doc, {
            format: MerklizationConstants.QUADS_FORMAT,
            documentLoader
        });
        const parser = new n3_minExports.Parser({ format: MerklizationConstants.QUADS_FORMAT });
        const quads = parser.parse(normalizedData);
        const ds = new RDFDataset();
        for (const q of quads) {
            const graphName = q.graph.termType === MerklizationConstants.DEFAULT_GRAPH_TERM_TYPE
                ? MerklizationConstants.DEFAULT_GRAPH_NODE_NAME
                : q.graph.value;
            const graphQuads = ds.graphs.get(graphName) ?? [];
            graphQuads.push(q);
            ds.graphs.set(graphName, graphQuads);
        }
        return ds;
    }
    static getQuad(ds, idx) {
        const quads = ds.graphs.get(idx.graphName);
        if (!quads) {
            throw MerklizationConstants.ERRORS.GRAPH_NOT_FOUND;
        }
        if (idx.idx >= quads.length) {
            throw MerklizationConstants.ERRORS.QUAD_NOT_FOUND;
        }
        return quads[idx.idx];
    }
    static iterGraphsOrdered(ds, callback) {
        const graphNames = [];
        for (const graphName of ds.graphs.keys()) {
            graphNames.push(graphName);
        }
        graphNames.sort((a, b) => a.localeCompare(b));
        for (const graphName of graphNames) {
            const quads = ds.graphs.get(graphName);
            if (!quads) {
                continue;
            }
            callback(graphName, quads);
        }
    }
    static findParent(ds, q) {
        const parent = RDFDataset.findParentInsideGraph(ds, q);
        if (parent) {
            return parent;
        }
        return RDFDataset.findGraphParent(ds, q);
    }
    static findParentInsideGraph(ds, q) {
        const graphName = getGraphName(q);
        let result;
        const quads = ds.graphs.get(graphName);
        if (!quads) {
            return undefined;
        }
        const qKey = RefTp.getRefFromQuad(q.subject);
        if (qKey.tp === NodeType.Undefined) {
            return undefined;
        }
        let found = false;
        // var result datasetIdx
        for (let idx = 0; idx < quads.length; idx++) {
            const quad = quads[idx];
            if (quad.equals(q)) {
                continue;
            }
            const objKey = RefTp.getRefFromQuad(quad.object);
            if (objKey.tp === NodeType.Undefined) {
                continue;
            }
            if (qKey?.tp === objKey?.tp && qKey?.val === objKey?.val) {
                if (found) {
                    throw MerklizationConstants.ERRORS.MULTIPLE_PARENTS_FOUND;
                }
                found = true;
                result = new DatasetIdx(graphName, idx);
            }
        }
        return result;
    }
    static findGraphParent(ds, q) {
        if (!q.graph) {
            return undefined;
        }
        const qKey = RefTp.getRefFromQuad(q.graph);
        if (qKey.tp === NodeType.Undefined) {
            return undefined;
        }
        if (qKey.tp !== NodeType.BlankNode) {
            throw new Error('graph parent can only be a blank node');
        }
        let found = false;
        let result;
        for (const [graphName, quads] of ds.graphs) {
            for (let idx = 0; idx < quads.length; idx++) {
                const quad = quads[idx];
                if (quad.equals(q)) {
                    continue;
                }
                const objKey = RefTp.getRefFromQuad(quad.object);
                if (objKey.tp === NodeType.Undefined) {
                    continue;
                }
                if (qKey.toString() == objKey.toString()) {
                    if (found) {
                        throw MerklizationConstants.ERRORS.MULTIPLE_PARENTS_FOUND;
                    }
                    found = true;
                    result = new DatasetIdx(graphName, idx);
                }
            }
        }
        if (found) {
            return result;
        }
        throw MerklizationConstants.ERRORS.PARENT_NOT_FOUND;
    }
}

const getMerkleTreeInitParam = (prefix = '', writable = true, maxLevels = 40) => {
    return {
        db: new InMemoryDB(str2Bytes(prefix)),
        writable,
        maxLevels
    };
};
const addEntriesToMerkleTree = async (mt, entries) => {
    for (const e of entries) {
        const { k, v } = await e.getKeyValueMTEntry();
        await mt.add(k, v);
    }
};

class Path {
    parts;
    hasher;
    constructor(parts = [], hasher = DEFAULT_HASHER) {
        this.parts = parts;
        this.hasher = hasher;
    }
    reverse() {
        return this.parts.reverse();
    }
    append(p) {
        this.parts = [...this.parts, ...p];
    }
    prepend(p) {
        this.parts = [...p, ...this.parts];
    }
    async mtEntry() {
        const h = this.hasher ?? DEFAULT_HASHER;
        const keyParts = new Array(this.parts.length).fill(BigInt(0));
        for (let i = 0; i < this.parts.length; i += 1) {
            const p = this.parts[i];
            if (typeof p === 'string') {
                const b = byteEncoder.encode(p);
                keyParts[i] = await h.hashBytes(b);
            }
            else if (typeof p === 'number') {
                keyParts[i] = BigInt(p);
            }
            else {
                throw new Error(`error: unexpected type ${typeof p}`);
            }
        }
        return h.hash(keyParts);
    }
    async pathFromContext(docStr, path, opts) {
        const doc = JSON.parse(docStr);
        if (!doc['@context']) {
            throw MerklizationConstants.ERRORS.CONTEXT_NOT_DEFINED;
        }
        const jsonldOpts = { documentLoader: getDocumentLoader(opts) };
        const emptyCtx = await jsonldExports.processContext(null, null, jsonldOpts);
        let parsedCtx = await jsonldExports.processContext(emptyCtx, doc, jsonldOpts);
        const parts = path.split('.');
        for (const i in parts) {
            const p = parts[i];
            if (MerklizationConstants.DIGITS_ONLY_REGEX.test(p)) {
                this.parts.push(parseInt(p));
            }
            else {
                const m = parsedCtx.mappings.get(p);
                if (typeof m !== 'object') {
                    throw MerklizationConstants.ERRORS.TERM_IS_NOT_DEFINED;
                }
                const id = m['@id'];
                if (!id) {
                    throw MerklizationConstants.ERRORS.NO_ID_ATTR;
                }
                const nextCtx = m['@context'];
                if (nextCtx) {
                    parsedCtx = await jsonldExports.processContext(parsedCtx, m, jsonldOpts);
                }
                this.parts.push(id);
            }
        }
    }
    async typeFromContext(ctxStr, path, opts) {
        const ctxObj = JSON.parse(ctxStr);
        if (!('@context' in ctxObj)) {
            throw MerklizationConstants.ERRORS.PARSED_CONTEXT_IS_NULL;
        }
        const jsonldOpts = { documentLoader: getDocumentLoader(opts) };
        const emptyCtx = await jsonldExports.processContext(null, null, jsonldOpts);
        let parsedCtx = await jsonldExports.processContext(emptyCtx, ctxObj, jsonldOpts);
        const parts = path.split('.');
        for (const i in parts) {
            const p = parts[i];
            const expP = expandType(parsedCtx, p);
            if (expP.hasContext) {
                parsedCtx = await jsonldExports.processContext(parsedCtx, expP.typeDef, jsonldOpts);
            }
            this.parts.push(expP['@id']);
        }
        return Path.getTypeMapping(parsedCtx, parts[parts.length - 1]);
    }
    static getTypeMapping(ctx, prop) {
        let rval = '';
        const defaultT = ctx.mappings.get('@type');
        if (defaultT) {
            rval = defaultT;
        }
        const propDef = ctx.mappings.get(prop);
        if (propDef && propDef['@type']) {
            rval = propDef['@type'];
        }
        return rval;
    }
    static newPath = (parts) => {
        const p = new Path();
        p.append(parts);
        return p;
    };
    static async pathFromDocument(ldCTX, doc, pathParts, acceptArray, opts) {
        if (pathParts.length === 0) {
            return [];
        }
        const term = pathParts[0];
        const newPathParts = pathParts.slice(1);
        const jsonldOpts = { documentLoader: getDocumentLoader(opts) };
        if (MerklizationConstants.DIGITS_ONLY_REGEX.test(term)) {
            const num = parseInt(term);
            const moreParts = await Path.pathFromDocument(ldCTX, doc, newPathParts, true, opts);
            return [num, ...moreParts];
        }
        if (typeof doc !== 'object') {
            throw new Error(`error: expected type object got ${typeof doc}`);
        }
        if (Array.isArray(doc)) {
            if (!doc.length) {
                throw new Error("error: can't generate path on zero-sized array");
            }
            if (!acceptArray) {
                throw MerklizationConstants.ERRORS.UNEXPECTED_ARR_ELEMENT;
            }
            return Path.pathFromDocument(ldCTX, doc[0], pathParts, false, opts);
        }
        if ('@context' in doc) {
            if (ldCTX) {
                ldCTX = await jsonldExports.processContext(ldCTX, doc, jsonldOpts);
            }
            else {
                const emptyCtx = await jsonldExports.processContext(null, null, jsonldOpts);
                ldCTX = await jsonldExports.processContext(emptyCtx, doc, jsonldOpts);
            }
        }
        const elemKeys = sortArr(Object.keys(doc));
        const typedScopedCtx = ldCTX;
        for (const k in elemKeys) {
            const key = elemKeys[k];
            if (key !== '@type') {
                const keyCtx = ldCTX?.mappings.get(key);
                if (typeof keyCtx !== 'object') {
                    continue;
                }
                if (keyCtx['@id'] !== '@type') {
                    continue;
                }
            }
            let types = [];
            const docKey = doc[key];
            if (Array.isArray(docKey)) {
                docKey.forEach((e) => {
                    if (typeof e !== 'string') {
                        throw new Error(`error: @type value must be an array of strings: ${typeof e}`);
                    }
                    types.push(e);
                    types = sortArr(types);
                });
            }
            else if (typeof docKey === 'string') {
                types.push(docKey);
            }
            else {
                throw new Error(`error: unexpected @type field type: ${typeof docKey}`);
            }
            for (const tt of types) {
                const td = typedScopedCtx?.mappings.get(tt);
                if (typeof td === 'object' && '@context' in td) {
                    ldCTX = await jsonldExports.processContext(ldCTX, td, jsonldOpts);
                }
            }
            break;
        }
        const expTerm = expandType(ldCTX, term);
        if (expTerm.hasContext) {
            if (ldCTX) {
                ldCTX = await jsonldExports.processContext(ldCTX, expTerm.typeDef, jsonldOpts);
            }
            else {
                const emptyCtx = await jsonldExports.processContext(null, null, jsonldOpts);
                ldCTX = await jsonldExports.processContext(emptyCtx, expTerm.typeDef, jsonldOpts);
            }
        }
        const moreParts = await Path.pathFromDocument(ldCTX, doc[term], newPathParts, true, opts);
        return [expTerm['@id'], ...moreParts];
    }
    static async newPathFromCtx(docStr, path, opts) {
        const p = new Path([], getHasher(opts));
        await p.pathFromContext(docStr, path, opts);
        return p;
    }
    static getContextPathKey = async (docStr, ctxTyp, fieldPath, opts) => {
        if (ctxTyp === '') {
            throw MerklizationConstants.ERRORS.CTX_TYP_IS_EMPTY;
        }
        if (fieldPath === '') {
            throw MerklizationConstants.ERRORS.FIELD_PATH_IS_EMPTY;
        }
        const fullPath = await Path.newPathFromCtx(docStr, `${ctxTyp}.${fieldPath}`, opts);
        const typePath = await Path.newPathFromCtx(docStr, ctxTyp, opts);
        return new Path(fullPath.parts.slice(typePath.parts.length));
    };
    static async fromDocument(ldCTX, docStr, path, opts) {
        const doc = JSON.parse(docStr);
        const pathParts = path.split('.');
        if (pathParts.length === 0) {
            throw MerklizationConstants.ERRORS.FIELD_PATH_IS_EMPTY;
        }
        const p = await Path.pathFromDocument(ldCTX, doc, pathParts, false, opts);
        return new Path(p, getHasher(opts));
    }
    static async newTypeFromContext(contextStr, path, opts) {
        const p = new Path([], getHasher(opts));
        return await p.typeFromContext(contextStr, path, opts);
    }
    static async getTypeIDFromContext(ctxStr, typeName, opts) {
        const ctxObj = JSON.parse(ctxStr);
        const jsonldOpts = { documentLoader: getDocumentLoader(opts) };
        const emptyCtx = await jsonldExports.processContext(null, null, jsonldOpts);
        const parsedCtx = await jsonldExports.processContext(emptyCtx, ctxObj, jsonldOpts);
        const typeDef = parsedCtx.mappings.get(typeName);
        if (!typeDef) {
            throw new Error(`looks like ${typeName} is not a type`);
        }
        const typeID = typeDef['@id'];
        if (!typeID) {
            throw new Error(`@id attribute is not found for type ${typeName}`);
        }
        // const typeIDStr = typeID.(string)
        if (typeof typeID !== 'string') {
            throw new Error(`@id attribute is not a string for type ${typeName}`);
        }
        return typeID;
    }
}
function expandType(ctx, term) {
    const m = ctx?.mappings.get(term);
    if (typeof m !== 'object') {
        throw MerklizationConstants.ERRORS.TERM_IS_NOT_DEFINED;
    }
    const id = m['@id'];
    if (!id) {
        throw MerklizationConstants.ERRORS.NO_ID_ATTR;
    }
    if (typeof id !== 'string') {
        throw new Error(`error: @id attr is not of type string: ${typeof id}`);
    }
    return {
        '@id': id,
        hasContext: '@context' in m,
        typeDef: m
    };
}

class QuadArrKey {
    subject;
    predicate;
    graph;
    constructor(q) {
        this.graph = getGraphName(q);
        const s = q.subject;
        switch (s.termType) {
            case NodeType.IRI:
                this.subject = { tp: NodeType.IRI, val: s.value };
                break;
            case NodeType.BlankNode:
                this.subject = { tp: NodeType.BlankNode, val: s.value };
                break;
            default:
                throw new Error('invalid subject type');
        }
        if (q.predicate.termType !== NodeType.IRI) {
            throw new Error('invalid predicate type');
        }
        this.predicate = q.predicate.value;
    }
    toString() {
        return JSON.stringify(this);
    }
    static countEntries = (nodes) => {
        const res = new Map();
        for (const q of nodes) {
            const key = new QuadArrKey(q);
            let c = res.get(key.toString()) ?? 0;
            res.set(key.toString(), ++c);
        }
        return res;
    };
}

class Relationship {
    parents;
    children;
    hasher;
    constructor(
    // string should be derived from instance of NodeID for the below maps
    parents = new Map(), 
    // map[qArrKey]map[refTp]int
    children = new Map(), hasher = DEFAULT_HASHER) {
        this.parents = parents;
        this.children = children;
        this.hasher = hasher;
    }
    static getIriValue(n) {
        if (n.predicate.termType === NodeType.IRI) {
            return n.predicate.value;
        }
        throw new Error('type is not IRI');
    }
    path(dsIdx, ds, idx) {
        const k = new Path([], this.hasher);
        if (typeof idx === 'number') {
            k.append([idx]);
        }
        const n = RDFDataset.getQuad(ds, dsIdx);
        const predicate = Relationship.getIriValue(n);
        k.append([predicate]);
        let nextKey = dsIdx;
        for (;;) {
            const parentIdx = this.parents.get(nextKey.toString());
            if (!parentIdx) {
                break;
            }
            const parent = RDFDataset.getQuad(ds, parentIdx);
            const parentKey = new QuadArrKey(parent);
            const childrenMap = this.children.get(parentKey.toString());
            if (!childrenMap) {
                throw new Error('parent mapping not found');
            }
            const childQuad = RDFDataset.getQuad(ds, nextKey);
            const childRef = RefTp.getRefFromQuad(childQuad.subject);
            const childIdx = childrenMap.get(childRef.toString());
            if (typeof childIdx !== 'number') {
                throw new Error('child not found in parents mapping');
            }
            const parentPredicate = Relationship.getIriValue(parent);
            if (childrenMap.size === 1) {
                k.append([parentPredicate]);
            }
            else {
                k.append([childIdx, parentPredicate]);
            }
            nextKey = parentIdx;
        }
        k.reverse();
        return k;
    }
    static async newRelationship(ds, hasher) {
        const r = new Relationship(new Map(), new Map(), hasher);
        RDFDataset.iterGraphsOrdered(ds, (graphName, quads) => {
            for (let idx = 0; idx < quads.length; idx++) {
                const q = quads[idx];
                const parentIdx = RDFDataset.findParent(ds, q);
                if (!parentIdx) {
                    continue;
                }
                const qIdx = new DatasetIdx(graphName, idx);
                r.parents.set(qIdx.toString(), parentIdx);
                const parentQuad = RDFDataset.getQuad(ds, parentIdx);
                const qKey = new QuadArrKey(parentQuad);
                //string here is json representation of RefTp interface
                let childrenM = r.children.get(qKey.toString());
                if (!childrenM) {
                    childrenM = new Map();
                    r.children.set(qKey.toString(), childrenM);
                }
                const childRef = RefTp.getRefFromQuad(q.subject);
                const childExists = childrenM.get(childRef.toString());
                if (typeof childExists !== 'number') {
                    const nextIdx = childrenM.size;
                    childrenM.set(childRef.toString(), nextIdx);
                }
            }
        });
        return r;
    }
}

/* eslint-disable no-case-declarations */
class RDFEntry {
    key;
    value;
    dataType;
    hasher;
    constructor(key, value, dataType = '', hasher = DEFAULT_HASHER) {
        this.key = key;
        this.value = value;
        this.dataType = dataType;
        this.hasher = hasher;
        if (!key.parts.length) {
            throw new Error('key length is zero');
        }
        validateValue(value);
    }
    getHasher() {
        return this.hasher;
    }
    getKeyMtEntry() {
        return this.key.mtEntry();
    }
    getValueMtEntry() {
        return MtValue.mkValueMtEntry(this.getHasher(), this.value);
    }
    async getKeyValueMTEntry() {
        const k = await this.getKeyMtEntry();
        const v = await this.getValueMtEntry();
        return { k, v };
    }
    static newRDFEntry = (k, v) => {
        const e = new RDFEntry(k, v);
        switch (typeof v) {
            case 'number':
            case 'string':
            case 'boolean':
                e.value = v;
                break;
            default:
                if (v instanceof qi.Instant) {
                    e.value = v;
                }
                else {
                    throw new Error(`error: incorrect value type ${typeof v}`);
                }
        }
        return e;
    };
    static async fromDataSet(ds, hasher = DEFAULT_HASHER) {
        RDFDataset.assertDatasetConsistency(ds);
        const quads = ds.graphs.get(MerklizationConstants.DEFAULT_GRAPH_NODE_NAME);
        if (!quads?.length) {
            throw new Error('@default graph not found in dataset');
        }
        const rs = await Relationship.newRelationship(ds, hasher);
        const entries = [];
        const graphProcessor = (graphName, quads) => {
            const counts = QuadArrKey.countEntries(quads);
            const seenCount = new Map();
            for (let quadIdx = 0; quadIdx < quads.length; quadIdx++) {
                let dataType = '';
                const q = quads[quadIdx];
                const quadGraphIdx = new DatasetIdx(graphName, quadIdx);
                const qKey = new QuadArrKey(q);
                let value;
                const qo = q.object.termType;
                const qoVal = q.object.value;
                switch (qo) {
                    case NodeType.Literal:
                        dataType = q?.object?.datatype?.value;
                        value = convertStringToXsdValue(dataType, qoVal, hasher.prime());
                        break;
                    case NodeType.IRI:
                        if (!qo) {
                            throw new Error('object IRI is nil');
                        }
                        value = qoVal;
                        break;
                    case NodeType.BlankNode:
                        const p = rs.children.get(qKey.toString());
                        if (p) {
                            // this node is a reference to known parent,
                            // skip it and do not put it into merkle tree because it
                            // will be used as parent for other nodes, but has
                            // no value to put itself.
                            continue;
                        }
                        throw new Error('BlankNode is not supported yet');
                    case 'Variable':
                        value = qoVal;
                        break;
                    default:
                        throw new Error("unexpected Quad's Object type");
                }
                const count = counts.get(qKey.toString());
                let idx;
                switch (count) {
                    case 0:
                        throw new Error('[assertion] key not found in counts');
                    case 1:
                        // leave idx nil: only one element, do not consider it as an array
                        break;
                    default:
                        const key = qKey.toString();
                        idx = seenCount.get(key) ?? 0;
                        seenCount.set(key, idx + 1);
                }
                const path = rs.path(quadGraphIdx, ds, idx);
                const e = new RDFEntry(path, value, dataType, hasher);
                entries.push(e);
            }
        };
        RDFDataset.iterGraphsOrdered(ds, graphProcessor);
        return entries;
    }
}

class Merklizer {
    srcDoc;
    mt;
    hasher;
    entries;
    compacted;
    documentLoader;
    constructor(srcDoc = null, mt = null, hasher = DEFAULT_HASHER, entries = new Map(), compacted = null, documentLoader = getDocumentLoader()) {
        this.srcDoc = srcDoc;
        this.mt = mt;
        this.hasher = hasher;
        this.entries = entries;
        this.compacted = compacted;
        this.documentLoader = documentLoader;
        if (!mt) {
            const { db, writable, maxLevels } = getMerkleTreeInitParam();
            this.mt = new Merkletree(db, writable, maxLevels);
        }
    }
    async proof(p) {
        const kHash = await p.mtEntry();
        if (!this.mt) {
            throw new Error('Merkle tree is not initialized');
        }
        const { proof } = await this.mt.generateProof(kHash);
        if (proof.existence) {
            if (!this.entries.has(kHash.toString())) {
                throw new Error('error: [assertion] no entry found while existence is true');
            }
            const entry = this.entries.get(kHash.toString());
            if (!entry) {
                throw new Error('entry not found');
            }
            const value = new MtValue(entry.value, this.hasher);
            return { proof, value };
        }
        return { proof };
    }
    mkValue(val) {
        return new MtValue(val, this.hasher);
    }
    async resolveDocPath(path, opts) {
        if (!this.srcDoc) {
            throw new Error('Source document is not initialized');
        }
        const realPath = await Path.fromDocument(null, this.srcDoc, path, opts);
        realPath.hasher = this.hasher;
        return realPath;
    }
    async entry(path) {
        const key = await path.mtEntry();
        const e = this.entries.get(key.toString());
        if (!e) {
            throw new Error('entry not found');
        }
        return e;
    }
    // JSONLDType returns the JSON-LD type of the given path. If there is no literal
    // by this path, it returns an error.
    async jsonLDType(path) {
        const entry = await this.entry(path);
        return entry.dataType;
    }
    async root() {
        if (!this.mt) {
            throw new Error('Merkle tree is not initialized');
        }
        return this.mt.root();
    }
    rawValue(path) {
        let parts = path.parts;
        if (!this.compacted) {
            throw new Error('Compact document is not initialized');
        }
        let obj = this.compacted;
        const traversedParts = [];
        const currentPath = () => traversedParts.join(' / ');
        while (parts.length > 0) {
            const p = parts[0];
            if (typeof p === 'string') {
                traversedParts.push(p);
                obj = (obj[p] ?? (obj['@graph'] ?? {})[p]);
                if (!obj) {
                    throw new Error('value not found');
                }
            }
            else if (typeof p === 'number') {
                traversedParts.push(p.toString());
                obj = this.rvExtractArrayIdx(obj, p);
            }
            else {
                throw new Error(`unexpected type of path ${currentPath()}`);
            }
            parts = parts.slice(1);
        }
        if (typeof obj['@value'] !== 'undefined') {
            return obj['@value'];
        }
        return obj;
    }
    rvExtractArrayIdx(obj, idx) {
        const isArray = Array.isArray(obj);
        if (!isArray) {
            throw new Error('expected array');
        }
        if (idx < 0 || idx >= obj.length) {
            throw new Error('index is out of range');
        }
        return obj[idx];
    }
    static async merklizeJSONLD(docStr, opts) {
        const hasher = getHasher(opts);
        const documentLoader = getDocumentLoader(opts);
        const mz = new Merklizer(docStr, null, hasher, new Map(), null, documentLoader);
        if (!mz) {
            throw new Error('Merklizer is not initialized');
        }
        if (!mz.srcDoc) {
            throw new Error('Source document is not initialized');
        }
        const doc = JSON.parse(mz.srcDoc);
        const dataset = await RDFDataset.fromDocument(doc, documentLoader);
        const entries = await RDFEntry.fromDataSet(dataset, hasher);
        for (const e of entries) {
            const k = await e.getKeyMtEntry();
            mz.entries.set(k.toString(), e);
        }
        if (!mz.mt) {
            throw new Error('Merkle tree is not initialized');
        }
        await addEntriesToMerkleTree(mz.mt, entries);
        // input: JsonLdDocument, ctx?: ContextDefinition, options?: Options.Compact
        mz.compacted = await jsonldExports.compact(doc, {}, {
            documentLoader,
            base: null,
            compactArrays: true,
            compactToRelative: true
        });
        return mz;
    }
    static async hashValue(dataType, value) {
        return this.hashValueWithHasher(DEFAULT_HASHER, dataType, value);
    }
    static async hashValueWithHasher(h, dataType, value) {
        const valueStr = convertAnyToString(value, dataType);
        const xsdValue = convertStringToXsdValue(dataType, valueStr, h.prime());
        return await MtValue.mkValueMtEntry(h, xsdValue);
    }
    get options() {
        return {
            hasher: this.hasher,
            documentLoader: this.documentLoader
        };
    }
}

export { MerklizationConstants, Merklizer, MtValue, Path, PoseidonHasher, qi as Temporal, getDocumentLoader };
//# sourceMappingURL=index.js.map

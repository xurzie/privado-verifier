import { type ContractRunner } from 'ethers';
import type { NonMerklizedIssuerBase, NonMerklizedIssuerBaseInterface } from '../NonMerklizedIssuerBase';
export declare class NonMerklizedIssuerBase__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CREDENTIAL_ADAPTER_VERSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "claimIndexHash";
            readonly type: "uint256";
        }];
        readonly name: "getClaimProof";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "root";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "existence";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "siblings";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "index";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "auxExistence";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256";
                readonly name: "auxIndex";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "auxValue";
                readonly type: "uint256";
            }];
            readonly internalType: "struct SmtLib.Proof";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "claimIndexHash";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "root";
            readonly type: "uint256";
        }];
        readonly name: "getClaimProofByRoot";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "root";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "existence";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "siblings";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "index";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "auxExistence";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256";
                readonly name: "auxIndex";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "auxValue";
                readonly type: "uint256";
            }];
            readonly internalType: "struct SmtLib.Proof";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "claimIndexHash";
            readonly type: "uint256";
        }];
        readonly name: "getClaimProofWithStateInfo";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "root";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "existence";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "siblings";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "index";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "auxExistence";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256";
                readonly name: "auxIndex";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "auxValue";
                readonly type: "uint256";
            }];
            readonly internalType: "struct SmtLib.Proof";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "state";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "claimsRoot";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "revocationsRoot";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "rootsRoot";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IdentityLib.StateInfo";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getClaimsTreeRoot";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_userId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_credentialId";
            readonly type: "uint256";
        }];
        readonly name: "getCredential";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "id";
                readonly type: "uint256";
            }, {
                readonly internalType: "string[]";
                readonly name: "context";
                readonly type: "string[]";
            }, {
                readonly internalType: "string";
                readonly name: "_type";
                readonly type: "string";
            }, {
                readonly internalType: "uint64";
                readonly name: "issuanceDate";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "string";
                    readonly name: "id";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "_type";
                    readonly type: "string";
                }];
                readonly internalType: "struct INonMerklizedIssuer.CredentialSchema";
                readonly name: "credentialSchema";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "string";
                    readonly name: "id";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "_type";
                    readonly type: "string";
                }];
                readonly internalType: "struct INonMerklizedIssuer.DisplayMethod";
                readonly name: "displayMethod";
                readonly type: "tuple";
            }];
            readonly internalType: "struct INonMerklizedIssuer.CredentialData";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "uint256[8]";
            readonly name: "";
            readonly type: "uint256[8]";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "key";
                readonly type: "string";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "rawValue";
                readonly type: "bytes";
            }];
            readonly internalType: "struct INonMerklizedIssuer.SubjectField[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getCredentialAdapterVersion";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getId";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getIsOldStateGenesis";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getLatestPublishedClaimsRoot";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getLatestPublishedRevocationsRoot";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getLatestPublishedRootsRoot";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getLatestPublishedState";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "revocationNonce";
            readonly type: "uint64";
        }];
        readonly name: "getRevocationProof";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "root";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "existence";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "siblings";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "index";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "auxExistence";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256";
                readonly name: "auxIndex";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "auxValue";
                readonly type: "uint256";
            }];
            readonly internalType: "struct SmtLib.Proof";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "revocationNonce";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint256";
            readonly name: "root";
            readonly type: "uint256";
        }];
        readonly name: "getRevocationProofByRoot";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "root";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "existence";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "siblings";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "index";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "auxExistence";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256";
                readonly name: "auxIndex";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "auxValue";
                readonly type: "uint256";
            }];
            readonly internalType: "struct SmtLib.Proof";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "revocationNonce";
            readonly type: "uint64";
        }];
        readonly name: "getRevocationProofWithStateInfo";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "root";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "existence";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "siblings";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "index";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "auxExistence";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256";
                readonly name: "auxIndex";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "auxValue";
                readonly type: "uint256";
            }];
            readonly internalType: "struct SmtLib.Proof";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "state";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "claimsRoot";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "revocationsRoot";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "rootsRoot";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IdentityLib.StateInfo";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "getRevocationStatus";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "state";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "claimsTreeRoot";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "revocationTreeRoot";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "rootOfRoots";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct IOnchainCredentialStatusResolver.IdentityStateRoots";
                readonly name: "issuer";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "root";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "bool";
                    readonly name: "existence";
                    readonly type: "bool";
                }, {
                    readonly internalType: "uint256[]";
                    readonly name: "siblings";
                    readonly type: "uint256[]";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "index";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "value";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "bool";
                    readonly name: "auxExistence";
                    readonly type: "bool";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "auxIndex";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "auxValue";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct IOnchainCredentialStatusResolver.Proof";
                readonly name: "mtp";
                readonly type: "tuple";
            }];
            readonly internalType: "struct IOnchainCredentialStatusResolver.CredentialStatus";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "state";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "getRevocationStatusByIdAndState";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "state";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "claimsTreeRoot";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "revocationTreeRoot";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "rootOfRoots";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct IOnchainCredentialStatusResolver.IdentityStateRoots";
                readonly name: "issuer";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "root";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "bool";
                    readonly name: "existence";
                    readonly type: "bool";
                }, {
                    readonly internalType: "uint256[]";
                    readonly name: "siblings";
                    readonly type: "uint256[]";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "index";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "value";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "bool";
                    readonly name: "auxExistence";
                    readonly type: "bool";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "auxIndex";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "auxValue";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct IOnchainCredentialStatusResolver.Proof";
                readonly name: "mtp";
                readonly type: "tuple";
            }];
            readonly internalType: "struct IOnchainCredentialStatusResolver.CredentialStatus";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRevocationsTreeRoot";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "rootsTreeRoot";
            readonly type: "uint256";
        }];
        readonly name: "getRootProof";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "root";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "existence";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "siblings";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "index";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "auxExistence";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256";
                readonly name: "auxIndex";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "auxValue";
                readonly type: "uint256";
            }];
            readonly internalType: "struct SmtLib.Proof";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "claimsTreeRoot";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "root";
            readonly type: "uint256";
        }];
        readonly name: "getRootProofByRoot";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "root";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "existence";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "siblings";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "index";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "auxExistence";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256";
                readonly name: "auxIndex";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "auxValue";
                readonly type: "uint256";
            }];
            readonly internalType: "struct SmtLib.Proof";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "rootsTreeRoot";
            readonly type: "uint256";
        }];
        readonly name: "getRootProofWithStateInfo";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "root";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "existence";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "siblings";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "index";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "auxExistence";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256";
                readonly name: "auxIndex";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "auxValue";
                readonly type: "uint256";
            }];
            readonly internalType: "struct SmtLib.Proof";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "state";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "claimsRoot";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "revocationsRoot";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "rootsRoot";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IdentityLib.StateInfo";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "state";
            readonly type: "uint256";
        }];
        readonly name: "getRootsByState";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "claimsRoot";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "revocationsRoot";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "rootsRoot";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IdentityLib.Roots";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRootsTreeRoot";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getSmtDepth";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_userId";
            readonly type: "uint256";
        }];
        readonly name: "getUserCredentialIds";
        readonly outputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_stateContractAddr";
            readonly type: "address";
        }, {
            readonly internalType: "bytes2";
            readonly name: "idType";
            readonly type: "bytes2";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): NonMerklizedIssuerBaseInterface;
    static connect(address: string, runner?: ContractRunner | null): NonMerklizedIssuerBase;
}
//# sourceMappingURL=NonMerklizedIssuerBase__factory.d.ts.map
{"version":3,"file":"NonMerklizedIssuerBase__factory.js","sourceRoot":"","sources":["../../../src/factories/NonMerklizedIssuerBase__factory.ts"],"names":[],"mappings":"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","sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Interface, type ContractRunner } from 'ethers';\nimport type {\n  NonMerklizedIssuerBase,\n  NonMerklizedIssuerBaseInterface\n} from '../NonMerklizedIssuerBase';\n\nconst _abi = [\n  {\n    inputs: [],\n    name: 'CREDENTIAL_ADAPTER_VERSION',\n    outputs: [\n      {\n        internalType: 'string',\n        name: '',\n        type: 'string'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'claimIndexHash',\n        type: 'uint256'\n      }\n    ],\n    name: 'getClaimProof',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'root',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bool',\n            name: 'existence',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256[]',\n            name: 'siblings',\n            type: 'uint256[]'\n          },\n          {\n            internalType: 'uint256',\n            name: 'index',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bool',\n            name: 'auxExistence',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256',\n            name: 'auxIndex',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'auxValue',\n            type: 'uint256'\n          }\n        ],\n        internalType: 'struct SmtLib.Proof',\n        name: '',\n        type: 'tuple'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'claimIndexHash',\n        type: 'uint256'\n      },\n      {\n        internalType: 'uint256',\n        name: 'root',\n        type: 'uint256'\n      }\n    ],\n    name: 'getClaimProofByRoot',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'root',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bool',\n            name: 'existence',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256[]',\n            name: 'siblings',\n            type: 'uint256[]'\n          },\n          {\n            internalType: 'uint256',\n            name: 'index',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bool',\n            name: 'auxExistence',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256',\n            name: 'auxIndex',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'auxValue',\n            type: 'uint256'\n          }\n        ],\n        internalType: 'struct SmtLib.Proof',\n        name: '',\n        type: 'tuple'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'claimIndexHash',\n        type: 'uint256'\n      }\n    ],\n    name: 'getClaimProofWithStateInfo',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'root',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bool',\n            name: 'existence',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256[]',\n            name: 'siblings',\n            type: 'uint256[]'\n          },\n          {\n            internalType: 'uint256',\n            name: 'index',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bool',\n            name: 'auxExistence',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256',\n            name: 'auxIndex',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'auxValue',\n            type: 'uint256'\n          }\n        ],\n        internalType: 'struct SmtLib.Proof',\n        name: '',\n        type: 'tuple'\n      },\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'state',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'claimsRoot',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'revocationsRoot',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'rootsRoot',\n            type: 'uint256'\n          }\n        ],\n        internalType: 'struct IdentityLib.StateInfo',\n        name: '',\n        type: 'tuple'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'getClaimsTreeRoot',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: '_userId',\n        type: 'uint256'\n      },\n      {\n        internalType: 'uint256',\n        name: '_credentialId',\n        type: 'uint256'\n      }\n    ],\n    name: 'getCredential',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'id',\n            type: 'uint256'\n          },\n          {\n            internalType: 'string[]',\n            name: 'context',\n            type: 'string[]'\n          },\n          {\n            internalType: 'string',\n            name: '_type',\n            type: 'string'\n          },\n          {\n            internalType: 'uint64',\n            name: 'issuanceDate',\n            type: 'uint64'\n          },\n          {\n            components: [\n              {\n                internalType: 'string',\n                name: 'id',\n                type: 'string'\n              },\n              {\n                internalType: 'string',\n                name: '_type',\n                type: 'string'\n              }\n            ],\n            internalType: 'struct INonMerklizedIssuer.CredentialSchema',\n            name: 'credentialSchema',\n            type: 'tuple'\n          },\n          {\n            components: [\n              {\n                internalType: 'string',\n                name: 'id',\n                type: 'string'\n              },\n              {\n                internalType: 'string',\n                name: '_type',\n                type: 'string'\n              }\n            ],\n            internalType: 'struct INonMerklizedIssuer.DisplayMethod',\n            name: 'displayMethod',\n            type: 'tuple'\n          }\n        ],\n        internalType: 'struct INonMerklizedIssuer.CredentialData',\n        name: '',\n        type: 'tuple'\n      },\n      {\n        internalType: 'uint256[8]',\n        name: '',\n        type: 'uint256[8]'\n      },\n      {\n        components: [\n          {\n            internalType: 'string',\n            name: 'key',\n            type: 'string'\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bytes',\n            name: 'rawValue',\n            type: 'bytes'\n          }\n        ],\n        internalType: 'struct INonMerklizedIssuer.SubjectField[]',\n        name: '',\n        type: 'tuple[]'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'getCredentialAdapterVersion',\n    outputs: [\n      {\n        internalType: 'string',\n        name: '',\n        type: 'string'\n      }\n    ],\n    stateMutability: 'pure',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'getId',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'getIsOldStateGenesis',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'getLatestPublishedClaimsRoot',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'getLatestPublishedRevocationsRoot',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'getLatestPublishedRootsRoot',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'getLatestPublishedState',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint64',\n        name: 'revocationNonce',\n        type: 'uint64'\n      }\n    ],\n    name: 'getRevocationProof',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'root',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bool',\n            name: 'existence',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256[]',\n            name: 'siblings',\n            type: 'uint256[]'\n          },\n          {\n            internalType: 'uint256',\n            name: 'index',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bool',\n            name: 'auxExistence',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256',\n            name: 'auxIndex',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'auxValue',\n            type: 'uint256'\n          }\n        ],\n        internalType: 'struct SmtLib.Proof',\n        name: '',\n        type: 'tuple'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint64',\n        name: 'revocationNonce',\n        type: 'uint64'\n      },\n      {\n        internalType: 'uint256',\n        name: 'root',\n        type: 'uint256'\n      }\n    ],\n    name: 'getRevocationProofByRoot',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'root',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bool',\n            name: 'existence',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256[]',\n            name: 'siblings',\n            type: 'uint256[]'\n          },\n          {\n            internalType: 'uint256',\n            name: 'index',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bool',\n            name: 'auxExistence',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256',\n            name: 'auxIndex',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'auxValue',\n            type: 'uint256'\n          }\n        ],\n        internalType: 'struct SmtLib.Proof',\n        name: '',\n        type: 'tuple'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint64',\n        name: 'revocationNonce',\n        type: 'uint64'\n      }\n    ],\n    name: 'getRevocationProofWithStateInfo',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'root',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bool',\n            name: 'existence',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256[]',\n            name: 'siblings',\n            type: 'uint256[]'\n          },\n          {\n            internalType: 'uint256',\n            name: 'index',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bool',\n            name: 'auxExistence',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256',\n            name: 'auxIndex',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'auxValue',\n            type: 'uint256'\n          }\n        ],\n        internalType: 'struct SmtLib.Proof',\n        name: '',\n        type: 'tuple'\n      },\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'state',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'claimsRoot',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'revocationsRoot',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'rootsRoot',\n            type: 'uint256'\n          }\n        ],\n        internalType: 'struct IdentityLib.StateInfo',\n        name: '',\n        type: 'tuple'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'id',\n        type: 'uint256'\n      },\n      {\n        internalType: 'uint64',\n        name: 'nonce',\n        type: 'uint64'\n      }\n    ],\n    name: 'getRevocationStatus',\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'state',\n                type: 'uint256'\n              },\n              {\n                internalType: 'uint256',\n                name: 'claimsTreeRoot',\n                type: 'uint256'\n              },\n              {\n                internalType: 'uint256',\n                name: 'revocationTreeRoot',\n                type: 'uint256'\n              },\n              {\n                internalType: 'uint256',\n                name: 'rootOfRoots',\n                type: 'uint256'\n              }\n            ],\n            internalType: 'struct IOnchainCredentialStatusResolver.IdentityStateRoots',\n            name: 'issuer',\n            type: 'tuple'\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'root',\n                type: 'uint256'\n              },\n              {\n                internalType: 'bool',\n                name: 'existence',\n                type: 'bool'\n              },\n              {\n                internalType: 'uint256[]',\n                name: 'siblings',\n                type: 'uint256[]'\n              },\n              {\n                internalType: 'uint256',\n                name: 'index',\n                type: 'uint256'\n              },\n              {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256'\n              },\n              {\n                internalType: 'bool',\n                name: 'auxExistence',\n                type: 'bool'\n              },\n              {\n                internalType: 'uint256',\n                name: 'auxIndex',\n                type: 'uint256'\n              },\n              {\n                internalType: 'uint256',\n                name: 'auxValue',\n                type: 'uint256'\n              }\n            ],\n            internalType: 'struct IOnchainCredentialStatusResolver.Proof',\n            name: 'mtp',\n            type: 'tuple'\n          }\n        ],\n        internalType: 'struct IOnchainCredentialStatusResolver.CredentialStatus',\n        name: '',\n        type: 'tuple'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'id',\n        type: 'uint256'\n      },\n      {\n        internalType: 'uint256',\n        name: 'state',\n        type: 'uint256'\n      },\n      {\n        internalType: 'uint64',\n        name: 'nonce',\n        type: 'uint64'\n      }\n    ],\n    name: 'getRevocationStatusByIdAndState',\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'state',\n                type: 'uint256'\n              },\n              {\n                internalType: 'uint256',\n                name: 'claimsTreeRoot',\n                type: 'uint256'\n              },\n              {\n                internalType: 'uint256',\n                name: 'revocationTreeRoot',\n                type: 'uint256'\n              },\n              {\n                internalType: 'uint256',\n                name: 'rootOfRoots',\n                type: 'uint256'\n              }\n            ],\n            internalType: 'struct IOnchainCredentialStatusResolver.IdentityStateRoots',\n            name: 'issuer',\n            type: 'tuple'\n          },\n          {\n            components: [\n              {\n                internalType: 'uint256',\n                name: 'root',\n                type: 'uint256'\n              },\n              {\n                internalType: 'bool',\n                name: 'existence',\n                type: 'bool'\n              },\n              {\n                internalType: 'uint256[]',\n                name: 'siblings',\n                type: 'uint256[]'\n              },\n              {\n                internalType: 'uint256',\n                name: 'index',\n                type: 'uint256'\n              },\n              {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256'\n              },\n              {\n                internalType: 'bool',\n                name: 'auxExistence',\n                type: 'bool'\n              },\n              {\n                internalType: 'uint256',\n                name: 'auxIndex',\n                type: 'uint256'\n              },\n              {\n                internalType: 'uint256',\n                name: 'auxValue',\n                type: 'uint256'\n              }\n            ],\n            internalType: 'struct IOnchainCredentialStatusResolver.Proof',\n            name: 'mtp',\n            type: 'tuple'\n          }\n        ],\n        internalType: 'struct IOnchainCredentialStatusResolver.CredentialStatus',\n        name: '',\n        type: 'tuple'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'getRevocationsTreeRoot',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'rootsTreeRoot',\n        type: 'uint256'\n      }\n    ],\n    name: 'getRootProof',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'root',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bool',\n            name: 'existence',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256[]',\n            name: 'siblings',\n            type: 'uint256[]'\n          },\n          {\n            internalType: 'uint256',\n            name: 'index',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bool',\n            name: 'auxExistence',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256',\n            name: 'auxIndex',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'auxValue',\n            type: 'uint256'\n          }\n        ],\n        internalType: 'struct SmtLib.Proof',\n        name: '',\n        type: 'tuple'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'claimsTreeRoot',\n        type: 'uint256'\n      },\n      {\n        internalType: 'uint256',\n        name: 'root',\n        type: 'uint256'\n      }\n    ],\n    name: 'getRootProofByRoot',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'root',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bool',\n            name: 'existence',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256[]',\n            name: 'siblings',\n            type: 'uint256[]'\n          },\n          {\n            internalType: 'uint256',\n            name: 'index',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bool',\n            name: 'auxExistence',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256',\n            name: 'auxIndex',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'auxValue',\n            type: 'uint256'\n          }\n        ],\n        internalType: 'struct SmtLib.Proof',\n        name: '',\n        type: 'tuple'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'rootsTreeRoot',\n        type: 'uint256'\n      }\n    ],\n    name: 'getRootProofWithStateInfo',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'root',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bool',\n            name: 'existence',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256[]',\n            name: 'siblings',\n            type: 'uint256[]'\n          },\n          {\n            internalType: 'uint256',\n            name: 'index',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bool',\n            name: 'auxExistence',\n            type: 'bool'\n          },\n          {\n            internalType: 'uint256',\n            name: 'auxIndex',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'auxValue',\n            type: 'uint256'\n          }\n        ],\n        internalType: 'struct SmtLib.Proof',\n        name: '',\n        type: 'tuple'\n      },\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'state',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'claimsRoot',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'revocationsRoot',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'rootsRoot',\n            type: 'uint256'\n          }\n        ],\n        internalType: 'struct IdentityLib.StateInfo',\n        name: '',\n        type: 'tuple'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'state',\n        type: 'uint256'\n      }\n    ],\n    name: 'getRootsByState',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'claimsRoot',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'revocationsRoot',\n            type: 'uint256'\n          },\n          {\n            internalType: 'uint256',\n            name: 'rootsRoot',\n            type: 'uint256'\n          }\n        ],\n        internalType: 'struct IdentityLib.Roots',\n        name: '',\n        type: 'tuple'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'getRootsTreeRoot',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'getSmtDepth',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    stateMutability: 'pure',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: '_userId',\n        type: 'uint256'\n      }\n    ],\n    name: 'getUserCredentialIds',\n    outputs: [\n      {\n        internalType: 'uint256[]',\n        name: '',\n        type: 'uint256[]'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: '_stateContractAddr',\n        type: 'address'\n      },\n      {\n        internalType: 'bytes2',\n        name: 'idType',\n        type: 'bytes2'\n      }\n    ],\n    name: 'initialize',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes4',\n        name: 'interfaceId',\n        type: 'bytes4'\n      }\n    ],\n    name: 'supportsInterface',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  }\n] as const;\n\nexport class NonMerklizedIssuerBase__factory {\n  static readonly abi = _abi;\n  static createInterface(): NonMerklizedIssuerBaseInterface {\n    return new Interface(_abi) as NonMerklizedIssuerBaseInterface;\n  }\n  static connect(address: string, runner?: ContractRunner | null): NonMerklizedIssuerBase {\n    return new Contract(address, _abi, runner) as unknown as NonMerklizedIssuerBase;\n  }\n}\n"]}
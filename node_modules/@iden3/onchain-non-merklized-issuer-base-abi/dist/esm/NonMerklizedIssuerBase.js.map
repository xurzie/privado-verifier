{"version":3,"file":"NonMerklizedIssuerBase.js","sourceRoot":"","sources":["../../src/NonMerklizedIssuerBase.ts"],"names":[],"mappings":"","sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumberish,\n  BytesLike,\n  FunctionFragment,\n  Result,\n  Interface,\n  AddressLike,\n  ContractRunner,\n  ContractMethod,\n  Listener\n} from 'ethers';\nimport type {\n  TypedContractEvent,\n  TypedDeferredTopicFilter,\n  TypedEventLog,\n  TypedListener,\n  TypedContractMethod\n} from './common';\n\nexport declare namespace SmtLib {\n  export type ProofStruct = {\n    root: BigNumberish;\n    existence: boolean;\n    siblings: BigNumberish[];\n    index: BigNumberish;\n    value: BigNumberish;\n    auxExistence: boolean;\n    auxIndex: BigNumberish;\n    auxValue: BigNumberish;\n  };\n\n  export type ProofStructOutput = [\n    root: bigint,\n    existence: boolean,\n    siblings: bigint[],\n    index: bigint,\n    value: bigint,\n    auxExistence: boolean,\n    auxIndex: bigint,\n    auxValue: bigint\n  ] & {\n    root: bigint;\n    existence: boolean;\n    siblings: bigint[];\n    index: bigint;\n    value: bigint;\n    auxExistence: boolean;\n    auxIndex: bigint;\n    auxValue: bigint;\n  };\n}\n\nexport declare namespace IdentityLib {\n  export type StateInfoStruct = {\n    state: BigNumberish;\n    claimsRoot: BigNumberish;\n    revocationsRoot: BigNumberish;\n    rootsRoot: BigNumberish;\n  };\n\n  export type StateInfoStructOutput = [\n    state: bigint,\n    claimsRoot: bigint,\n    revocationsRoot: bigint,\n    rootsRoot: bigint\n  ] & {\n    state: bigint;\n    claimsRoot: bigint;\n    revocationsRoot: bigint;\n    rootsRoot: bigint;\n  };\n\n  export type RootsStruct = {\n    claimsRoot: BigNumberish;\n    revocationsRoot: BigNumberish;\n    rootsRoot: BigNumberish;\n  };\n\n  export type RootsStructOutput = [\n    claimsRoot: bigint,\n    revocationsRoot: bigint,\n    rootsRoot: bigint\n  ] & { claimsRoot: bigint; revocationsRoot: bigint; rootsRoot: bigint };\n}\n\nexport declare namespace INonMerklizedIssuer {\n  export type CredentialSchemaStruct = { id: string; _type: string };\n\n  export type CredentialSchemaStructOutput = [id: string, _type: string] & {\n    id: string;\n    _type: string;\n  };\n\n  export type DisplayMethodStruct = { id: string; _type: string };\n\n  export type DisplayMethodStructOutput = [id: string, _type: string] & {\n    id: string;\n    _type: string;\n  };\n\n  export type CredentialDataStruct = {\n    id: BigNumberish;\n    context: string[];\n    _type: string;\n    issuanceDate: BigNumberish;\n    credentialSchema: INonMerklizedIssuer.CredentialSchemaStruct;\n    displayMethod: INonMerklizedIssuer.DisplayMethodStruct;\n  };\n\n  export type CredentialDataStructOutput = [\n    id: bigint,\n    context: string[],\n    _type: string,\n    issuanceDate: bigint,\n    credentialSchema: INonMerklizedIssuer.CredentialSchemaStructOutput,\n    displayMethod: INonMerklizedIssuer.DisplayMethodStructOutput\n  ] & {\n    id: bigint;\n    context: string[];\n    _type: string;\n    issuanceDate: bigint;\n    credentialSchema: INonMerklizedIssuer.CredentialSchemaStructOutput;\n    displayMethod: INonMerklizedIssuer.DisplayMethodStructOutput;\n  };\n\n  export type SubjectFieldStruct = {\n    key: string;\n    value: BigNumberish;\n    rawValue: BytesLike;\n  };\n\n  export type SubjectFieldStructOutput = [key: string, value: bigint, rawValue: string] & {\n    key: string;\n    value: bigint;\n    rawValue: string;\n  };\n}\n\nexport declare namespace IOnchainCredentialStatusResolver {\n  export type IdentityStateRootsStruct = {\n    state: BigNumberish;\n    claimsTreeRoot: BigNumberish;\n    revocationTreeRoot: BigNumberish;\n    rootOfRoots: BigNumberish;\n  };\n\n  export type IdentityStateRootsStructOutput = [\n    state: bigint,\n    claimsTreeRoot: bigint,\n    revocationTreeRoot: bigint,\n    rootOfRoots: bigint\n  ] & {\n    state: bigint;\n    claimsTreeRoot: bigint;\n    revocationTreeRoot: bigint;\n    rootOfRoots: bigint;\n  };\n\n  export type ProofStruct = {\n    root: BigNumberish;\n    existence: boolean;\n    siblings: BigNumberish[];\n    index: BigNumberish;\n    value: BigNumberish;\n    auxExistence: boolean;\n    auxIndex: BigNumberish;\n    auxValue: BigNumberish;\n  };\n\n  export type ProofStructOutput = [\n    root: bigint,\n    existence: boolean,\n    siblings: bigint[],\n    index: bigint,\n    value: bigint,\n    auxExistence: boolean,\n    auxIndex: bigint,\n    auxValue: bigint\n  ] & {\n    root: bigint;\n    existence: boolean;\n    siblings: bigint[];\n    index: bigint;\n    value: bigint;\n    auxExistence: boolean;\n    auxIndex: bigint;\n    auxValue: bigint;\n  };\n\n  export type CredentialStatusStruct = {\n    issuer: IOnchainCredentialStatusResolver.IdentityStateRootsStruct;\n    mtp: IOnchainCredentialStatusResolver.ProofStruct;\n  };\n\n  export type CredentialStatusStructOutput = [\n    issuer: IOnchainCredentialStatusResolver.IdentityStateRootsStructOutput,\n    mtp: IOnchainCredentialStatusResolver.ProofStructOutput\n  ] & {\n    issuer: IOnchainCredentialStatusResolver.IdentityStateRootsStructOutput;\n    mtp: IOnchainCredentialStatusResolver.ProofStructOutput;\n  };\n}\n\nexport interface NonMerklizedIssuerBaseInterface extends Interface {\n  getFunction(\n    nameOrSignature:\n      | 'CREDENTIAL_ADAPTER_VERSION'\n      | 'getClaimProof'\n      | 'getClaimProofByRoot'\n      | 'getClaimProofWithStateInfo'\n      | 'getClaimsTreeRoot'\n      | 'getCredential'\n      | 'getCredentialAdapterVersion'\n      | 'getId'\n      | 'getIsOldStateGenesis'\n      | 'getLatestPublishedClaimsRoot'\n      | 'getLatestPublishedRevocationsRoot'\n      | 'getLatestPublishedRootsRoot'\n      | 'getLatestPublishedState'\n      | 'getRevocationProof'\n      | 'getRevocationProofByRoot'\n      | 'getRevocationProofWithStateInfo'\n      | 'getRevocationStatus'\n      | 'getRevocationStatusByIdAndState'\n      | 'getRevocationsTreeRoot'\n      | 'getRootProof'\n      | 'getRootProofByRoot'\n      | 'getRootProofWithStateInfo'\n      | 'getRootsByState'\n      | 'getRootsTreeRoot'\n      | 'getSmtDepth'\n      | 'getUserCredentialIds'\n      | 'initialize'\n      | 'supportsInterface'\n  ): FunctionFragment;\n\n  encodeFunctionData(functionFragment: 'CREDENTIAL_ADAPTER_VERSION', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getClaimProof', values: [BigNumberish]): string;\n  encodeFunctionData(\n    functionFragment: 'getClaimProofByRoot',\n    values: [BigNumberish, BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: 'getClaimProofWithStateInfo',\n    values: [BigNumberish]\n  ): string;\n  encodeFunctionData(functionFragment: 'getClaimsTreeRoot', values?: undefined): string;\n  encodeFunctionData(\n    functionFragment: 'getCredential',\n    values: [BigNumberish, BigNumberish]\n  ): string;\n  encodeFunctionData(functionFragment: 'getCredentialAdapterVersion', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getId', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getIsOldStateGenesis', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getLatestPublishedClaimsRoot', values?: undefined): string;\n  encodeFunctionData(\n    functionFragment: 'getLatestPublishedRevocationsRoot',\n    values?: undefined\n  ): string;\n  encodeFunctionData(functionFragment: 'getLatestPublishedRootsRoot', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getLatestPublishedState', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getRevocationProof', values: [BigNumberish]): string;\n  encodeFunctionData(\n    functionFragment: 'getRevocationProofByRoot',\n    values: [BigNumberish, BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: 'getRevocationProofWithStateInfo',\n    values: [BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: 'getRevocationStatus',\n    values: [BigNumberish, BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: 'getRevocationStatusByIdAndState',\n    values: [BigNumberish, BigNumberish, BigNumberish]\n  ): string;\n  encodeFunctionData(functionFragment: 'getRevocationsTreeRoot', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getRootProof', values: [BigNumberish]): string;\n  encodeFunctionData(\n    functionFragment: 'getRootProofByRoot',\n    values: [BigNumberish, BigNumberish]\n  ): string;\n  encodeFunctionData(functionFragment: 'getRootProofWithStateInfo', values: [BigNumberish]): string;\n  encodeFunctionData(functionFragment: 'getRootsByState', values: [BigNumberish]): string;\n  encodeFunctionData(functionFragment: 'getRootsTreeRoot', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getSmtDepth', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getUserCredentialIds', values: [BigNumberish]): string;\n  encodeFunctionData(functionFragment: 'initialize', values: [AddressLike, BytesLike]): string;\n  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;\n\n  decodeFunctionResult(functionFragment: 'CREDENTIAL_ADAPTER_VERSION', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getClaimProof', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getClaimProofByRoot', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getClaimProofWithStateInfo', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getClaimsTreeRoot', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getCredential', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getCredentialAdapterVersion', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getId', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getIsOldStateGenesis', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getLatestPublishedClaimsRoot', data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: 'getLatestPublishedRevocationsRoot',\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: 'getLatestPublishedRootsRoot', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getLatestPublishedState', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getRevocationProof', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getRevocationProofByRoot', data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: 'getRevocationProofWithStateInfo',\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: 'getRevocationStatus', data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: 'getRevocationStatusByIdAndState',\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: 'getRevocationsTreeRoot', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getRootProof', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getRootProofByRoot', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getRootProofWithStateInfo', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getRootsByState', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getRootsTreeRoot', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getSmtDepth', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getUserCredentialIds', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;\n}\n\nexport interface NonMerklizedIssuerBase extends BaseContract {\n  connect(runner?: ContractRunner | null): NonMerklizedIssuerBase;\n  waitForDeployment(): Promise<this>;\n\n  interface: NonMerklizedIssuerBaseInterface;\n\n  queryFilter<TCEvent extends TypedContractEvent>(\n    event: TCEvent,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TypedEventLog<TCEvent>>>;\n  queryFilter<TCEvent extends TypedContractEvent>(\n    filter: TypedDeferredTopicFilter<TCEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TypedEventLog<TCEvent>>>;\n\n  on<TCEvent extends TypedContractEvent>(\n    event: TCEvent,\n    listener: TypedListener<TCEvent>\n  ): Promise<this>;\n  on<TCEvent extends TypedContractEvent>(\n    filter: TypedDeferredTopicFilter<TCEvent>,\n    listener: TypedListener<TCEvent>\n  ): Promise<this>;\n\n  once<TCEvent extends TypedContractEvent>(\n    event: TCEvent,\n    listener: TypedListener<TCEvent>\n  ): Promise<this>;\n  once<TCEvent extends TypedContractEvent>(\n    filter: TypedDeferredTopicFilter<TCEvent>,\n    listener: TypedListener<TCEvent>\n  ): Promise<this>;\n\n  listeners<TCEvent extends TypedContractEvent>(\n    event: TCEvent\n  ): Promise<Array<TypedListener<TCEvent>>>;\n  listeners(eventName?: string): Promise<Array<Listener>>;\n  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;\n\n  CREDENTIAL_ADAPTER_VERSION: TypedContractMethod<[], [string], 'view'>;\n\n  getClaimProof: TypedContractMethod<\n    [claimIndexHash: BigNumberish],\n    [SmtLib.ProofStructOutput],\n    'view'\n  >;\n\n  getClaimProofByRoot: TypedContractMethod<\n    [claimIndexHash: BigNumberish, root: BigNumberish],\n    [SmtLib.ProofStructOutput],\n    'view'\n  >;\n\n  getClaimProofWithStateInfo: TypedContractMethod<\n    [claimIndexHash: BigNumberish],\n    [[SmtLib.ProofStructOutput, IdentityLib.StateInfoStructOutput]],\n    'view'\n  >;\n\n  getClaimsTreeRoot: TypedContractMethod<[], [bigint], 'view'>;\n\n  getCredential: TypedContractMethod<\n    [_userId: BigNumberish, _credentialId: BigNumberish],\n    [\n      [\n        INonMerklizedIssuer.CredentialDataStructOutput,\n        bigint[],\n        INonMerklizedIssuer.SubjectFieldStructOutput[]\n      ]\n    ],\n    'view'\n  >;\n\n  getCredentialAdapterVersion: TypedContractMethod<[], [string], 'view'>;\n\n  getId: TypedContractMethod<[], [bigint], 'view'>;\n\n  getIsOldStateGenesis: TypedContractMethod<[], [boolean], 'view'>;\n\n  getLatestPublishedClaimsRoot: TypedContractMethod<[], [bigint], 'view'>;\n\n  getLatestPublishedRevocationsRoot: TypedContractMethod<[], [bigint], 'view'>;\n\n  getLatestPublishedRootsRoot: TypedContractMethod<[], [bigint], 'view'>;\n\n  getLatestPublishedState: TypedContractMethod<[], [bigint], 'view'>;\n\n  getRevocationProof: TypedContractMethod<\n    [revocationNonce: BigNumberish],\n    [SmtLib.ProofStructOutput],\n    'view'\n  >;\n\n  getRevocationProofByRoot: TypedContractMethod<\n    [revocationNonce: BigNumberish, root: BigNumberish],\n    [SmtLib.ProofStructOutput],\n    'view'\n  >;\n\n  getRevocationProofWithStateInfo: TypedContractMethod<\n    [revocationNonce: BigNumberish],\n    [[SmtLib.ProofStructOutput, IdentityLib.StateInfoStructOutput]],\n    'view'\n  >;\n\n  getRevocationStatus: TypedContractMethod<\n    [id: BigNumberish, nonce: BigNumberish],\n    [IOnchainCredentialStatusResolver.CredentialStatusStructOutput],\n    'view'\n  >;\n\n  getRevocationStatusByIdAndState: TypedContractMethod<\n    [id: BigNumberish, state: BigNumberish, nonce: BigNumberish],\n    [IOnchainCredentialStatusResolver.CredentialStatusStructOutput],\n    'view'\n  >;\n\n  getRevocationsTreeRoot: TypedContractMethod<[], [bigint], 'view'>;\n\n  getRootProof: TypedContractMethod<\n    [rootsTreeRoot: BigNumberish],\n    [SmtLib.ProofStructOutput],\n    'view'\n  >;\n\n  getRootProofByRoot: TypedContractMethod<\n    [claimsTreeRoot: BigNumberish, root: BigNumberish],\n    [SmtLib.ProofStructOutput],\n    'view'\n  >;\n\n  getRootProofWithStateInfo: TypedContractMethod<\n    [rootsTreeRoot: BigNumberish],\n    [[SmtLib.ProofStructOutput, IdentityLib.StateInfoStructOutput]],\n    'view'\n  >;\n\n  getRootsByState: TypedContractMethod<\n    [state: BigNumberish],\n    [IdentityLib.RootsStructOutput],\n    'view'\n  >;\n\n  getRootsTreeRoot: TypedContractMethod<[], [bigint], 'view'>;\n\n  getSmtDepth: TypedContractMethod<[], [bigint], 'view'>;\n\n  getUserCredentialIds: TypedContractMethod<[_userId: BigNumberish], [bigint[]], 'view'>;\n\n  initialize: TypedContractMethod<\n    [_stateContractAddr: AddressLike, idType: BytesLike],\n    [void],\n    'nonpayable'\n  >;\n\n  supportsInterface: TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>;\n\n  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;\n\n  getFunction(\n    nameOrSignature: 'CREDENTIAL_ADAPTER_VERSION'\n  ): TypedContractMethod<[], [string], 'view'>;\n  getFunction(\n    nameOrSignature: 'getClaimProof'\n  ): TypedContractMethod<[claimIndexHash: BigNumberish], [SmtLib.ProofStructOutput], 'view'>;\n  getFunction(\n    nameOrSignature: 'getClaimProofByRoot'\n  ): TypedContractMethod<\n    [claimIndexHash: BigNumberish, root: BigNumberish],\n    [SmtLib.ProofStructOutput],\n    'view'\n  >;\n  getFunction(\n    nameOrSignature: 'getClaimProofWithStateInfo'\n  ): TypedContractMethod<\n    [claimIndexHash: BigNumberish],\n    [[SmtLib.ProofStructOutput, IdentityLib.StateInfoStructOutput]],\n    'view'\n  >;\n  getFunction(nameOrSignature: 'getClaimsTreeRoot'): TypedContractMethod<[], [bigint], 'view'>;\n  getFunction(\n    nameOrSignature: 'getCredential'\n  ): TypedContractMethod<\n    [_userId: BigNumberish, _credentialId: BigNumberish],\n    [\n      [\n        INonMerklizedIssuer.CredentialDataStructOutput,\n        bigint[],\n        INonMerklizedIssuer.SubjectFieldStructOutput[]\n      ]\n    ],\n    'view'\n  >;\n  getFunction(\n    nameOrSignature: 'getCredentialAdapterVersion'\n  ): TypedContractMethod<[], [string], 'view'>;\n  getFunction(nameOrSignature: 'getId'): TypedContractMethod<[], [bigint], 'view'>;\n  getFunction(nameOrSignature: 'getIsOldStateGenesis'): TypedContractMethod<[], [boolean], 'view'>;\n  getFunction(\n    nameOrSignature: 'getLatestPublishedClaimsRoot'\n  ): TypedContractMethod<[], [bigint], 'view'>;\n  getFunction(\n    nameOrSignature: 'getLatestPublishedRevocationsRoot'\n  ): TypedContractMethod<[], [bigint], 'view'>;\n  getFunction(\n    nameOrSignature: 'getLatestPublishedRootsRoot'\n  ): TypedContractMethod<[], [bigint], 'view'>;\n  getFunction(\n    nameOrSignature: 'getLatestPublishedState'\n  ): TypedContractMethod<[], [bigint], 'view'>;\n  getFunction(\n    nameOrSignature: 'getRevocationProof'\n  ): TypedContractMethod<[revocationNonce: BigNumberish], [SmtLib.ProofStructOutput], 'view'>;\n  getFunction(\n    nameOrSignature: 'getRevocationProofByRoot'\n  ): TypedContractMethod<\n    [revocationNonce: BigNumberish, root: BigNumberish],\n    [SmtLib.ProofStructOutput],\n    'view'\n  >;\n  getFunction(\n    nameOrSignature: 'getRevocationProofWithStateInfo'\n  ): TypedContractMethod<\n    [revocationNonce: BigNumberish],\n    [[SmtLib.ProofStructOutput, IdentityLib.StateInfoStructOutput]],\n    'view'\n  >;\n  getFunction(\n    nameOrSignature: 'getRevocationStatus'\n  ): TypedContractMethod<\n    [id: BigNumberish, nonce: BigNumberish],\n    [IOnchainCredentialStatusResolver.CredentialStatusStructOutput],\n    'view'\n  >;\n  getFunction(\n    nameOrSignature: 'getRevocationStatusByIdAndState'\n  ): TypedContractMethod<\n    [id: BigNumberish, state: BigNumberish, nonce: BigNumberish],\n    [IOnchainCredentialStatusResolver.CredentialStatusStructOutput],\n    'view'\n  >;\n  getFunction(nameOrSignature: 'getRevocationsTreeRoot'): TypedContractMethod<[], [bigint], 'view'>;\n  getFunction(\n    nameOrSignature: 'getRootProof'\n  ): TypedContractMethod<[rootsTreeRoot: BigNumberish], [SmtLib.ProofStructOutput], 'view'>;\n  getFunction(\n    nameOrSignature: 'getRootProofByRoot'\n  ): TypedContractMethod<\n    [claimsTreeRoot: BigNumberish, root: BigNumberish],\n    [SmtLib.ProofStructOutput],\n    'view'\n  >;\n  getFunction(\n    nameOrSignature: 'getRootProofWithStateInfo'\n  ): TypedContractMethod<\n    [rootsTreeRoot: BigNumberish],\n    [[SmtLib.ProofStructOutput, IdentityLib.StateInfoStructOutput]],\n    'view'\n  >;\n  getFunction(\n    nameOrSignature: 'getRootsByState'\n  ): TypedContractMethod<[state: BigNumberish], [IdentityLib.RootsStructOutput], 'view'>;\n  getFunction(nameOrSignature: 'getRootsTreeRoot'): TypedContractMethod<[], [bigint], 'view'>;\n  getFunction(nameOrSignature: 'getSmtDepth'): TypedContractMethod<[], [bigint], 'view'>;\n  getFunction(\n    nameOrSignature: 'getUserCredentialIds'\n  ): TypedContractMethod<[_userId: BigNumberish], [bigint[]], 'view'>;\n  getFunction(\n    nameOrSignature: 'initialize'\n  ): TypedContractMethod<\n    [_stateContractAddr: AddressLike, idType: BytesLike],\n    [void],\n    'nonpayable'\n  >;\n  getFunction(\n    nameOrSignature: 'supportsInterface'\n  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>;\n\n  filters: {};\n}\n"]}